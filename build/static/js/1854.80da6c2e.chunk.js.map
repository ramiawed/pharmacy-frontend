{"version":3,"file":"static/js/1854.80da6c2e.chunk.js","mappings":"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","sources":["webpack://pharmacy-frontend/./src/components/card-info/card-info.module.scss?a8ee","components/card-info/card-info.component.jsx","webpack://pharmacy-frontend/./src/components/header/header.module.scss?fd78","components/header/header.component.jsx","pages/favorites-page/favorites-page.component.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"small_font\":\"card-info_small_font__AusTH\",\"card\":\"card-info_card__VcLb9\",\"header\":\"card-info_header__uTcny\",\"expanded\":\"card-info_expanded__IDH-A\",\"warning\":\"card-info_warning__bmiK1\"};","// card component that can collapsed or expanded by pressing on the header\n\n// props\n// headerTitle: text to show in the header section\n// children: array of component to show in the body of the card\n// type: warning or normal to change to background color of the card\n\nimport React, { useState } from \"react\";\n\n// react icon\nimport { BsFillCaretDownFill, BsFillCaretUpFill } from \"react-icons/bs\";\n\n// styles\nimport styles from \"./card-info.module.scss\";\n\nfunction CardInfo({ headerTitle, children, type }) {\n  const [expanded, setExpanded] = useState(true);\n\n  return (\n    <div\n      className={[styles.card, type === \"warning\" ? styles.warning : null].join(\n        \" \"\n      )}\n    >\n      <div\n        onClick={() => setExpanded(!expanded)}\n        className={[\n          styles.header,\n          type === \"warning\" ? styles.warning : null,\n          expanded ? styles.expanded : null,\n        ].join(\" \")}\n      >\n        <p>{headerTitle}</p>\n        <label\n          className={styles.header_label}\n          onClick={() => setExpanded(!expanded)}\n        >\n          {expanded ? <BsFillCaretUpFill /> : <BsFillCaretDownFill />}\n        </label>\n      </div>\n      {expanded && <div>{children}</div>}\n    </div>\n  );\n}\n\nexport default CardInfo;\n","// extracted by mini-css-extract-plugin\nexport default {\"small_font\":\"header_small_font__+3f02\",\"header\":\"header_header__MhatS\",\"back\":\"header_back__wgjRV\"};","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\n// components\nimport Icon from \"../action-icon/action-icon.component\";\n\n// icons\nimport { IoMdArrowRoundBack } from \"react-icons/io\";\n\n// constants\nimport { Colors } from \"../../utils/constants\";\n\n// style\nimport styles from \"./header.module.scss\";\n\nfunction Header({ children }) {\n  const history = useHistory();\n\n  return (\n    <div className={styles.header}>\n      {children}\n      <div className={styles.back}>\n        <Icon\n          onclick={() => {\n            history.goBack();\n          }}\n          icon={() => <IoMdArrowRoundBack />}\n          foreColor={Colors.WHITE_COLOR}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","// this page display the favorite companies, warehouses, items\n// depends on the favoritesSlice\n\n// favoritesSlice contains\n// 1- favorites\n// 2- favorites_items\n\nimport React, { useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Redirect, useHistory } from \"react-router-dom\";\n\n// redux stuff\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  resetFavorites,\n  getFavorites,\n  selectFavorites,\n} from \"../../redux/favorites/favoritesSlice\";\nimport { selectUserData } from \"../../redux/auth/authSlice\";\nimport { selectOnlineStatus } from \"../../redux/online/onlineSlice\";\n\n// components\nimport CardInfo from \"../../components/card-info/card-info.component\";\nimport Header from \"../../components/header/header.component\";\nimport PartnerRow from \"../../components/partner-row/partner-row.component\";\nimport Icon from \"../../components/action-icon/action-icon.component\";\nimport ItemRow from \"../../components/item-row/item-row.component\";\nimport ActionLoader from \"../../components/action-loader/action-loader.component\";\n\n// icons\nimport { RiRefreshLine } from \"react-icons/ri\";\n\n// styles\nimport generalStyles from \"../../style.module.scss\";\n\n// constants\nimport { Colors, UserTypeConstants } from \"../../utils/constants.js\";\n\n// handlers\nimport {\n  addCompanyToOurCompaniesHandler,\n  addPartnerToFavoriteHandler,\n  partnerRowClickHandler,\n  removeCompanyFromOurCompaniesHandler,\n  removePartnerFromFavoriteHandler,\n} from \"../../utils/handlers\";\n\nfunction FavoritesPage({ onSelectedChange }) {\n  const history = useHistory();\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  // selectors\n  // get the logged user\n  const { user, token } = useSelector(selectUserData);\n\n  // get the favorites partners and favorites items from favoritesSlice\n  const {\n    favorites_partners: favoritesPartners,\n    favorites_items: favoritesItems,\n    status,\n  } = useSelector(selectFavorites);\n  const isOnline = useSelector(selectOnlineStatus);\n\n  const refreshFavoritesHandler = () => {\n    dispatch(resetFavorites());\n    dispatch(getFavorites({ token }));\n  };\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    onSelectedChange();\n  }, []);\n\n  return user ? (\n    <>\n      <Header>\n        <h2>{t(\"favorites\")}</h2>\n        <div className={generalStyles.refresh_icon}>\n          <Icon\n            selected={false}\n            foreColor={Colors.WHITE_COLOR}\n            tooltip={t(\"refresh-tooltip\")}\n            onclick={refreshFavoritesHandler}\n            icon={() => <RiRefreshLine />}\n          />\n        </div>\n      </Header>\n      <div className={generalStyles.container_with_header}>\n        <div\n          style={{\n            paddingInline: \"10px\",\n            paddingLeft: \"10px\",\n            paddingRight: \"10px\",\n          }}\n        >\n          <CardInfo headerTitle={t(\"nav-items\")}>\n            {favoritesItems &&\n              favoritesItems.map((item) => (\n                <ItemRow\n                  key={item._id}\n                  item={item}\n                  withoutBoxShadow={true}\n                  isFavorite={true}\n                />\n              ))}\n          </CardInfo>\n          {/* favorites items */}\n\n          {/* favorite companies */}\n\n          <CardInfo headerTitle={t(\"companies\")}>\n            {favoritesPartners &&\n              favoritesPartners\n                .filter(\n                  (favorite) => favorite.type === UserTypeConstants.COMPANY\n                )\n                .map((favorite) => (\n                  <PartnerRow\n                    key={favorite._id}\n                    partner={favorite}\n                    withoutBoxShadow={true}\n                    addPartnerToFavoriteHandler={() =>\n                      addPartnerToFavoriteHandler(\n                        favorite,\n                        isOnline,\n                        dispatch,\n                        token,\n                        user\n                      )\n                    }\n                    addCompanyToOurCompaniesHandler={() =>\n                      addCompanyToOurCompaniesHandler(favorite, dispatch, token)\n                    }\n                    removeCompanyFromOurCompaniesHandler={() => {\n                      removeCompanyFromOurCompaniesHandler(\n                        favorite,\n                        isOnline,\n                        dispatch,\n                        token\n                      );\n                    }}\n                    removePartnerFromFavoriteHandler={() => {\n                      removePartnerFromFavoriteHandler(\n                        favorite,\n                        isOnline,\n                        dispatch,\n                        token\n                      );\n                    }}\n                    partnerRowClickHandler={(allowShowingWarehouseMedicines) =>\n                      partnerRowClickHandler(\n                        favorite,\n                        allowShowingWarehouseMedicines,\n                        user,\n                        dispatch,\n                        token,\n                        history\n                      )\n                    }\n                  />\n                ))}\n          </CardInfo>\n\n          {(user.type === UserTypeConstants.ADMIN ||\n            user.type === UserTypeConstants.PHARMACY ||\n            user.type === UserTypeConstants.COMPANY) && (\n            <CardInfo headerTitle={t(\"warehouses\")}>\n              {favoritesPartners &&\n                favoritesPartners\n                  .filter(\n                    (favorite) => favorite.type === UserTypeConstants.WAREHOUSE\n                  )\n                  .map((favorite) => (\n                    <PartnerRow\n                      key={favorite._id}\n                      partner={favorite}\n                      withoutBoxShadow={true}\n                      addPartnerToFavoriteHandler={() =>\n                        addPartnerToFavoriteHandler(\n                          favorite,\n                          isOnline,\n                          dispatch,\n                          token,\n                          user\n                        )\n                      }\n                      addCompanyToOurCompaniesHandler={() =>\n                        addCompanyToOurCompaniesHandler(\n                          favorite,\n                          dispatch,\n                          token\n                        )\n                      }\n                      removeCompanyFromOurCompaniesHandler={() => {\n                        removeCompanyFromOurCompaniesHandler(\n                          favorite,\n                          isOnline,\n                          dispatch,\n                          token\n                        );\n                      }}\n                      removePartnerFromFavoriteHandler={() => {\n                        removePartnerFromFavoriteHandler(\n                          favorite,\n                          isOnline,\n                          dispatch,\n                          token\n                        );\n                      }}\n                      partnerRowClickHandler={(\n                        allowShowingWarehouseMedicines\n                      ) =>\n                        partnerRowClickHandler(\n                          favorite,\n                          allowShowingWarehouseMedicines,\n                          user,\n                          dispatch,\n                          token,\n                          history\n                        )\n                      }\n                    />\n                  ))}\n            </CardInfo>\n          )}\n        </div>\n        {/* favorites warehouses */}\n\n        {status === \"loading\" && <ActionLoader allowCancel={false} />}\n      </div>\n    </>\n  ) : (\n    <Redirect to=\"/signin\" />\n  );\n}\n\nexport default FavoritesPage;\n"],"names":["headerTitle","children","type","useState","expanded","setExpanded","className","styles","join","onClick","history","useHistory","onclick","goBack","icon","foreColor","Colors","onSelectedChange","t","useTranslation","dispatch","useDispatch","useSelector","selectUserData","user","token","selectFavorites","favoritesPartners","favorites_partners","favoritesItems","favorites_items","status","isOnline","selectOnlineStatus","useEffect","window","scrollTo","generalStyles","selected","tooltip","resetFavorites","getFavorites","style","paddingInline","paddingLeft","paddingRight","map","item","withoutBoxShadow","isFavorite","_id","filter","favorite","UserTypeConstants","partner","addPartnerToFavoriteHandler","addCompanyToOurCompaniesHandler","removeCompanyFromOurCompaniesHandler","removePartnerFromFavoriteHandler","partnerRowClickHandler","allowShowingWarehouseMedicines","allowCancel","to"],"sourceRoot":""}