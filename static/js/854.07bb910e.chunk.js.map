{"version":3,"file":"static/js/854.07bb910e.chunk.js","mappings":"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","sources":["webpack://pharmacy-frontend/./src/components/add-to-cart-modal/add-to-cart-modal.module.scss?998e","components/add-to-cart-modal/add-to-cart-modal.component.jsx","webpack://pharmacy-frontend/./src/components/card-info/card-info.module.scss?a8ee","components/card-info/card-info.component.jsx","webpack://pharmacy-frontend/./src/components/item-row/item-row.module.scss?0115","components/item-row/item-row.component.jsx","components/partner-row/partner-row.component.jsx","pages/favorites-page/favorites-page.component.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"warehouse_row\":\"add-to-cart-modal_warehouse_row__WLx7w\",\"offer\":\"add-to-cart-modal_offer__vBdMK\",\"value\":\"add-to-cart-modal_value__aJCXy\",\"max_qty_div\":\"add-to-cart-modal_max_qty_div__DeRw8\",\"select_warehouse\":\"add-to-cart-modal_select_warehouse__QvEuj\",\"error\":\"add-to-cart-modal_error__N6LB6\"};","// Modal that show the item with it's warehouse to allow pharmacy to buy an item\n// you should select a quantity greater than zero an less than the selected warehouse max quantity\n\n// Props\n// item: the item that the pharmacy will buy\n// close: action to close the modal\n\nimport React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\n// components\nimport Modal from \"../modal/modal.component\";\nimport SelectCustom from \"../select/select.component\";\n\n// redux stuff\nimport { addItemToCart } from \"../../redux/cart/cartSlice\";\nimport { selectUserData } from \"../../redux/auth/authSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { statisticsItemAddedToCart } from \"../../redux/statistics/statisticsSlice\";\nimport { selectOnlineStatus } from \"../../redux/online/onlineSlice\";\n\n// constants and utils\nimport {\n  Colors,\n  OfferTypes,\n  onKeyPressForNumberInput,\n  toEnglishNumber,\n} from \"../../utils/constants\";\n\n// styles\nimport styles from \"./add-to-cart-modal.module.scss\";\n\n// check if there is an offer for entered quantity in a specific warehouse\nconst checkOfferQty = (selectedWarehouse, qty) => {\n  // check if the specified warehouse has an offer\n  if (selectedWarehouse.offer.offers.length > 0) {\n    // through all the offers, check if the entered quantity has an offer\n    for (let i = 0; i < selectedWarehouse.offer.offers.length; i++) {\n      // check if the entered quantity has an offer\n      if (qty >= selectedWarehouse.offer.offers[i].qty) {\n        // if it has return:\n        // 1- mode of the offer (pieces, percentage)\n        // 2- bonus\n        // 2-1: if the mode is pieces return the bonus * (entered qty / bonus qty)\n        // 2-2: if the mode is percentage return the bonus\n        if (selectedWarehouse.offer.mode === OfferTypes.PERCENTAGE) {\n          return selectedWarehouse.offer.offers[i].bonus;\n        } else {\n          return (\n            selectedWarehouse.offer.offers[i].bonus +\n            checkOfferQty(\n              selectedWarehouse,\n              qty - selectedWarehouse.offer.offers[i].qty\n            )\n          );\n        }\n      }\n    }\n  }\n\n  return 0;\n};\n\nfunction AddToCartModal({ item, close, setAddItemToCartMsg }) {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  // selectors\n  const { token, user } = useSelector(selectUserData);\n  const isOnline = useSelector(selectOnlineStatus);\n\n  // build the warehouse option array that contains this item\n  // get all the warehouse that contains this item\n  // put asterisk after warehouse name if the warehouse has an offer\n  const itemWarehousesOption = item.warehouses\n    .filter((w) => w.warehouse.city === user.city)\n    .map((w) => {\n      const asterisk = w.offer.offers.length > 0 ? \"*\" : \"\";\n\n      return {\n        label: `${w.warehouse.name} ${asterisk}`,\n        value: w.warehouse._id,\n      };\n    });\n\n  // select the first warehouse in the list\n  const [selectedWarehouse, setSelectedWarehouse] = useState(\n    item.warehouses.filter((w) => w.warehouse.city === user.city)[0]\n  );\n\n  const [offer, setOffer] = useState(\n    item.warehouses.filter((w) => w.warehouse.city === user.city)[0].offer\n  );\n  const [qty, setQty] = useState();\n  const [qtyError, setQtyError] = useState(false);\n\n  const handleWarehouseChange = (val) => {\n    setSelectedWarehouse(item.warehouses.find((w) => w.warehouse._id == val));\n    setOffer(item.warehouses.find((w) => w.warehouse._id == val).offer);\n  };\n\n  // const onKeyPress = (event) => {\n  //   return event.charCode >= 48 && event.charCode <= 57;\n  // };\n\n  const quantityChange = (e) => {\n    const value = Number.parseInt(toEnglishNumber(e.target.value));\n    setQty(isNaN(value) ? \"\" : value);\n    setQtyError(false);\n  };\n\n  const handleAddItemToCart = () => {\n    if (qty === \"\") {\n      setQtyError(true);\n      return;\n    }\n\n    if (selectedWarehouse.maxQty !== 0 && qty > selectedWarehouse.maxQty) {\n      setQtyError(true);\n      return;\n    }\n\n    const bonusQty = checkOfferQty(selectedWarehouse, qty);\n\n    dispatch(\n      addItemToCart({\n        item: item,\n        warehouse: selectedWarehouse,\n        qty: qty,\n        bonus: bonusQty > 0 ? bonusQty : null,\n        bonusType: bonusQty > 0 ? selectedWarehouse.offer.mode : null,\n      })\n    );\n\n    if (isOnline) {\n      dispatch(statisticsItemAddedToCart({ obj: { itemId: item._id }, token }));\n    }\n\n    close();\n    setAddItemToCartMsg(\"add-item-to-cart\");\n  };\n\n  return (\n    <>\n      <Modal\n        header=\"add-to-cart\"\n        cancelLabel=\"cancel-label\"\n        okLabel=\"add-label\"\n        closeModal={close}\n        okModal={handleAddItemToCart}\n        small={true}\n      >\n        {/* <div className={styles.warehouse_row}> */}\n        <div className={styles.select_warehouse}>\n          <label>{t(\"item-warehouse\")}</label>\n          <SelectCustom\n            bgColor={Colors.SECONDARY_COLOR}\n            foreColor=\"#fff\"\n            options={itemWarehousesOption}\n            onchange={handleWarehouseChange}\n            defaultOption={itemWarehousesOption[0]}\n            // caption=\"item-warehouse\"\n          />\n        </div>\n\n        <div className={styles.max_qty_div}>\n          <label>{t(\"item-max-qty\")}</label>\n          <p>\n            {selectedWarehouse.maxQty === 0\n              ? t(\"no-limit-qty\")\n              : selectedWarehouse.maxQty}\n          </p>\n        </div>\n        <div className={styles.max_qty_div}>\n          <label>{t(\"selected-qty\")}</label>\n          <input\n            className={qtyError ? styles.error : \"\"}\n            // type=\"number\"\n            // min={0}\n            value={qty}\n            onKeyPress={onKeyPressForNumberInput}\n            onChange={quantityChange}\n          />\n        </div>\n        {/* </div> */}\n\n        {offer?.offers.length > 0 &&\n          offer.offers.map((o, index) => (\n            <div className={styles.offer} key={index}>\n              <p>\n                <label>{t(\"quantity-label\")}</label>\n                <label className={styles.value} style={{ padding: \"0 6px\" }}>\n                  {o.qty}\n                </label>\n                <label style={{ paddingLeft: \"20px\" }}>\n                  {t(\"after-quantity-label\")}\n                </label>\n              </p>\n              <p>\n                <label>\n                  {offer.mode === OfferTypes.PIECES\n                    ? t(\"bonus-quantity-label\")\n                    : t(\"bonus-percentage-label\")}\n                </label>\n                <label className={styles.value}>{o.bonus}</label>\n                <label>\n                  {offer.mode === OfferTypes.PIECES\n                    ? t(\"after-bonus-quantity-label\")\n                    : t(\"after-bonus-percentage-label\")}\n                </label>\n              </p>\n            </div>\n          ))}\n      </Modal>\n    </>\n  );\n}\n\nexport default AddToCartModal;\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"card-info_card__VcLb9\",\"header\":\"card-info_header__uTcny\",\"warning\":\"card-info_warning__bmiK1\"};","// card component that can collapsed or expanded by pressing on the header\n\n// props\n// headerTitle: text to show in the header section\n// children: array of component to show in the body of the card\n// type: warning or normal to change to background color of the card\n\nimport React, { useState } from \"react\";\n\n// react icon\nimport { BsFillCaretDownFill, BsFillCaretUpFill } from \"react-icons/bs\";\n\n// styles\nimport styles from \"./card-info.module.scss\";\n\nfunction CardInfo({ headerTitle, children, type }) {\n  const [expanded, setExpanded] = useState(true);\n\n  return (\n    <div\n      className={[styles.card, type === \"warning\" ? styles.warning : null].join(\n        \" \"\n      )}\n    >\n      <div\n        onClick={() => setExpanded(!expanded)}\n        className={[\n          styles.header,\n          type === \"warning\" ? styles.warning : null,\n        ].join(\" \")}\n      >\n        <p>{headerTitle}</p>\n        <label\n          className={styles.header_label}\n          style={{}}\n          onClick={() => setExpanded(!expanded)}\n        >\n          {expanded ? <BsFillCaretUpFill /> : <BsFillCaretDownFill />}\n        </label>\n      </div>\n      {expanded && <div>{children}</div>}\n    </div>\n  );\n}\n\nexport default CardInfo;\n","// extracted by mini-css-extract-plugin\nexport default {\"name\":\"item-row_name__seC8Y\",\"align_center\":\"item-row_align_center__Ml13j\",\"align_start\":\"item-row_align_start__fA8fS\",\"details\":\"item-row_details__o1dWD\",\"icon\":\"item-row_icon__BqqxX\",\"fixed\":\"item-row_fixed__fKMWF\",\"price\":\"item-row_price__sAutL\",\"small_font\":\"item-row_small_font__V3pjP\"};","import React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\n\n// react-redux stuff\nimport {\n  statisticsItemFavorites,\n  statisticsItemSelected,\n} from \"../../redux/statistics/statisticsSlice\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectUserData } from \"../../redux/auth/authSlice\";\nimport {\n  changeOnlineMsg,\n  selectOnlineStatus,\n} from \"../../redux/online/onlineSlice\";\nimport {\n  addFavoriteItem,\n  removeFavoriteItem,\n  selectFavoritesItems,\n} from \"../../redux/favorites/favoritesSlice\";\nimport {\n  addItemToWarehouse,\n  removeItemFromWarehouse,\n} from \"../../redux/medicines/medicinesSlices\";\n\n// components\nimport AddToCartModal from \"../add-to-cart-modal/add-to-cart-modal.component\";\nimport Icon from \"../action-icon/action-icon.component\";\n\n// react icons\nimport { AiFillStar, AiOutlineStar } from \"react-icons/ai\";\nimport { GiShoppingCart } from \"react-icons/gi\";\nimport { RiDeleteBin5Fill } from \"react-icons/ri\";\nimport { MdAddCircle } from \"react-icons/md\";\nimport { VscLoading } from \"react-icons/vsc\";\n\n// styles\nimport generalStyles from \"../../style.module.scss\";\nimport rowStyles from \"../row.module.scss\";\nimport styles from \"./item-row.module.scss\";\n\n// constants and utils\nimport { Colors, UserTypeConstants } from \"../../utils/constants\";\nimport Toast from \"../toast/toast.component\";\n\n// if logged user is\n// 1- ADMIN: highlight the row by green color if the medicine has an offer.\n// 2- COMPANY: don't highlight the row never.\n// 3- GUEST: don't highlight the row never.\n// 4- WAREHOUSE: highlight the row by green if the medicine has an offer by logging warehouse.\n// 5- PHARMACY: highlight the row by green if the medicine has an offer by any warehouse\n// in the same city with the logging user\nconst checkOffer = (item, user) => {\n  // don't show the offer if the logged user is GUEST or COMPANY\n  if (\n    user.type === UserTypeConstants.GUEST ||\n    user.type === UserTypeConstants.COMPANY\n  ) {\n    return false;\n  }\n\n  let result = false;\n\n  if (user.type === UserTypeConstants.ADMIN) {\n    item.warehouses.forEach((w) => {\n      if (w.offer.offers.length > 0) {\n        result = true;\n      }\n    });\n  }\n\n  if (user.type === UserTypeConstants.WAREHOUSE) {\n    item.warehouses\n      .filter((w) => w.warehouse._id === user._id)\n      .forEach((w) => {\n        if (w.offer.offers.length > 0) {\n          result = true;\n        }\n      });\n  }\n\n  if (user.type === UserTypeConstants.PHARMACY) {\n    item.warehouses.forEach((w) => {\n      if (w.warehouse.city === user.city && w.offer.offers.length > 0) {\n        result = true;\n      }\n    });\n  }\n\n  return result;\n};\n\nfunction ItemRow({ item, isSearch, isFavorite, isSmallFavorite }) {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  // selectors\n  const isOnline = useSelector(selectOnlineStatus);\n  const { user, token } = useSelector(selectUserData);\n  const favoritesItems = useSelector(selectFavoritesItems);\n\n  // own state\n  const [showModal, setShowModal] = useState(false);\n  const [changeFavoriteLoading, setChangeFavoriteLoading] = useState(false);\n  const [changeAddToWarehouseLoading, setChangeAddToWarehouseLoading] =\n    useState(false);\n  const [addItemToCart, setAddItemToCart] = useState(\"\");\n\n  // method to handle add company to user's favorite\n  const addItemToFavoriteItemsHandler = (e) => {\n    // check the internet connection\n    if (!isOnline) {\n      dispatch(changeOnlineMsg());\n      return;\n    }\n\n    setChangeFavoriteLoading(true);\n\n    dispatch(addFavoriteItem({ obj: { favoriteItemId: item._id }, token }))\n      .then(unwrapResult)\n      .then(() => {\n        dispatch(statisticsItemFavorites({ obj: { itemId: item._id }, token }));\n        setChangeFavoriteLoading(false);\n      })\n      .catch(() => {\n        setChangeFavoriteLoading(false);\n      });\n\n    // e.stopPropagation();\n  };\n\n  // method to handle remove company from user's favorite\n  const removeItemFromFavoritesItemsHandler = (e) => {\n    // check the internet connection\n    if (!isOnline) {\n      dispatch(changeOnlineMsg());\n      return;\n    }\n\n    setChangeFavoriteLoading(true);\n\n    dispatch(removeFavoriteItem({ obj: { favoriteItemId: item._id }, token }))\n      .then(unwrapResult)\n      .then(() => {\n        setChangeFavoriteLoading(false);\n      })\n      .catch(() => {\n        setChangeFavoriteLoading(false);\n      });\n\n    // e.stopPropagation();\n  };\n\n  // method to handle add item to warehouse\n  const addItemToWarehouseHandler = (e) => {\n    // check the internet connection\n    if (!isOnline) {\n      dispatch(changeOnlineMsg());\n      return;\n    }\n\n    setChangeAddToWarehouseLoading(true);\n\n    dispatch(\n      addItemToWarehouse({\n        obj: {\n          itemId: item._id,\n          warehouseId: user._id,\n          city: user.city,\n        },\n        token,\n      })\n    )\n      .then(unwrapResult)\n      .then(() => {\n        setChangeAddToWarehouseLoading(false);\n      })\n      .catch(() => {\n        setChangeAddToWarehouseLoading(false);\n      });\n\n    // e.stopPropagation();\n  };\n\n  // method to handle remove item from warehouse\n  const removeItemFromWarehouseHandler = (e) => {\n    // check the internet connection\n    if (!isOnline) {\n      dispatch(changeOnlineMsg());\n      return;\n    }\n\n    setChangeAddToWarehouseLoading(true);\n\n    dispatch(\n      removeItemFromWarehouse({\n        obj: {\n          itemId: item._id,\n          warehouseId: user._id,\n          city: user.city,\n        },\n        token,\n      })\n    )\n      .then(unwrapResult)\n      .then(() => {\n        setChangeAddToWarehouseLoading(false);\n      })\n      .catch(() => {\n        setChangeAddToWarehouseLoading(false);\n      });\n\n    // e.stopPropagation();\n  };\n\n  const dispatchStatisticsHandler = () => {\n    if (\n      user.type === UserTypeConstants.PHARMACY ||\n      user.type === UserTypeConstants.GUEST\n    ) {\n      dispatch(\n        statisticsItemSelected({\n          obj: { itemId: item._id },\n          token,\n        })\n      );\n    }\n  };\n\n  // render method\n  return (\n    <>\n      <div\n        style={{\n          backgroundColor: checkOffer(item, user)\n            ? Colors.OFFER_COLOR\n            : Colors.WHITE_COLOR,\n          cursor: \"pointer\",\n        }}\n        className={[\n          isSearch || isFavorite\n            ? rowStyles.search_container\n            : rowStyles.container,\n        ].join(\" \")}\n        onClick={() => {\n          dispatchStatisticsHandler();\n\n          history.push(\"/item\", {\n            from: user.type,\n            type: \"info\",\n            allowAction: false,\n            itemId: item._id,\n            companyId: item.company._id,\n            warehouseId:\n              user.type === UserTypeConstants.WAREHOUSE ? user._id : null,\n          });\n        }}\n      >\n        <label\n          className={[\n            styles.name,\n            !isFavorite ? styles.align_center : \"\",\n            isFavorite ? styles.align_start : \"\",\n            isSmallFavorite ? styles.small_font : \"\",\n          ].join(\" \")}\n        >\n          {item.name}\n        </label>\n\n        <label\n          className={[\n            styles.details,\n            styles.center,\n            isSmallFavorite ? styles.small_font : \"\",\n          ].join(\" \")}\n        >\n          {item.company.name}\n        </label>\n\n        <label\n          className={[\n            styles.fixed,\n            styles.center,\n            isSmallFavorite ? styles.small_font : \"\",\n          ].join(\" \")}\n        >\n          {item.caliber}\n        </label>\n\n        <label\n          className={[\n            styles.fixed,\n            styles.center,\n            isSmallFavorite ? styles.small_font : \"\",\n          ].join(\" \")}\n        >\n          {item.packing}\n        </label>\n\n        <label\n          className={[\n            styles.details,\n            styles.center,\n            isSmallFavorite ? styles.small_font : \"\",\n          ].join(\" \")}\n        >\n          {item.formula}\n        </label>\n\n        {user.type !== UserTypeConstants.GUEST && !isFavorite && (\n          <label className={[styles.price, styles.center].join(\" \")}>\n            {item.price}\n          </label>\n        )}\n\n        {!isFavorite && (\n          <label className={[styles.price, styles.center].join(\" \")}>\n            {item.customer_price}\n          </label>\n        )}\n\n        {!isFavorite && (\n          <label\n            className={[\n              styles.details,\n              styles.center,\n              isSmallFavorite ? styles.small_font : \"\",\n            ].join(\" \")}\n          >\n            {item.barcode}\n          </label>\n        )}\n\n        <label className={[styles.center, styles.icon].join(\" \")}>\n          {changeAddToWarehouseLoading ? (\n            <Icon\n              icon={() => <VscLoading className={generalStyles.loading} />}\n              onclick={() => {}}\n              foreColor={Colors.SECONDARY_COLOR}\n            />\n          ) : (\n            user.type === UserTypeConstants.WAREHOUSE &&\n            (item.warehouses.map((w) => w.warehouse._id).includes(user._id) ? (\n              <Icon\n                icon={() => <RiDeleteBin5Fill />}\n                onclick={removeItemFromWarehouseHandler}\n                tooltip={t(\"remove-from-warehouse-tooltip\")}\n                foreColor={Colors.FAILED_COLOR}\n              />\n            ) : (\n              <Icon\n                icon={() => <MdAddCircle />}\n                onclick={addItemToWarehouseHandler}\n                tooltip={t(\"add-to-warehouse-tooltip\")}\n                foreColor={Colors.SUCCEEDED_COLOR}\n              />\n            ))\n          )}\n\n          {user.type === UserTypeConstants.PHARMACY &&\n          item.existing_place[user.city] > 0 ? (\n            <Icon\n              icon={() => <GiShoppingCart />}\n              onclick={(e) => {\n                setShowModal(true);\n                e.stopPropagation();\n              }}\n              foreColor={Colors.SUCCEEDED_COLOR}\n            />\n          ) : (\n            <div style={{ width: \"24px\" }}></div>\n          )}\n        </label>\n\n        <label className={[styles.icon, styles.align_center].join(\" \")}>\n          {changeFavoriteLoading ? (\n            <Icon\n              icon={() => <VscLoading className={generalStyles.loading} />}\n              onclick={() => {}}\n              foreColor={Colors.YELLOW_COLOR}\n            />\n          ) : favoritesItems\n              .map((favorite) => favorite._id)\n              .includes(item._id) ? (\n            <Icon\n              icon={() => <AiFillStar />}\n              onclick={removeItemFromFavoritesItemsHandler}\n              tooltip={t(\"remove-from-favorite-tooltip\")}\n              foreColor={Colors.YELLOW_COLOR}\n            />\n          ) : (\n            <Icon\n              icon={() => <AiOutlineStar />}\n              onclick={addItemToFavoriteItemsHandler}\n              tooltip={t(\"add-to-favorite-tooltip\")}\n              foreColor={Colors.YELLOW_COLOR}\n            />\n          )}\n        </label>\n      </div>\n\n      {showModal && (\n        <AddToCartModal\n          item={item}\n          close={() => setShowModal(false)}\n          setAddItemToCartMsg={setAddItemToCart}\n        />\n      )}\n\n      {addItemToCart.length > 0 && (\n        <Toast\n          bgColor={Colors.SUCCEEDED_COLOR}\n          foreColor=\"#fff\"\n          toastText={t(addItemToCart)}\n          actionAfterTimeout={() => setAddItemToCart(\"\")}\n        />\n      )}\n    </>\n  );\n}\n\nexport default ItemRow;\n","import React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\n\n// react icons\nimport { AiFillStar, AiOutlineStar } from \"react-icons/ai\";\nimport { VscLoading } from \"react-icons/vsc\";\n\n// components\nimport Icon from \"../action-icon/action-icon.component\";\n\n// redux-stuff\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport {\n  addFavorite,\n  selectFavoritesPartners,\n  removeFavorite,\n  selectFavoritesError,\n} from \"../../redux/favorites/favoritesSlice\";\nimport { selectUserData } from \"../../redux/auth/authSlice\";\nimport {\n  addStatistics,\n  statisticsCompanySelected,\n  statisticsUserFavorites,\n} from \"../../redux/statistics/statisticsSlice\";\nimport {\n  changeOnlineMsg,\n  selectOnlineStatus,\n} from \"../../redux/online/onlineSlice\";\nimport { selectSettings } from \"../../redux/settings/settingsSlice\";\nimport {\n  resetMedicines,\n  setSearchCompanyName,\n  setSearchWarehouseName,\n} from \"../../redux/medicines/medicinesSlices\";\n\n// styles\nimport generalStyles from \"../../style.module.scss\";\nimport rowStyles from \"../row.module.scss\";\n\n// constants and utils\nimport { Colors, UserTypeConstants } from \"../../utils/constants.js\";\n\nfunction PartnerRow({ partner, isSearch, withoutBoxShadow }) {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  // selectors\n  const {\n    settings: { showWarehouseItem },\n  } = useSelector(selectSettings);\n  const isOnline = useSelector(selectOnlineStatus);\n  const favorites = useSelector(selectFavoritesPartners);\n  const favoritesError = useSelector(selectFavoritesError);\n  const { token, user } = useSelector(selectUserData);\n\n  // own state\n  // state to display a loader icon when partner dispatch addToFavorite or removeFromFavorite\n  const [changeFavoriteLoading, setChangeFavoriteLoading] = useState(false);\n\n  // determine if the partner can see the medicines in specific warehouse\n  const allowShowingWarehouseMedicines =\n    user.type === UserTypeConstants.ADMIN ||\n    partner.type === UserTypeConstants.COMPANY ||\n    (partner.type === UserTypeConstants.WAREHOUSE &&\n      showWarehouseItem &&\n      partner.allowShowingMedicines);\n\n  // method to handle add company to partner's favorite\n  const addPartnerToFavorite = (e) => {\n    // check the internet connection\n    if (!isOnline) {\n      dispatch(changeOnlineMsg());\n      return;\n    }\n\n    setChangeFavoriteLoading(true);\n\n    dispatch(addFavorite({ obj: { favoriteId: partner._id }, token }))\n      .then(unwrapResult)\n      .then(() => {\n        setChangeFavoriteLoading(false);\n        dispatch(\n          statisticsUserFavorites({ obj: { partnerId: partner._id }, token })\n        );\n        dispatch(\n          addStatistics({\n            obj: {\n              sourceUser: user._id,\n              targetUser: partner._id,\n              action: \"user-added-to-favorite\",\n            },\n            token,\n          })\n        );\n      })\n      .catch(() => {\n        setChangeFavoriteLoading(false);\n      });\n  };\n\n  // method to handle remove company from partner's favorite\n  const removePartnerFromFavoriteHandler = (e) => {\n    // check the internet connection\n    if (!isOnline) {\n      dispatch(changeOnlineMsg());\n      return;\n    }\n\n    setChangeFavoriteLoading(true);\n\n    dispatch(removeFavorite({ obj: { favoriteId: partner._id }, token }))\n      .then(unwrapResult)\n      .then(() => {\n        setChangeFavoriteLoading(false);\n      })\n      .catch(() => setChangeFavoriteLoading(false));\n  };\n\n  const partnerRowClickHandler = () => {\n    if (\n      partner.type === UserTypeConstants.WAREHOUSE &&\n      user.type === UserTypeConstants.WAREHOUSE\n    ) {\n      return;\n    }\n    if (allowShowingWarehouseMedicines) {\n      // if the partner type is pharmacy or normal, change the selectedCount\n      // and selectedDates for this company\n      if (\n        user.type === UserTypeConstants.PHARMACY ||\n        user.type === UserTypeConstants.GUEST\n      ) {\n        dispatch(\n          statisticsCompanySelected({\n            obj: { companyId: partner._id },\n            token,\n          })\n        );\n        dispatch(\n          addStatistics({\n            obj: {\n              sourceUser: user._id,\n              targetUser: partner._id,\n              action: \"choose-company\",\n            },\n            token,\n          })\n        );\n      }\n      dispatch(resetMedicines());\n\n      if (partner.type === UserTypeConstants.COMPANY) {\n        dispatch(setSearchCompanyName(partner.name));\n      }\n\n      if (partner.type === UserTypeConstants.WAREHOUSE) {\n        dispatch(setSearchWarehouseName(partner.name));\n      }\n      history.push(\"/medicines\");\n    }\n  };\n\n  return (\n    <>\n      <div\n        className={[\n          isSearch ? rowStyles.search_container : rowStyles.container,\n          withoutBoxShadow ? rowStyles.without_box_shadow : \"\",\n        ].join(\" \")}\n        style={{\n          cursor: \"pointer\",\n        }}\n        onClick={partnerRowClickHandler}\n      >\n        <label\n          className={[rowStyles.hover_underline, rowStyles.padding_start].join(\n            \" \"\n          )}\n          style={{\n            fontSize: \"16px\",\n          }}\n        >\n          {partner.name}\n        </label>\n\n        {changeFavoriteLoading ? (\n          <div className={[rowStyles.padding_end].join(\" \")}>\n            <Icon\n              icon={() => (\n                <VscLoading className={generalStyles.loading} size={20} />\n              )}\n              onclick={() => {}}\n              foreColor={Colors.YELLOW_COLOR}\n            />\n          </div>\n        ) : (\n          <div className={[rowStyles.padding_end].join(\" \")}>\n            {favoritesError === \"\" ? (\n              favorites &&\n              favorites\n                .map((favorite) => favorite._id)\n                .includes(partner._id) ? (\n                <Icon\n                  icon={() => <AiFillStar size={20} />}\n                  onclick={removePartnerFromFavoriteHandler}\n                  foreColor={Colors.YELLOW_COLOR}\n                  tooltip={t(\"remove-from-favorite-tooltip\")}\n                />\n              ) : (\n                <Icon\n                  icon={() => <AiOutlineStar size={20} />}\n                  onclick={addPartnerToFavorite}\n                  foreColor={Colors.YELLOW_COLOR}\n                  tooltip={t(\"add-to-favorite-tooltip\")}\n                />\n              )\n            ) : null}\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default PartnerRow;\n","// this page display the favorite companies, warehouses, items\n// depends on the favoritesSlice\n\n// favoritesSlice contains\n// 1- favorites\n// 2- favorites_items\n\nimport React, { useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Redirect } from \"react-router-dom\";\n\n// redux stuff\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  resetFavorites,\n  getFavorites,\n  selectFavorites,\n} from \"../../redux/favorites/favoritesSlice\";\nimport { selectUserData } from \"../../redux/auth/authSlice\";\n\n// components\nimport CardInfo from \"../../components/card-info/card-info.component\";\nimport Header from \"../../components/header/header.component\";\nimport PartnerRow from \"../../components/partner-row/partner-row.component\";\nimport Icon from \"../../components/action-icon/action-icon.component\";\nimport ItemRow from \"../../components/item-row/item-row.component\";\nimport ActionLoader from \"../../components/action-loader/action-loader.component\";\n\n// icons\nimport { RiRefreshLine } from \"react-icons/ri\";\n\n// styles\nimport generalStyles from \"../../style.module.scss\";\n\n// constants\nimport { Colors, UserTypeConstants } from \"../../utils/constants.js\";\n\nfunction FavoritesPage({ onSelectedChange }) {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  // selectors\n  // get the logged user\n  const { user, token } = useSelector(selectUserData);\n\n  // get the favorites partners and favorites items from favoritesSlice\n  // const favoritesPartners = useSelector(selectFavoritesPartners);\n  // const favoritesItems = useSelector(selectFavoritesItems);\n  const {\n    favorites_partners: favoritesPartners,\n    favorites_items: favoritesItems,\n    status,\n  } = useSelector(selectFavorites);\n\n  const refreshFavoritesHandler = () => {\n    dispatch(resetFavorites());\n    dispatch(getFavorites({ token }));\n  };\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    onSelectedChange();\n  }, []);\n\n  return user ? (\n    <div className={generalStyles.container}>\n      <Header>\n        <h2>{t(\"favorites\")}</h2>\n        <div\n          style={{\n            position: \"absolute\",\n            top: \"16px\",\n            left: \"42px\",\n          }}\n        >\n          <Icon\n            selected={false}\n            foreColor={Colors.SECONDARY_COLOR}\n            tooltip={t(\"refresh-tooltip\")}\n            onclick={refreshFavoritesHandler}\n            icon={() => <RiRefreshLine />}\n          />\n        </div>\n      </Header>\n\n      {/* favorites items */}\n      <CardInfo headerTitle={t(\"nav-items\")}>\n        {favoritesItems &&\n          favoritesItems.map((item) => (\n            <ItemRow\n              key={item._id}\n              item={item}\n              withoutBoxShadow={true}\n              isFavorite={true}\n            />\n          ))}\n      </CardInfo>\n\n      {/* favorite companies */}\n      <CardInfo headerTitle={t(\"companies\")}>\n        {favoritesPartners &&\n          favoritesPartners\n            .filter((favorite) => favorite.type === UserTypeConstants.COMPANY)\n            .map((favorite) => (\n              <PartnerRow\n                key={favorite._id}\n                partner={favorite}\n                withoutBoxShadow={true}\n              />\n            ))}\n      </CardInfo>\n\n      {/* favorites warehouses */}\n      <CardInfo headerTitle={t(\"warehouses\")}>\n        {favoritesPartners &&\n          favoritesPartners\n            .filter((favorite) => favorite.type === UserTypeConstants.WAREHOUSE)\n            .map((favorite) => (\n              <PartnerRow\n                key={favorite._id}\n                partner={favorite}\n                withoutBoxShadow={true}\n              />\n            ))}\n      </CardInfo>\n\n      {status === \"loading\" && <ActionLoader allowCancel={false} />}\n    </div>\n  ) : (\n    <Redirect to=\"/signin\" />\n  );\n}\n\nexport default FavoritesPage;\n"],"names":["checkOfferQty","selectedWarehouse","qty","offer","offers","length","i","mode","OfferTypes","bonus","item","close","setAddItemToCartMsg","t","useTranslation","dispatch","useDispatch","useSelector","selectUserData","token","user","isOnline","selectOnlineStatus","itemWarehousesOption","warehouses","filter","w","warehouse","city","map","asterisk","label","name","value","_id","useState","setSelectedWarehouse","setOffer","setQty","qtyError","setQtyError","header","cancelLabel","okLabel","closeModal","okModal","maxQty","bonusQty","addItemToCart","bonusType","statisticsItemAddedToCart","obj","itemId","small","className","styles","bgColor","Colors","foreColor","options","onchange","val","find","defaultOption","onKeyPress","onKeyPressForNumberInput","onChange","e","Number","parseInt","toEnglishNumber","target","isNaN","o","index","style","padding","paddingLeft","headerTitle","children","type","expanded","setExpanded","join","onClick","checkOffer","UserTypeConstants","result","forEach","isSearch","isFavorite","isSmallFavorite","history","useHistory","favoritesItems","selectFavoritesItems","showModal","setShowModal","changeFavoriteLoading","setChangeFavoriteLoading","changeAddToWarehouseLoading","setChangeAddToWarehouseLoading","setAddItemToCart","backgroundColor","cursor","rowStyles","statisticsItemSelected","push","from","allowAction","companyId","company","warehouseId","caliber","packing","formula","price","customer_price","barcode","icon","generalStyles","onclick","includes","removeItemFromWarehouse","then","unwrapResult","catch","changeOnlineMsg","tooltip","addItemToWarehouse","existing_place","stopPropagation","width","favorite","removeFavoriteItem","favoriteItemId","addFavoriteItem","statisticsItemFavorites","toastText","actionAfterTimeout","partner","withoutBoxShadow","showWarehouseItem","selectSettings","settings","favorites","selectFavoritesPartners","favoritesError","selectFavoritesError","allowShowingWarehouseMedicines","allowShowingMedicines","statisticsCompanySelected","addStatistics","sourceUser","targetUser","action","resetMedicines","setSearchCompanyName","setSearchWarehouseName","fontSize","size","removeFavorite","favoriteId","addFavorite","statisticsUserFavorites","partnerId","onSelectedChange","selectFavorites","favoritesPartners","favorites_partners","favorites_items","status","useEffect","window","scrollTo","position","top","left","selected","resetFavorites","getFavorites","allowCancel","to"],"sourceRoot":""}