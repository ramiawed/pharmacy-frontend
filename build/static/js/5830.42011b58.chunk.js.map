{"version":3,"file":"static/js/5830.42011b58.chunk.js","mappings":"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","sources":["webpack://pharmacy-frontend/./src/components/header/header.module.scss?fd78","components/header/header.component.jsx","webpack://pharmacy-frontend/./src/components/main-content-container/main-content-container.module.scss?3a38","components/main-content-container/main-content-container.component.jsx","webpack://pharmacy-frontend/./src/components/notification-row/notification-row.module.scss?0ea7","components/notification-row/notification-row.component.jsx","pages/user-notification-page/user-notification-page.component.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"small_font\":\"header_small_font__+3f02\",\"header\":\"header_header__MhatS\"};","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\n\n// components\nimport Icon from \"../icon/icon.component\";\n\n// icons\nimport { IoMdArrowRoundBack } from \"react-icons/io\";\nimport { RiRefreshLine } from \"react-icons/ri\";\n\n// constants\nimport { Colors } from \"../../utils/constants\";\n\n// style\nimport styles from \"./header.module.scss\";\n\nfunction Header({ refreshHandler, title, count }) {\n  const history = useHistory();\n  const { t } = useTranslation();\n\n  return (\n    <div className={styles.header}>\n      <p>\n        {t(title)}\n        {count ? <span>{count}</span> : \"\"}\n      </p>\n      {refreshHandler && (\n        <Icon\n          selected={false}\n          foreColor={Colors.WHITE_COLOR}\n          tooltip={t(\"refresh\")}\n          onclick={refreshHandler}\n          icon={() => <RiRefreshLine />}\n        />\n      )}\n      <Icon\n        onclick={() => {\n          history.goBack();\n        }}\n        icon={() => <IoMdArrowRoundBack />}\n        foreColor={Colors.WHITE_COLOR}\n      />\n    </div>\n  );\n}\n\nexport default Header;\n","// extracted by mini-css-extract-plugin\nexport default {\"main_content_container\":\"main-content-container_main_content_container__Aihvg\"};","import React from \"react\";\n\nimport styles from \"./main-content-container.module.scss\";\n\nconst MainContentContainer = ({ children }) => {\n  return <div className={styles.main_content_container}>{children}</div>;\n};\n\nexport default MainContentContainer;\n","// extracted by mini-css-extract-plugin\nexport default {\"small_font\":\"notification-row_small_font__Op6-U\",\"row_container\":\"notification-row_row_container__H9osv\",\"inner_container\":\"notification-row_inner_container__mY+Cj\",\"img\":\"notification-row_img__3B3IG\",\"image\":\"notification-row_image__ziJsf\",\"actions\":\"notification-row_actions__xTxlf\",\"delete\":\"notification-row_delete__Xs7yf\",\"unread\":\"notification-row_unread__wOU2r\",\"row\":\"notification-row_row__pwMuM\",\"body\":\"notification-row_body__FQWd+\",\"header\":\"notification-row_header__yfsGP\",\"unread_icon\":\"notification-row_unread_icon__-5kw9\"};","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { useTranslation } from \"react-i18next\";\n\n// react-stuff\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { deleteNotification } from \"../../redux/notifications/notificationsSlice\";\nimport { selectUserData } from \"../../redux/auth/authSlice\";\nimport {\n  decreaseUnreadNotificationsCount,\n  setNotificationRead,\n} from \"../../redux/userNotifications/userNotificationsSlice\";\n\n// components\nimport Modal from \"../../modals/modal/modal.component\";\n\n// icons\nimport { RiDeleteBin5Fill } from \"react-icons/ri\";\nimport { BiImage } from \"react-icons/bi\";\nimport { FaBookmark } from \"react-icons/fa\";\n\n// styles\nimport styles from \"./notification-row.module.scss\";\n\n// constants\nimport { Colors, SERVER_URL, UserTypeConstants } from \"../../utils/constants\";\n\nfunction NotificationRow({ notification, index, setSuccessDeletingMsg }) {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  // selectors\n  const { token, user } = useSelector(selectUserData);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const showNotificationDetails = () => {\n    if (\n      user.type !== UserTypeConstants.ADMIN &&\n      !notification.users.includes(user._id)\n    ) {\n      dispatch(\n        setNotificationRead({ token, notificationId: notification._id })\n      );\n      dispatch(decreaseUnreadNotificationsCount());\n    }\n\n    history.push(`/notification/${notification._id}`);\n  };\n\n  const deleteNotificationHandler = () => {\n    setShowDeleteModal(false);\n    dispatch(deleteNotification({ id: notification._id, token }))\n      .then(unwrapResult)\n      .then(() => {\n        setSuccessDeletingMsg(\"delete notification msg\");\n      });\n  };\n\n  return (\n    <div\n      className={[styles.row_container].join(\" \")}\n      style={{\n        animationDuration: (0.3 * index) / 10 + \"s\",\n      }}\n    >\n      <div className={styles.img}>\n        {notification.logo_url !== \"\" ? (\n          <img\n            className={styles.image}\n            src={`${SERVER_URL}/notifications/${notification.logo_url}`}\n            alt=\"thumb\"\n          />\n        ) : (\n          <>\n            <BiImage size={64} color={Colors.LIGHT_COLOR} />\n          </>\n        )}\n      </div>\n\n      <div className={styles.inner_container} onClick={showNotificationDetails}>\n        <div className={styles.row}>\n          <p className={styles.header}>{notification.header}</p>\n        </div>\n        <div className={styles.row}>\n          <p className={styles.body}>{notification.body}</p>\n        </div>\n\n        {!notification.users.includes(user._id) &&\n          user.type !== UserTypeConstants.ADMIN && (\n            <div className={styles.unread_icon}>\n              <FaBookmark />\n            </div>\n          )}\n      </div>\n\n      {user.type === UserTypeConstants.ADMIN && (\n        <div\n          className={styles.delete}\n          onClick={() => {\n            setShowDeleteModal(true);\n          }}\n        >\n          <RiDeleteBin5Fill size={24} />\n        </div>\n      )}\n\n      {showDeleteModal && (\n        <Modal\n          header=\"delete notification\"\n          cancelLabel=\"close\"\n          okLabel=\"ok\"\n          closeModal={() => {\n            setShowDeleteModal(false);\n          }}\n          small={true}\n          okModal={deleteNotificationHandler}\n          color={Colors.FAILED_COLOR}\n        >\n          <p>{t(\"delete notification confirm msg\")}</p>\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nexport default NotificationRow;\n","import React, { useEffect } from \"react\";\nimport ReactLoading from \"react-loading\";\n\n// components\nimport MainContentContainer from \"../../components/main-content-container/main-content-container.component\";\nimport CenterContainer from \"../../components/center-container/center-container.component\";\nimport NotificationRow from \"../../components/notification-row/notification-row.component\";\nimport NoContent from \"../../components/no-content/no-content.component\";\nimport Button from \"../../components/button/button.component\";\n\n// redux stuff\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectToken } from \"../../redux/auth/authSlice\";\nimport {\n  changeOnlineMsg,\n  selectOnlineStatus,\n} from \"../../redux/online/onlineSlice\";\nimport { useTranslation } from \"react-i18next\";\nimport Header from \"../../components/header/header.component\";\nimport {\n  getAllNotifications,\n  getUnreadNotification,\n  resetNotificationsData,\n  selectUserNotifications,\n  setPage,\n  setRefresh,\n} from \"../../redux/userNotifications/userNotificationsSlice\";\n\n// constants\nimport { Colors } from \"../../utils/constants\";\n\nfunction UserNotificationPage({ onSelectedChange }) {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  const token = useSelector(selectToken);\n  const isOnline = useSelector(selectOnlineStatus);\n  const { status, page, count, userNotifications, refresh, forceRefresh } =\n    useSelector(selectUserNotifications);\n\n  const handleSearch = (page) => {\n    if (!isOnline) {\n      dispatch(changeOnlineMsg());\n      return;\n    }\n\n    if (page === 1) {\n      dispatch(resetNotificationsData());\n    }\n    dispatch(setPage(page));\n    dispatch(getAllNotifications({ token }));\n  };\n\n  const handleMoreResult = () => {\n    if (!isOnline) {\n      dispatch(changeOnlineMsg());\n      return;\n    }\n\n    handleSearch(page + 1);\n  };\n\n  const refreshHandler = () => {\n    dispatch(setRefresh(true));\n    dispatch(getUnreadNotification({ token }));\n  };\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n\n    onSelectedChange();\n\n    if (refresh || forceRefresh) {\n      handleSearch(1);\n    }\n  }, [refresh, forceRefresh]);\n\n  return (\n    <>\n      <Header title=\"notifications\" refreshHandler={refreshHandler} />\n\n      <MainContentContainer>\n        {userNotifications.map((note, index) => (\n          <NotificationRow key={note._id} notification={note} index={index} />\n        ))}\n\n        {userNotifications.length === 0 && status !== \"loading\" && (\n          <NoContent msg={t(\"no notifications\")} />\n        )}\n\n        {status === \"loading\" && (\n          <CenterContainer>\n            <ReactLoading color={Colors.LIGHT_COLOR} type=\"cylon\" />\n          </CenterContainer>\n        )}\n\n        {userNotifications.length < count && (\n          <Button\n            text={t(\"more\")}\n            action={handleMoreResult}\n            classStyle=\"bg_light\"\n          />\n        )}\n\n        {userNotifications.length === count &&\n          status !== \"loading\" &&\n          count !== 0 && (\n            <p className={[\"center\", \"fc_light\"].join(\" \")}>{t(\"no more\")}</p>\n          )}\n      </MainContentContainer>\n    </>\n  );\n}\n\nexport default UserNotificationPage;\n"],"names":["refreshHandler","title","count","history","useHistory","t","useTranslation","className","styles","selected","foreColor","Colors","tooltip","onclick","icon","goBack","children","notification","index","setSuccessDeletingMsg","dispatch","useDispatch","useSelector","selectUserData","token","user","useState","showDeleteModal","setShowDeleteModal","join","style","animationDuration","logo_url","src","SERVER_URL","alt","size","color","onClick","type","UserTypeConstants","users","includes","_id","setNotificationRead","notificationId","decreaseUnreadNotificationsCount","push","header","body","cancelLabel","okLabel","closeModal","small","okModal","deleteNotification","id","then","unwrapResult","onSelectedChange","selectToken","isOnline","selectOnlineStatus","selectUserNotifications","status","page","userNotifications","refresh","forceRefresh","handleSearch","resetNotificationsData","setPage","getAllNotifications","changeOnlineMsg","useEffect","window","scrollTo","setRefresh","getUnreadNotification","map","note","length","msg","text","action","classStyle"],"sourceRoot":""}