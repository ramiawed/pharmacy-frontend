{"version":3,"file":"static/js/723.09f182c2.chunk.js","mappings":"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","sources":["webpack://pharmacy-frontend/./src/components/partner-card/partner-card.module.scss?dc0e","components/partner-card/partner-card.component.jsx","components/companies-header/companies-header.component.jsx","pages/companies-page/companies-page.component.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"partner_container\":\"partner-card_partner_container__VB59l\",\"full_width\":\"partner-card_full_width__CUiS6\",\"partner_logo\":\"partner-card_partner_logo__zh12g\",\"partner_name\":\"partner-card_partner_name__jXB4j\",\"from_top\":\"partner-card_from_top__OssbS\",\"name\":\"partner-card_name__xgWNa\"};","import React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\n\n// components\nimport Button from \"../button/button.component\";\n\n// react icons\nimport { AiFillStar, AiOutlineStar } from \"react-icons/ai\";\nimport { VscLoading } from \"react-icons/vsc\";\n\n// redux-stuff\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  addFavorite,\n  selectFavoritesPartners,\n  removeFavorite,\n  selectFavoritesError,\n} from \"../../redux/favorites/favoritesSlice\";\nimport { selectUserData } from \"../../redux/auth/authSlice\";\nimport {\n  addStatistics,\n  statisticsCompanySelected,\n  statisticsUserFavorites,\n} from \"../../redux/statistics/statisticsSlice\";\nimport {\n  changeOnlineMsg,\n  selectOnlineStatus,\n} from \"../../redux/online/onlineSlice\";\nimport { selectSettings } from \"../../redux/settings/settingsSlice\";\nimport {\n  resetMedicines,\n  setSearchCompanyName,\n  setSearchWarehouseName,\n} from \"../../redux/medicines/medicinesSlices\";\n\n// styles\nimport generalStyles from \"../../style.module.scss\";\nimport styles from \"./partner-card.module.scss\";\n\n// constants and utils\nimport {\n  Colors,\n  SERVER_URL,\n  UserTypeConstants,\n} from \"../../utils/constants.js\";\n\nfunction PartnerCard({ partner, fullWidth }) {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  // selectors\n  const {\n    settings: { showWarehouseItem },\n  } = useSelector(selectSettings);\n  const isOnline = useSelector(selectOnlineStatus);\n  const favorites = useSelector(selectFavoritesPartners);\n  const favoritesError = useSelector(selectFavoritesError);\n  const { token, user } = useSelector(selectUserData);\n\n  // own state\n  // state to display a loader icon when partner dispatch addToFavorite or removeFromFavorite\n  const [changeFavoriteLoading, setChangeFavoriteLoading] = useState(false);\n\n  // determine if the partner can see the medicines in specific warehouse\n  const allowShowingWarehouseMedicines =\n    user.type === UserTypeConstants.ADMIN ||\n    partner.type === UserTypeConstants.COMPANY ||\n    (partner.type === UserTypeConstants.WAREHOUSE &&\n      showWarehouseItem &&\n      partner.allowShowingMedicines);\n\n  // method to handle add company to partner's favorite\n  const addPartnerToFavoriteHandler = () => {\n    // check the internet connection\n    if (!isOnline) {\n      dispatch(changeOnlineMsg());\n      return;\n    }\n\n    setChangeFavoriteLoading(true);\n\n    dispatch(addFavorite({ obj: { favoriteId: partner._id }, token }))\n      .then(unwrapResult)\n      .then(() => {\n        setChangeFavoriteLoading(false);\n        dispatch(\n          statisticsUserFavorites({ obj: { partnerId: partner._id }, token })\n        );\n        dispatch(\n          addStatistics({\n            obj: {\n              sourceUser: user._id,\n              targetUser: partner._id,\n              action: \"user-added-to-favorite\",\n            },\n            token,\n          })\n        );\n      })\n      .catch(() => {\n        setChangeFavoriteLoading(false);\n      });\n  };\n\n  // method to handle remove company from partner's favorite\n  const removePartnerFromFavoriteHandler = () => {\n    // check the internet connection\n    if (!isOnline) {\n      dispatch(changeOnlineMsg());\n      return;\n    }\n\n    setChangeFavoriteLoading(true);\n\n    dispatch(removeFavorite({ obj: { favoriteId: partner._id }, token }))\n      .then(unwrapResult)\n      .then(() => {\n        changeFavoriteLoading(false);\n      })\n      .catch(() => setChangeFavoriteLoading(false));\n  };\n\n  const partnerCardClickHandler = () => {\n    if (\n      partner.type === UserTypeConstants.WAREHOUSE &&\n      user.type === UserTypeConstants.WAREHOUSE\n    ) {\n      return;\n    }\n\n    if (allowShowingWarehouseMedicines) {\n      // if the partner type is pharmacy or normal, change the selectedCount\n      // and selectedDates for this company\n      if (\n        user.type === UserTypeConstants.PHARMACY ||\n        user.type === UserTypeConstants.GUEST\n      ) {\n        dispatch(\n          statisticsCompanySelected({\n            obj: { companyId: partner._id },\n            token,\n          })\n        );\n        dispatch(\n          addStatistics({\n            obj: {\n              sourceUser: user._id,\n              targetUser: partner._id,\n              action: \"choose-company\",\n            },\n            token,\n          })\n        );\n      }\n      dispatch(resetMedicines());\n\n      if (partner.type === UserTypeConstants.COMPANY) {\n        dispatch(setSearchCompanyName(partner.name));\n      }\n\n      if (partner.type === UserTypeConstants.WAREHOUSE) {\n        dispatch(setSearchWarehouseName(partner.name));\n      }\n      history.push(\"/medicines\");\n    }\n  };\n\n  return (\n    <div\n      className={[\n        styles.partner_container,\n        fullWidth ? styles.full_width : \"\",\n      ].join(\" \")}\n    >\n      <p className={styles.partner_name}>{partner.name}</p>\n\n      {partner.logo_url?.length > 0 ? (\n        <img\n          src={`${SERVER_URL}/${partner.logo_url}`}\n          className={styles.partner_logo}\n          alt=\"thumb\"\n        />\n      ) : (\n        <img\n          src={`${SERVER_URL}/default-logo.jpg`}\n          className={styles.partner_logo}\n          alt=\"thumb\"\n        />\n      )}\n\n      <div className={styles.from_top}>\n        {favoritesError === \"\" ? (\n          changeFavoriteLoading ? (\n            <div\n              className={[generalStyles.icon, generalStyles.fc_yellow].join(\n                \" \"\n              )}\n            >\n              <VscLoading className={generalStyles.loading} size={20} />\n            </div>\n          ) : (\n            <div\n              className={[generalStyles.icon, generalStyles.fc_yellow].join(\n                \" \"\n              )}\n            >\n              {favorites &&\n              favorites\n                .map((favorite) => favorite._id)\n                .includes(partner._id) ? (\n                <AiFillStar\n                  size={24}\n                  onClick={removePartnerFromFavoriteHandler}\n                />\n              ) : (\n                <AiOutlineStar\n                  size={24}\n                  onClick={addPartnerToFavoriteHandler}\n                />\n              )}\n            </div>\n          )\n        ) : null}\n\n        {(partner.type === UserTypeConstants.COMPANY ||\n          (partner.type === UserTypeConstants.WAREHOUSE &&\n            user.type !== UserTypeConstants.WAREHOUSE)) && (\n          <div>\n            <Button\n              action={partnerCardClickHandler}\n              text={t(\"medicines\")}\n              bgColor={Colors.FAILED_COLOR}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default PartnerCard;\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\n// redux stuff\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  changeDisplayType,\n  changeSearchCity,\n  changeSearchName,\n  changeShowFavorites,\n  resetCompaniesPageState,\n  selectCompaniesPageState,\n} from \"../../redux/company/companySlice\";\nimport { selectFavoritesPartners } from \"../../redux/favorites/favoritesSlice\";\n\n// components\nimport Header from \"../header/header.component\";\nimport SearchContainer from \"../search-container/search-container.component\";\nimport SearchInput from \"../search-input/search-input.component\";\nimport Icon from \"../action-icon/action-icon.component\";\nimport PartnerRow from \"../partner-row/partner-row.component\";\n\n// react icons\nimport { RiRefreshLine } from \"react-icons/ri\";\nimport { AiFillAppstore, AiFillStar } from \"react-icons/ai\";\nimport { FaListUl } from \"react-icons/fa\";\nimport { VscClearAll } from \"react-icons/vsc\";\n\n// styles\nimport generalStyles from \"../../style.module.scss\";\n\n// constants and utils\nimport { CitiesName, Colors, UserTypeConstants } from \"../../utils/constants\";\nimport SelectCustom from \"../select/select.component\";\n\nfunction CompaniesHeader({ search, refreshHandler, count }) {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  const { searchName, searchCity, displayType, showFavorites } = useSelector(\n    selectCompaniesPageState\n  );\n  const favorites = useSelector(selectFavoritesPartners);\n\n  // guest options and its change handler\n  const citiesOptions = [\n    { value: CitiesName.ALL, label: t(\"all-cities\") },\n    { value: CitiesName.ALEPPO, label: t(\"aleppo\") },\n    { value: CitiesName.DAMASCUS, label: t(\"damascus\") },\n    { value: CitiesName.DARAA, label: t(\"daraa\") },\n    { value: CitiesName.DEIR_EZ_ZOR, label: t(\"deir_ez_zor\") },\n    { value: CitiesName.HAMA, label: t(\"hama\") },\n    { value: CitiesName.AL_HASAKAH, label: t(\"al_hasakah\") },\n    { value: CitiesName.HOMS, label: t(\"homs\") },\n    { value: CitiesName.IDLIB, label: t(\"idlib\") },\n    { value: CitiesName.LATAKIA, label: t(\"latakia\") },\n    { value: CitiesName.QUNEITRA, label: t(\"quneitra\") },\n    { value: CitiesName.RAQQA, label: t(\"raqqa\") },\n    { value: CitiesName.AL_SUWAYDA, label: t(\"al_suwayda\") },\n    { value: CitiesName.TARTUS, label: t(\"tartus\") },\n    {\n      value: CitiesName.DAMASCUS_COUNTRYSIDE,\n      label: t(\"damascus_countryside\"),\n    },\n  ];\n  // Guest types are (Student, Pharmacist, Employee)\n  // uses with the SelectCustom\n  const citiesNameChangeHandler = (val) => {\n    // if the user type is Normal and the job is Student or Pharmacist\n    // so the user doesn't contains info about company name and job title\n    dispatch(changeSearchCity(val));\n  };\n\n  return (\n    <>\n      <Header>\n        <h2>\n          {t(\"companies\")} <span>{count}</span>\n        </h2>\n\n        <div style={{ position: \"relative\", height: \"50px\" }}>\n          <SearchContainer searchAction={search}>\n            <SearchInput\n              label=\"user-name\"\n              id=\"search-name\"\n              type=\"text\"\n              value={searchName}\n              onchange={(e) => {\n                dispatch(changeSearchName(e.target.value));\n              }}\n              placeholder=\"search\"\n              onEnterPress={search}\n              resetField={() => dispatch(changeSearchName(\"\"))}\n            />\n\n            <SelectCustom\n              bgColor={Colors.SECONDARY_COLOR}\n              foreColor=\"#fff\"\n              options={citiesOptions}\n              onchange={citiesNameChangeHandler}\n              defaultOption={{\n                value: searchCity,\n                label: t(searchCity.toLowerCase()),\n              }}\n              caption=\"user-city\"\n            />\n          </SearchContainer>\n        </div>\n      </Header>\n      <div\n        className={[generalStyles.actions, generalStyles.margin_v_4].join(\" \")}\n      >\n        {/* refresh */}\n        <Icon\n          withBackground={true}\n          selected={false}\n          foreColor={Colors.SECONDARY_COLOR}\n          tooltip={t(\"refresh-tooltip\")}\n          onclick={() => {\n            refreshHandler();\n            dispatch(changeShowFavorites(false));\n          }}\n          icon={() => <RiRefreshLine />}\n        />\n\n        {(searchName.length > 0 || searchCity !== CitiesName.ALL) && (\n          <Icon\n            withBackground={true}\n            selected={false}\n            foreColor={Colors.SECONDARY_COLOR}\n            tooltip={t(\"clear-filter-tooltip\")}\n            onclick={() => {\n              dispatch(resetCompaniesPageState());\n              refreshHandler();\n              dispatch(changeShowFavorites(false));\n            }}\n            icon={() => <VscClearAll />}\n          />\n        )}\n\n        {/* show favorites */}\n        <div className={generalStyles.relative}>\n          <Icon\n            withBackground={true}\n            foreColor={\n              showFavorites ? Colors.SUCCEEDED_COLOR : Colors.SECONDARY_COLOR\n            }\n            tooltip={t(\"show-favorite-tooltip\")}\n            onclick={() => dispatch(changeShowFavorites(!showFavorites))}\n            icon={() => <AiFillStar />}\n          />\n\n          {showFavorites && (\n            <div\n              className={[\n                generalStyles.favorites_content,\n                generalStyles.bg_white,\n              ].join(\" \")}\n            >\n              {showFavorites &&\n                favorites &&\n                favorites\n                  .filter(\n                    (favorite) => favorite.type === UserTypeConstants.COMPANY\n                  )\n                  .map((favorite) => (\n                    <PartnerRow\n                      key={favorite._id}\n                      partner={favorite}\n                      withoutBoxShadow={true}\n                    />\n                  ))}\n            </div>\n          )}\n        </div>\n\n        {/* display card option */}\n        <Icon\n          withBackground={true}\n          foreColor={\n            displayType === \"card\"\n              ? Colors.SUCCEEDED_COLOR\n              : Colors.SECONDARY_COLOR\n          }\n          tooltip={t(\"show-item-as-card-tooltip\")}\n          onclick={() => {\n            dispatch(changeDisplayType(\"card\"));\n            dispatch(changeShowFavorites(false));\n          }}\n          icon={() => <AiFillAppstore />}\n        />\n\n        {/* display list option */}\n        <Icon\n          withBackground={true}\n          foreColor={\n            displayType === \"list\"\n              ? Colors.SUCCEEDED_COLOR\n              : Colors.SECONDARY_COLOR\n          }\n          tooltip={t(\"show-item-as-row-tooltip\")}\n          onclick={() => {\n            dispatch(changeDisplayType(\"list\"));\n            dispatch(changeShowFavorites(false));\n          }}\n          icon={() => <FaListUl />}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default CompaniesHeader;\n","// THIS COMPONENT PAGE CAN BE DISPLAYED BY ALL THE USERS\n\n// this component display\n// 1- header\n// 2- actions(refresh, favorites companies, list display, card display, search)\n// 3- if the companies is empty or doesn't match the search engines display an empty icon\n// 4- if the companies is not empty display the companies as list or card.\n\n// this component depends on the companySlice\n\nimport React, { useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Redirect } from \"react-router\";\nimport ReactLoading from \"react-loading\";\n\n// components\nimport PartnerRow from \"../../components/partner-row/partner-row.component\";\nimport PartnerCard from \"../../components/partner-card/partner-card.component\";\nimport Button from \"../../components/button/button.component\";\nimport Toast from \"../../components/toast/toast.component\";\nimport NoContent from \"../../components/no-content/no-content.component\";\nimport CompaniesHeader from \"../../components/companies-header/companies-header.component\";\n\n// redux stuff\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectUserData } from \"../../redux/auth/authSlice\";\nimport {\n  cancelOperation,\n  changePage,\n  changeShowFavorites,\n  getCompanies,\n  resetCompanies,\n  resetStatus,\n  selectCompanies,\n  selectCompaniesPageState,\n} from \"../../redux/company/companySlice\";\nimport {\n  getFavorites,\n  resetFavorites,\n} from \"../../redux/favorites/favoritesSlice\";\nimport {\n  changeOnlineMsg,\n  selectOnlineStatus,\n} from \"../../redux/online/onlineSlice\";\n\n// styles\nimport generalStyles from \"../../style.module.scss\";\n\n// constants and utils\nimport { Colors } from \"../../utils/constants\";\n\nfunction CompaniesPage({ onSelectedChange }) {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  // selectors\n  // select from redux store\n  // select logged user and it's token from authSlice\n  const { token, user } = useSelector(selectUserData);\n  // select companies from companySlice\n  const { companies, count, status, error } = useSelector(selectCompanies);\n  const { displayType, page } = useSelector(selectCompaniesPageState);\n  const isOnline = useSelector(selectOnlineStatus);\n\n  // search handler\n  // /users?type=company&page=page&limit=9\n  // this method take 2 params\n  // 1- page: determine which page you want to get its rows from DB\n  // 2- reset: boolean param, determine if you have to reset the page to 1 or not.\n  //\n  // build the query string that contains the required info like page and limit\n  // if any of the search state (searchName, searchCity) is not empty, add it to query string\n  // get the companies from DB\n  // depends on the reset field, add one to page, or reset to 1\n  const handleSearch = (page) => {\n    dispatch(changeShowFavorites(false));\n\n    dispatch(getCompanies({ token }))\n      .then(unwrapResult)\n      .then(() => {\n        dispatch(changePage(page + 1));\n      });\n  };\n\n  // get the next 9 companies from DB\n  // and add one to page\n  const handleMoreResult = () => {\n    if (!isOnline) {\n      dispatch(changeOnlineMsg());\n      return;\n    }\n\n    handleSearch(page);\n  };\n\n  // when press enter in search input field\n  // 1- reset the companies in the companySlice redux\n  // 2- search based on the new search engines\n  // 3- reset the page to 1\n  const handleEnterPress = () => {\n    dispatch(resetCompanies());\n    dispatch(changePage(1));\n    handleSearch(1);\n  };\n\n  const refreshHandler = () => {\n    dispatch(resetFavorites());\n    dispatch(getFavorites({ token }));\n    dispatch(resetCompanies());\n    dispatch(changePage(1));\n    handleSearch(1);\n  };\n\n  useEffect(() => {\n    if (companies.length === 0) handleSearch(1);\n\n    window.scrollTo(0, 0);\n\n    onSelectedChange();\n\n    return () => {\n      cancelOperation();\n    };\n  }, []);\n\n  return user ? (\n    <div className={generalStyles.container}>\n      <CompaniesHeader\n        search={handleEnterPress}\n        refreshHandler={refreshHandler}\n        count={count}\n      />\n\n      {/* display partner as list */}\n      {displayType === \"list\" &&\n        companies.map((company) => (\n          <PartnerRow key={company._id} partner={company} />\n        ))}\n\n      {/* display partner as a card */}\n      {displayType === \"card\" && (\n        <div\n          className={[\n            generalStyles.flex_container,\n            generalStyles.margin_top_10,\n          ].join(\" \")}\n        >\n          {companies.map((company) => (\n            <PartnerCard key={company._id} partner={company} />\n          ))}\n        </div>\n      )}\n\n      {companies.length === 0 && status !== \"loading\" && (\n        <NoContent msg={t(\"no-companies\")} />\n      )}\n\n      {status === \"loading\" && (\n        <div className={generalStyles.flex_container}>\n          <ReactLoading color={Colors.SECONDARY_COLOR} type=\"cylon\" />\n        </div>\n      )}\n\n      {companies.length < count && (\n        <Button\n          text={t(\"more\")}\n          action={handleMoreResult}\n          bgColor={Colors.SECONDARY_COLOR}\n        />\n      )}\n\n      {companies.length === count && status !== \"loading\" && count !== 0 && (\n        <p\n          className={[generalStyles.center, generalStyles.fc_secondary].join(\n            \" \"\n          )}\n        >\n          {t(\"no-more\")}\n        </p>\n      )}\n\n      {/* show loading animation when data is loading */}\n      {/* {status === \"loading\" && <Loader allowCancel={false} />} */}\n\n      {error && (\n        <Toast\n          bgColor={Colors.FAILED_COLOR}\n          foreColor=\"#fff\"\n          actionAfterTimeout={() => {\n            dispatch(resetStatus());\n          }}\n        >\n          {t(error)}\n        </Toast>\n      )}\n    </div>\n  ) : (\n    <Redirect to=\"/signin\" />\n  );\n}\n\nexport default CompaniesPage;\n"],"names":["partner","fullWidth","t","useTranslation","history","useHistory","dispatch","useDispatch","showWarehouseItem","useSelector","selectSettings","settings","isOnline","selectOnlineStatus","favorites","selectFavoritesPartners","favoritesError","selectFavoritesError","selectUserData","token","user","useState","changeFavoriteLoading","setChangeFavoriteLoading","allowShowingWarehouseMedicines","type","UserTypeConstants","allowShowingMedicines","className","styles","join","name","logo_url","length","src","SERVER_URL","alt","generalStyles","size","map","favorite","_id","includes","onClick","removeFavorite","obj","favoriteId","then","unwrapResult","catch","changeOnlineMsg","addFavorite","statisticsUserFavorites","partnerId","addStatistics","sourceUser","targetUser","action","statisticsCompanySelected","companyId","resetMedicines","setSearchCompanyName","setSearchWarehouseName","push","text","bgColor","Colors","search","refreshHandler","count","selectCompaniesPageState","searchName","searchCity","displayType","showFavorites","citiesOptions","value","CitiesName","label","style","position","height","searchAction","id","onchange","e","changeSearchName","target","placeholder","onEnterPress","resetField","foreColor","options","val","changeSearchCity","defaultOption","toLowerCase","caption","withBackground","selected","tooltip","onclick","changeShowFavorites","icon","resetCompaniesPageState","filter","withoutBoxShadow","changeDisplayType","onSelectedChange","selectCompanies","companies","status","error","page","handleSearch","getCompanies","changePage","useEffect","window","scrollTo","cancelOperation","resetCompanies","resetFavorites","getFavorites","company","msg","color","actionAfterTimeout","resetStatus","to"],"sourceRoot":""}