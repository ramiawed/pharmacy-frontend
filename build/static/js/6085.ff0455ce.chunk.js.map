{"version":3,"file":"static/js/6085.ff0455ce.chunk.js","mappings":"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","sources":["webpack://pharmacy-frontend/./src/components/partner-card/partner-card.module.scss?dc0e","components/partner-card/partner-card.component.jsx","components/search-container/search-container.component.jsx","webpack://pharmacy-frontend/./src/components/search-input/search-input.module.scss?50a3","components/search-input/search-input.component.jsx","webpack://pharmacy-frontend/./src/components/companies-header/companies-header.module.scss?ec8f","components/companies-header/companies-header.component.jsx","pages/companies-page/companies-page.component.jsx","webpack://pharmacy-frontend/./src/components/search-container/search-container.module.scss?b7db"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"small_font\":\"partner-card_small_font__B6atq\",\"partner_container\":\"partner-card_partner_container__VB59l\",\"full_width\":\"partner-card_full_width__CUiS6\",\"partner_logo\":\"partner-card_partner_logo__zh12g\",\"partner_name\":\"partner-card_partner_name__jXB4j\",\"from_top\":\"partner-card_from_top__OssbS\",\"name\":\"partner-card_name__xgWNa\"};","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport Logo from \"../../logo.png\";\n\n// components\nimport Button from \"../button/button.component\";\nimport ButtonWithIcon from \"../button-with-icon/button-with-icon.component\";\n\n// react icons\nimport { AiFillStar, AiOutlineStar } from \"react-icons/ai\";\nimport { FaHandshake, FaHandshakeSlash } from \"react-icons/fa\";\n\n// redux-stuff\nimport { useSelector } from \"react-redux\";\nimport {\n  selectFavoritesPartners,\n  selectFavoritesError,\n} from \"../../redux/favorites/favoritesSlice\";\nimport { selectUserData } from \"../../redux/auth/authSlice\";\n\nimport { selectSettings } from \"../../redux/settings/settingsSlice\";\n\n// styles\nimport generalStyles from \"../../style.module.scss\";\nimport styles from \"./partner-card.module.scss\";\n\n// constants and utils\nimport {\n  Colors,\n  SERVER_URL,\n  UserTypeConstants,\n} from \"../../utils/constants.js\";\n\nfunction PartnerCard({\n  partner,\n  fullWidth,\n  addPartnerToFavoriteHandler,\n  addCompanyToOurCompaniesHandler,\n  removePartnerFromFavoriteHandler,\n  removeCompanyFromOurCompaniesHandler,\n  partnerRowClickHandler,\n}) {\n  const { t } = useTranslation();\n\n  // selectors\n  const {\n    settings: { showWarehouseItem },\n  } = useSelector(selectSettings);\n  const favorites = useSelector(selectFavoritesPartners);\n  const favoritesError = useSelector(selectFavoritesError);\n  const { user } = useSelector(selectUserData);\n\n  // determine if the partner can see the medicines in specific warehouse\n  const allowShowingWarehouseMedicines =\n    user.type === UserTypeConstants.ADMIN ||\n    partner.type === UserTypeConstants.COMPANY ||\n    (partner.type === UserTypeConstants.WAREHOUSE &&\n      showWarehouseItem &&\n      partner.allowShowingMedicines);\n\n  return (\n    <div\n      className={[\n        styles.partner_container,\n        fullWidth ? styles.full_width : \"\",\n      ].join(\" \")}\n    >\n      <p className={styles.partner_name}>{partner.name}</p>\n\n      {partner.logo_url?.length > 0 ? (\n        <img\n          src={`${SERVER_URL}/profiles/${partner.logo_url}`}\n          className={styles.partner_logo}\n          alt=\"thumb\"\n        />\n      ) : (\n        <img src={Logo} className={styles.partner_logo} alt=\"thumb\" />\n      )}\n\n      <div className={styles.from_top}>\n        {favoritesError === \"\" ? (\n          <div\n            className={[generalStyles.icon, generalStyles.fc_yellow].join(\" \")}\n          >\n            {favorites &&\n            favorites.map((favorite) => favorite._id).includes(partner._id) ? (\n              <AiFillStar\n                size={24}\n                onClick={removePartnerFromFavoriteHandler}\n              />\n            ) : (\n              <AiOutlineStar size={24} onClick={addPartnerToFavoriteHandler} />\n            )}\n          </div>\n        ) : null}\n\n        {user.type === UserTypeConstants.WAREHOUSE &&\n        partner.type === UserTypeConstants.COMPANY ? (\n          <div>\n            {user.ourCompanies.includes(partner._id) ? (\n              <ButtonWithIcon\n                text={t(\"remove-company-from-warehouse-tooltip\")}\n                action={removeCompanyFromOurCompaniesHandler}\n                bgColor={Colors.FAILED_COLOR}\n                icon={() => <FaHandshakeSlash size={24} />}\n              />\n            ) : (\n              <ButtonWithIcon\n                text={t(\"add-company-to-warehouse-tooltip\")}\n                action={addCompanyToOurCompaniesHandler}\n                bgColor={Colors.SUCCEEDED_COLOR}\n                icon={() => <FaHandshake size={24} />}\n              />\n            )}\n          </div>\n        ) : (\n          <></>\n        )}\n\n        {(partner.type === UserTypeConstants.COMPANY ||\n          (partner.type === UserTypeConstants.WAREHOUSE &&\n            user.type !== UserTypeConstants.WAREHOUSE)) && (\n          <div>\n            <Button\n              action={() =>\n                partnerRowClickHandler(allowShowingWarehouseMedicines)\n              }\n              text={t(\"medicines\")}\n              bgColor={Colors.FAILED_COLOR}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default PartnerCard;\n","import React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\n// react-icons\nimport { FaFilter } from \"react-icons/fa\";\n\n// styles\nimport styles from \"./search-container.module.scss\";\nimport generalStyles from \"../../style.module.scss\";\nimport Icon from \"../action-icon/action-icon.component\";\n\nfunction SearchContainer({ children, searchAction }) {\n  const { t } = useTranslation();\n\n  let childrenArray = React.Children.toArray(children);\n  const [moreSearchOptions, setMoreSearchOptions] = useState(false);\n\n  return (\n    <div\n      className={[\n        styles.search_container,\n        styles.expanded,\n        moreSearchOptions ? styles.expanded_with_options : \"\",\n      ].join(\" \")}\n    >\n      <div className={styles.expanded_div}>\n        {true && (\n          <>\n            <div style={{ flex: 1 }}>\n              {childrenArray[0]}\n              {moreSearchOptions && childrenArray.length > 1\n                ? childrenArray.map((child, index) => {\n                    if (index > 0) return child;\n                    return null;\n                  })\n                : null}\n\n              {moreSearchOptions && (\n                <button\n                  onClick={() => {\n                    searchAction();\n                    setMoreSearchOptions(false);\n                  }}\n                  style={{\n                    marginBlockStart: \"4px\",\n                    marginInline: \"auto\",\n                    marginLeft: \"auto\",\n                    marginRight: \"auto\",\n                    width: \"50%\",\n                  }}\n                  className={[\n                    generalStyles.button,\n                    generalStyles.bg_main,\n                    generalStyles.fc_white,\n                    generalStyles.block,\n                    generalStyles.padding_v_6,\n                    generalStyles.padding_h_8,\n                  ].join(\" \")}\n                >\n                  {t(\"search\")}\n                </button>\n              )}\n            </div>\n\n            {childrenArray.length > 1 && (\n              <div\n                style={{\n                  marginInline: \"4px\",\n                  marginLeft: \"4px\",\n                  marginRight: \"4px\",\n                }}\n              >\n                <Icon\n                  onclick={() => setMoreSearchOptions(!moreSearchOptions)}\n                  icon={() => <FaFilter />}\n                />\n              </div>\n            )}\n\n            {childrenArray.length === 1 && (\n              <div\n                className={[generalStyles.icon, generalStyles.margin_h_4].join(\n                  \" \"\n                )}\n                onClick={() => {\n                  searchAction();\n                  setMoreSearchOptions(false);\n                }}\n              >\n                <button\n                  className={[\n                    generalStyles.button,\n                    generalStyles.bg_secondary,\n                    generalStyles.fc_white,\n                    generalStyles.block,\n                    generalStyles.padding_v_6,\n                    generalStyles.padding_h_8,\n                  ].join(\" \")}\n                >\n                  {t(\"search\")}\n                </button>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default SearchContainer;\n","// extracted by mini-css-extract-plugin\nexport default {\"small_font\":\"search-input_small_font__t8rxR\",\"input_div\":\"search-input_input_div__4KoDe\",\"icon_close\":\"search-input_icon_close__TC1nF\"};","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { AiFillCloseCircle } from \"react-icons/ai\";\n\nimport styles from \"./search-input.module.scss\";\n\nfunction SearchInput({\n  type,\n  label,\n  id,\n  value,\n  onchange,\n  placeholder,\n  onEnterPress,\n  resetField,\n  onkeyup,\n}) {\n  const { t } = useTranslation();\n\n  const handleKeyPress = (event) => {\n    if (event.key === \"Enter\") {\n      if (onEnterPress) {\n        onEnterPress();\n      }\n    }\n  };\n\n  return (\n    <div className={styles.input_div}>\n      {label && <label htmlFor={id}>{t(label)}</label>}\n\n      <input\n        placeholder={placeholder ? t(`${placeholder}`) : \"\"}\n        id={id}\n        type={type}\n        value={value}\n        onChange={onchange}\n        onKeyPress={handleKeyPress}\n        onKeyUp={onkeyup && onkeyup}\n      />\n      {resetField && value && (\n        <AiFillCloseCircle\n          onClick={() => resetField(id)}\n          className={styles.icon_close}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default SearchInput;\n","// extracted by mini-css-extract-plugin\nexport default {\"small_font\":\"companies-header_small_font__OnD0m\",\"selectDiv\":\"companies-header_selectDiv__2gPMJ\"};","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\n\n// redux stuff\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  changeDisplayType,\n  changeSearchCity,\n  changeSearchName,\n  resetCompaniesPageState,\n  selectCompaniesPageState,\n} from \"../../redux/company/companySlice\";\n\n// components\nimport SearchContainer from \"../search-container/search-container.component\";\nimport SearchInput from \"../search-input/search-input.component\";\nimport Icon from \"../action-icon/action-icon.component\";\nimport CitiesDropDown from \"../cities-dropdown/cities-dropdown.component\";\n\n// react icons\nimport { RiRefreshLine } from \"react-icons/ri\";\nimport { AiFillAppstore } from \"react-icons/ai\";\nimport { FaListUl } from \"react-icons/fa\";\nimport { VscClearAll } from \"react-icons/vsc\";\nimport { IoMdArrowRoundBack } from \"react-icons/io\";\n\n// styles\nimport generalStyles from \"../../style.module.scss\";\nimport styles from \"./companies-header.module.scss\";\n// constants and utils\nimport { CitiesName, Colors } from \"../../utils/constants\";\n\nfunction CompaniesHeader({ search, refreshHandler, count, keyUpHandler }) {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const { searchName, searchCity, displayType } = useSelector(\n    selectCompaniesPageState\n  );\n\n  // Guest types are (Student, Pharmacist, Employee)\n  // uses with the SelectCustom\n  const citiesNameChangeHandler = (val) => {\n    // if the user type is Normal and the job is Student or Pharmacist\n    // so the user doesn't contains info about company name and job title\n    dispatch(changeSearchCity(val));\n  };\n\n  return (\n    <>\n      <SearchContainer searchAction={search}>\n        <SearchInput\n          label=\"user-name\"\n          id=\"search-name\"\n          type=\"text\"\n          value={searchName}\n          onchange={(e) => {\n            dispatch(changeSearchName(e.target.value));\n          }}\n          placeholder=\"search-by-company-name\"\n          onEnterPress={search}\n          resetField={() => dispatch(changeSearchName(\"\"))}\n          onkeyup={keyUpHandler}\n        />\n\n        <div className={styles.selectDiv}>\n          <label>{t(\"user-city\")}</label>\n          <CitiesDropDown\n            onSelectionChange={citiesNameChangeHandler}\n            defaultValue={{\n              value: searchCity,\n              label: t(searchCity.toLowerCase()),\n            }}\n          />\n        </div>\n      </SearchContainer>\n      <div\n        className={[generalStyles.actions, generalStyles.margin_v_4].join(\" \")}\n      >\n        {/* refresh */}\n        <Icon\n          withBackground={true}\n          selected={false}\n          foreColor={Colors.MAIN_COLOR}\n          tooltip={t(\"refresh-tooltip\")}\n          onclick={() => {\n            refreshHandler();\n          }}\n          icon={() => <RiRefreshLine />}\n        />\n\n        {(searchName.length > 0 || searchCity !== CitiesName.ALL) && (\n          <Icon\n            withBackground={true}\n            selected={false}\n            foreColor={Colors.MAIN_COLOR}\n            tooltip={t(\"clear-filter-tooltip\")}\n            onclick={() => {\n              dispatch(resetCompaniesPageState());\n              refreshHandler();\n            }}\n            icon={() => <VscClearAll />}\n          />\n        )}\n\n        {/* display card option */}\n        <Icon\n          withBackground={true}\n          foreColor={\n            displayType === \"card\" ? Colors.SUCCEEDED_COLOR : Colors.MAIN_COLOR\n          }\n          tooltip={t(\"show-item-as-card-tooltip\")}\n          onclick={() => {\n            dispatch(changeDisplayType(\"card\"));\n          }}\n          icon={() => <AiFillAppstore />}\n        />\n\n        {/* display list option */}\n        <Icon\n          withBackground={true}\n          foreColor={\n            displayType === \"list\" ? Colors.SUCCEEDED_COLOR : Colors.MAIN_COLOR\n          }\n          tooltip={t(\"show-item-as-row-tooltip\")}\n          onclick={() => {\n            dispatch(changeDisplayType(\"list\"));\n          }}\n          icon={() => <FaListUl />}\n        />\n\n        <Icon\n          withBackground={true}\n          tooltip={t(\"go-back\")}\n          onclick={() => {\n            history.goBack();\n          }}\n          icon={() => <IoMdArrowRoundBack />}\n          foreColor={Colors.MAIN_COLOR}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default CompaniesHeader;\n","// THIS COMPONENT PAGE CAN BE DISPLAYED BY ALL THE USERS\n\n// this component display\n// 1- header\n// 2- actions(refresh, favorites companies, list display, card display, search)\n// 3- if the companies is empty or doesn't match the search engines display an empty icon\n// 4- if the companies is not empty display the companies as list or card.\n\n// this component depends on the companySlice\n\nimport React, { useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Redirect } from \"react-router\";\nimport ReactLoading from \"react-loading\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { CgMoreVertical } from \"react-icons/cg\";\n\n// components\nimport PartnerRow from \"../../components/partner-row/partner-row.component\";\nimport PartnerCard from \"../../components/partner-card/partner-card.component\";\nimport NoContent from \"../../components/no-content/no-content.component\";\nimport CompaniesHeader from \"../../components/companies-header/companies-header.component\";\nimport ButtonWithIcon from \"../../components/button-with-icon/button-with-icon.component\";\n\n// redux stuff\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectUserData } from \"../../redux/auth/authSlice\";\nimport {\n  cancelOperation,\n  getCompanies,\n  resetCompanies,\n  selectCompanies,\n  selectCompaniesPageState,\n  resetCompaniesArray,\n} from \"../../redux/company/companySlice\";\nimport {\n  getFavorites,\n  resetFavorites,\n} from \"../../redux/favorites/favoritesSlice\";\nimport {\n  changeOnlineMsg,\n  selectOnlineStatus,\n} from \"../../redux/online/onlineSlice\";\n\n// styles\nimport generalStyles from \"../../style.module.scss\";\n\n// constants and utils\nimport { CitiesName, Colors } from \"../../utils/constants\";\n\n// handlers\nimport {\n  addCompanyToOurCompaniesHandler,\n  addPartnerToFavoriteHandler,\n  partnerRowClickHandler,\n  removeCompanyFromOurCompaniesHandler,\n  removePartnerFromFavoriteHandler,\n} from \"../../utils/handlers\";\n\nlet timer;\n\nfunction CompaniesPage({ onSelectedChange }) {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  // selectors\n  // select from redux store\n  // select logged user and it's token from authSlice\n  const { token, user } = useSelector(selectUserData);\n  // select companies from companySlice\n  const { companies, count, status } = useSelector(selectCompanies);\n  const { searchName, searchCity } = useSelector(selectCompaniesPageState);\n  const { displayType } = useSelector(selectCompaniesPageState);\n  const isOnline = useSelector(selectOnlineStatus);\n\n  // search handler\n  // /users?type=company&page=page&limit=15\n  // this method take 2 params\n  // 1- page: determine which page you want to get its rows from DB\n  // 2- reset: boolean param, determine if you have to reset the page to 1 or not.\n  //\n  // build the query string that contains the required info like page and limit\n  // if any of the search state (searchName, searchCity) is not empty, add it to query string\n  // get the companies from DB\n  // depends on the reset field, add one to page, or reset to 1\n  const handleSearch = () => {\n    dispatch(getCompanies({ token }));\n  };\n\n  // get the next 15 companies from DB\n  // and add one to page\n  const handleMoreResult = () => {\n    if (!isOnline) {\n      dispatch(changeOnlineMsg());\n      return;\n    }\n\n    handleSearch();\n  };\n\n  // when press enter in search input field\n  // 1- reset the companies in the companySlice redux\n  // 2- search based on the new search engines\n  // 3- reset the page to 1\n  const handleEnterPress = () => {\n    dispatch(resetCompaniesArray());\n    handleSearch();\n  };\n\n  const refreshHandler = () => {\n    dispatch(resetFavorites());\n    dispatch(getFavorites({ token }));\n    dispatch(resetCompanies());\n    handleSearch();\n  };\n\n  const keyUpHandler = (event) => {\n    if (event.keyCode === 13) return;\n    cancelOperation();\n\n    if (timer) {\n      clearTimeout(timer);\n    }\n\n    timer = setTimeout(() => {\n      handleEnterPress();\n    }, 200);\n  };\n\n  useEffect(() => {\n    if (companies.length === 0) handleSearch(1);\n\n    window.scrollTo(0, 0);\n\n    onSelectedChange();\n\n    return () => {\n      cancelOperation();\n    };\n  }, []);\n\n  return user ? (\n    <div className={generalStyles.container}>\n      <CompaniesHeader\n        search={handleEnterPress}\n        refreshHandler={refreshHandler}\n        count={count}\n        keyUpHandler={keyUpHandler}\n      />\n\n      {count > 0 && (\n        <div className={generalStyles.count}>\n          <span className={generalStyles.label}>{t(\"companies-count\")}</span>\n          <span className={generalStyles.count}>{count}</span>\n        </div>\n      )}\n\n      {/* display partner as list */}\n      {displayType === \"list\" &&\n        companies.map((company) => (\n          <PartnerRow\n            key={company._id}\n            partner={company}\n            addPartnerToFavoriteHandler={() =>\n              addPartnerToFavoriteHandler(\n                company,\n                isOnline,\n                dispatch,\n                token,\n                user\n              )\n            }\n            addCompanyToOurCompaniesHandler={() =>\n              addCompanyToOurCompaniesHandler(\n                company,\n                isOnline,\n                dispatch,\n                token\n              )\n            }\n            removeCompanyFromOurCompaniesHandler={() => {\n              removeCompanyFromOurCompaniesHandler(\n                company,\n                isOnline,\n                dispatch,\n                token\n              );\n            }}\n            removePartnerFromFavoriteHandler={() => {\n              removePartnerFromFavoriteHandler(\n                company,\n                isOnline,\n                dispatch,\n                token\n              );\n            }}\n            partnerRowClickHandler={(allowShowingWarehouseMedicines) =>\n              partnerRowClickHandler(\n                company,\n                allowShowingWarehouseMedicines,\n                user,\n                dispatch,\n                token,\n                history\n              )\n            }\n          />\n        ))}\n\n      {/* display partner as a card */}\n      {displayType === \"card\" && (\n        <div\n          className={[\n            generalStyles.flex_container,\n            generalStyles.margin_top_10,\n          ].join(\" \")}\n        >\n          {companies.map((company) => (\n            <PartnerCard\n              key={company._id}\n              partner={company}\n              addPartnerToFavoriteHandler={() =>\n                addPartnerToFavoriteHandler(\n                  company,\n                  isOnline,\n                  dispatch,\n                  token,\n                  user\n                )\n              }\n              addCompanyToOurCompaniesHandler={() =>\n                addCompanyToOurCompaniesHandler(\n                  company,\n                  isOnline,\n                  dispatch,\n                  token\n                )\n              }\n              removeCompanyFromOurCompaniesHandler={() => {\n                removeCompanyFromOurCompaniesHandler(\n                  company,\n                  isOnline,\n                  dispatch,\n                  token\n                );\n              }}\n              removePartnerFromFavoriteHandler={() => {\n                removePartnerFromFavoriteHandler(\n                  company,\n                  isOnline,\n                  dispatch,\n                  token\n                );\n              }}\n              partnerRowClickHandler={(allowShowingWarehouseMedicines) =>\n                partnerRowClickHandler(\n                  company,\n                  allowShowingWarehouseMedicines,\n                  user,\n                  dispatch,\n                  token,\n                  history\n                )\n              }\n            />\n          ))}\n        </div>\n      )}\n\n      {count > 0 && status !== \"loading\" && (\n        <div className={generalStyles.count}>\n          {companies.length} / {count}\n        </div>\n      )}\n\n      {companies.length === 0 &&\n        status !== \"loading\" &&\n        searchName.length === 0 &&\n        searchCity === CitiesName.ALL && <NoContent msg={t(\"no-companies\")} />}\n\n      {companies.length === 0 &&\n        status !== \"loading\" &&\n        (searchName.length !== 0 || searchCity !== CitiesName.ALL) && (\n          <NoContent msg={t(\"no-result-found\")} />\n        )}\n\n      {status === \"loading\" && (\n        <div className={generalStyles.flex_container}>\n          <ReactLoading color={Colors.SECONDARY_COLOR} type=\"cylon\" />\n        </div>\n      )}\n\n      {companies.length < count && (\n        <div className={generalStyles.flex_container}>\n          <ButtonWithIcon\n            text={t(\"more\")}\n            action={handleMoreResult}\n            bgColor={Colors.SECONDARY_COLOR}\n            icon={() => <CgMoreVertical />}\n          />\n        </div>\n      )}\n\n      {companies.length === count && status !== \"loading\" && count !== 0 && (\n        <p\n          className={[generalStyles.center, generalStyles.fc_secondary].join(\n            \" \"\n          )}\n        >\n          {t(\"no-more\")}\n        </p>\n      )}\n    </div>\n  ) : (\n    <Redirect to=\"/signin\" />\n  );\n}\n\nexport default CompaniesPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"small_font\":\"search-container_small_font__Ha0Xq\",\"search_container\":\"search-container_search_container__6isGM\",\"expanded\":\"search-container_expanded__79n+k\",\"expanded_div\":\"search-container_expanded_div__Hmmm1\",\"checkbox_div\":\"search-container_checkbox_div__RPj5T\"};"],"names":["partner","fullWidth","addPartnerToFavoriteHandler","addCompanyToOurCompaniesHandler","removePartnerFromFavoriteHandler","removeCompanyFromOurCompaniesHandler","partnerRowClickHandler","t","useTranslation","showWarehouseItem","useSelector","selectSettings","settings","favorites","selectFavoritesPartners","favoritesError","selectFavoritesError","user","selectUserData","allowShowingWarehouseMedicines","type","UserTypeConstants","allowShowingMedicines","className","styles","join","name","logo_url","length","src","SERVER_URL","alt","Logo","generalStyles","map","favorite","_id","includes","size","onClick","ourCompanies","text","action","bgColor","Colors","icon","children","searchAction","childrenArray","React","useState","moreSearchOptions","setMoreSearchOptions","style","flex","child","index","marginBlockStart","marginInline","marginLeft","marginRight","width","onclick","label","id","value","onchange","placeholder","onEnterPress","resetField","onkeyup","htmlFor","onChange","onKeyPress","event","key","onKeyUp","timer","search","refreshHandler","keyUpHandler","count","history","useHistory","dispatch","useDispatch","selectCompaniesPageState","searchName","searchCity","displayType","e","changeSearchName","target","onSelectionChange","val","changeSearchCity","defaultValue","toLowerCase","withBackground","selected","foreColor","tooltip","CitiesName","resetCompaniesPageState","changeDisplayType","goBack","onSelectedChange","token","selectCompanies","companies","status","isOnline","selectOnlineStatus","handleSearch","getCompanies","handleEnterPress","resetCompaniesArray","useEffect","window","scrollTo","cancelOperation","resetFavorites","getFavorites","resetCompanies","keyCode","clearTimeout","setTimeout","company","msg","color","changeOnlineMsg","to"],"sourceRoot":""}