{"version":3,"file":"static/js/5421.a47a775c.chunk.js","mappings":"6LACA,GAAgB,KAAO,wBAAwB,OAAS,0BAA0B,QAAU,4B,UC2C5F,MA7BA,YAAoD,IAAhCA,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,SAAUC,EAAQ,EAARA,KACzC,GAAgCC,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KAEA,OACE,iBACEC,UAAW,CAACC,EAAAA,KAAsB,YAATL,EAAqBK,EAAAA,QAAiB,MAAMC,KACnE,KAFJ,WAKE,iBACEC,QAAS,kBAAMJ,GAAaD,IAC5BE,UAAW,CACTC,EAAAA,OACS,YAATL,EAAqBK,EAAAA,QAAiB,MACtCC,KAAK,KALT,WAOE,uBAAIR,KACJ,kBACEM,UAAWC,EAAAA,aACXE,QAAS,kBAAMJ,GAAaD,IAF9B,SAIGA,GAAW,SAAC,MAAD,KAAwB,SAAC,MAAD,SAGvCA,IAAY,yBAAMH,S,+LC0GzB,UA5GA,YAA8C,IAArBS,EAAoB,EAApBA,iBACfC,GAAMC,EAAAA,EAAAA,KAAND,EACFE,GAAWC,EAAAA,EAAAA,MAIjB,GAAwBC,EAAAA,EAAAA,IAAYC,EAAAA,IAA5BC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAKd,GAIIH,EAAAA,EAAAA,IAAYI,EAAAA,IAHMC,EADtB,EACEC,mBACiBC,EAFnB,EAEEC,gBACAC,EAHF,EAGEA,OAaF,OALAC,EAAAA,EAAAA,YAAU,WACRC,OAAOC,SAAS,EAAG,GACnBjB,MACC,IAEIO,GACL,iCACE,UAAC,IAAD,YACE,wBAAKN,EAAE,gBACP,gBAAKL,UAAWsB,EAAAA,EAAAA,aAAhB,UACE,SAAC,IAAD,CACEC,UAAU,EACVC,UAAWC,EAAAA,GAAAA,YACXC,QAASrB,EAAE,mBACXsB,QAnBsB,WAC9BpB,GAASqB,EAAAA,EAAAA,OACTrB,GAASsB,EAAAA,EAAAA,IAAa,CAAEjB,MAAAA,MAkBhBkB,KAAM,kBAAM,SAAC,MAAD,aAIlB,iBAAK9B,UAAWsB,EAAAA,EAAAA,sBAAhB,WACE,iBACES,MAAO,CACLC,cAAe,OACfC,YAAa,OACbC,aAAc,QAJlB,WAOE,SAAC,IAAD,CAAUxC,YAAaW,EAAE,aAAzB,SACGW,GACCA,EAAemB,KAAI,SAACC,GAAD,OACjB,SAAC,IAAD,CAEEA,KAAMA,EACNC,kBAAkB,EAClBC,YAAY,GAHPF,EAAKG,WAWlB,SAAC,IAAD,CAAU7C,YAAaW,EAAE,aAAzB,SACGS,GACCA,EACG0B,QACC,SAACC,GAAD,OAAcA,EAAS7C,OAAS8C,EAAAA,GAAAA,WAEjCP,KAAI,SAACM,GAAD,OACH,SAAC,IAAD,CAEEE,QAASF,EACTJ,kBAAkB,GAFbI,EAASF,WAOtB5B,EAAKf,OAAS8C,EAAAA,GAAAA,OACd/B,EAAKf,OAAS8C,EAAAA,GAAAA,UACd/B,EAAKf,OAAS8C,EAAAA,GAAAA,WACd,SAAC,IAAD,CAAUhD,YAAaW,EAAE,cAAzB,SACGS,GACCA,EACG0B,QACC,SAACC,GAAD,OAAcA,EAAS7C,OAAS8C,EAAAA,GAAAA,aAEjCP,KAAI,SAACM,GAAD,OACH,SAAC,IAAD,CAEEE,QAASF,EACTJ,kBAAkB,GAFbI,EAASF,aAUhB,YAAXrB,IAAwB,SAAC,IAAD,CAAc0B,aAAa,WAIxD,SAAC,KAAD,CAAUC,GAAG","sources":["webpack://pharmacy-frontend/./src/components/card-info/card-info.module.scss?a8ee","components/card-info/card-info.component.jsx","pages/favorites-page/favorites-page.component.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"card\":\"card-info_card__VcLb9\",\"header\":\"card-info_header__uTcny\",\"warning\":\"card-info_warning__bmiK1\"};","// card component that can collapsed or expanded by pressing on the header\n\n// props\n// headerTitle: text to show in the header section\n// children: array of component to show in the body of the card\n// type: warning or normal to change to background color of the card\n\nimport React, { useState } from \"react\";\n\n// react icon\nimport { BsFillCaretDownFill, BsFillCaretUpFill } from \"react-icons/bs\";\n\n// styles\nimport styles from \"./card-info.module.scss\";\n\nfunction CardInfo({ headerTitle, children, type }) {\n  const [expanded, setExpanded] = useState(true);\n\n  return (\n    <div\n      className={[styles.card, type === \"warning\" ? styles.warning : null].join(\n        \" \"\n      )}\n    >\n      <div\n        onClick={() => setExpanded(!expanded)}\n        className={[\n          styles.header,\n          type === \"warning\" ? styles.warning : null,\n        ].join(\" \")}\n      >\n        <p>{headerTitle}</p>\n        <label\n          className={styles.header_label}\n          onClick={() => setExpanded(!expanded)}\n        >\n          {expanded ? <BsFillCaretUpFill /> : <BsFillCaretDownFill />}\n        </label>\n      </div>\n      {expanded && <div>{children}</div>}\n    </div>\n  );\n}\n\nexport default CardInfo;\n","// this page display the favorite companies, warehouses, items\n// depends on the favoritesSlice\n\n// favoritesSlice contains\n// 1- favorites\n// 2- favorites_items\n\nimport React, { useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Redirect } from \"react-router-dom\";\n\n// redux stuff\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  resetFavorites,\n  getFavorites,\n  selectFavorites,\n} from \"../../redux/favorites/favoritesSlice\";\nimport { selectUserData } from \"../../redux/auth/authSlice\";\n\n// components\nimport CardInfo from \"../../components/card-info/card-info.component\";\nimport Header from \"../../components/header/header.component\";\nimport PartnerRow from \"../../components/partner-row/partner-row.component\";\nimport Icon from \"../../components/action-icon/action-icon.component\";\nimport ItemRow from \"../../components/item-row/item-row.component\";\nimport ActionLoader from \"../../components/action-loader/action-loader.component\";\n\n// icons\nimport { RiRefreshLine } from \"react-icons/ri\";\n\n// styles\nimport generalStyles from \"../../style.module.scss\";\n\n// constants\nimport { Colors, UserTypeConstants } from \"../../utils/constants.js\";\n\nfunction FavoritesPage({ onSelectedChange }) {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  // selectors\n  // get the logged user\n  const { user, token } = useSelector(selectUserData);\n\n  // get the favorites partners and favorites items from favoritesSlice\n  // const favoritesPartners = useSelector(selectFavoritesPartners);\n  // const favoritesItems = useSelector(selectFavoritesItems);\n  const {\n    favorites_partners: favoritesPartners,\n    favorites_items: favoritesItems,\n    status,\n  } = useSelector(selectFavorites);\n\n  const refreshFavoritesHandler = () => {\n    dispatch(resetFavorites());\n    dispatch(getFavorites({ token }));\n  };\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    onSelectedChange();\n  }, []);\n\n  return user ? (\n    <>\n      <Header>\n        <h2>{t(\"favorites\")}</h2>\n        <div className={generalStyles.refresh_icon}>\n          <Icon\n            selected={false}\n            foreColor={Colors.WHITE_COLOR}\n            tooltip={t(\"refresh-tooltip\")}\n            onclick={refreshFavoritesHandler}\n            icon={() => <RiRefreshLine />}\n          />\n        </div>\n      </Header>\n      <div className={generalStyles.container_with_header}>\n        <div\n          style={{\n            paddingInline: \"10px\",\n            paddingLeft: \"10px\",\n            paddingRight: \"10px\",\n          }}\n        >\n          <CardInfo headerTitle={t(\"nav-items\")}>\n            {favoritesItems &&\n              favoritesItems.map((item) => (\n                <ItemRow\n                  key={item._id}\n                  item={item}\n                  withoutBoxShadow={true}\n                  isFavorite={true}\n                />\n              ))}\n          </CardInfo>\n          {/* favorites items */}\n\n          {/* favorite companies */}\n\n          <CardInfo headerTitle={t(\"companies\")}>\n            {favoritesPartners &&\n              favoritesPartners\n                .filter(\n                  (favorite) => favorite.type === UserTypeConstants.COMPANY\n                )\n                .map((favorite) => (\n                  <PartnerRow\n                    key={favorite._id}\n                    partner={favorite}\n                    withoutBoxShadow={true}\n                  />\n                ))}\n          </CardInfo>\n\n          {(user.type === UserTypeConstants.ADMIN ||\n            user.type === UserTypeConstants.PHARMACY ||\n            user.type === UserTypeConstants.COMPANY) && (\n            <CardInfo headerTitle={t(\"warehouses\")}>\n              {favoritesPartners &&\n                favoritesPartners\n                  .filter(\n                    (favorite) => favorite.type === UserTypeConstants.WAREHOUSE\n                  )\n                  .map((favorite) => (\n                    <PartnerRow\n                      key={favorite._id}\n                      partner={favorite}\n                      withoutBoxShadow={true}\n                    />\n                  ))}\n            </CardInfo>\n          )}\n        </div>\n        {/* favorites warehouses */}\n\n        {status === \"loading\" && <ActionLoader allowCancel={false} />}\n      </div>\n    </>\n  ) : (\n    <Redirect to=\"/signin\" />\n  );\n}\n\nexport default FavoritesPage;\n"],"names":["headerTitle","children","type","useState","expanded","setExpanded","className","styles","join","onClick","onSelectedChange","t","useTranslation","dispatch","useDispatch","useSelector","selectUserData","user","token","selectFavorites","favoritesPartners","favorites_partners","favoritesItems","favorites_items","status","useEffect","window","scrollTo","generalStyles","selected","foreColor","Colors","tooltip","onclick","resetFavorites","getFavorites","icon","style","paddingInline","paddingLeft","paddingRight","map","item","withoutBoxShadow","isFavorite","_id","filter","favorite","UserTypeConstants","partner","allowCancel","to"],"sourceRoot":""}