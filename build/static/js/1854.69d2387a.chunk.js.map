{"version":3,"file":"static/js/1854.69d2387a.chunk.js","mappings":"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","sources":["webpack://pharmacy-frontend/./src/components/card-info/card-info.module.scss?a8ee","components/card-info/card-info.component.jsx","webpack://pharmacy-frontend/./src/components/custom-checkbox/custom-checkbox.module.scss?e811","components/custom-checkbox/custom-checkbox.component.jsx","webpack://pharmacy-frontend/./src/components/partner-row/partner-row.module.scss?1546","components/partner-row/partner-row.component.jsx","webpack://pharmacy-frontend/./src/modals/change-quantity-modal/change-quantity-modal.module.scss?9dc8","modals/change-quantity-modal/change-quantity-modal.component.jsx","pages/favorites-page/favorites-page.component.jsx","utils/handlers.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"small_font\":\"card-info_small_font__AusTH\",\"card\":\"card-info_card__VcLb9\",\"header\":\"card-info_header__uTcny\",\"expanded\":\"card-info_expanded__IDH-A\",\"warning\":\"card-info_warning__bmiK1\"};","// card component that can collapsed or expanded by pressing on the header\n\n// props\n// headerTitle: text to show in the header section\n// children: array of component to show in the body of the card\n// type: warning or normal to change to background color of the card\n\nimport React, { useState } from \"react\";\n\n// react icon\nimport { BsFillCaretDownFill, BsFillCaretUpFill } from \"react-icons/bs\";\n\n// styles\nimport styles from \"./card-info.module.scss\";\n\nfunction CardInfo({ headerTitle, children, type }) {\n  const [expanded, setExpanded] = useState(true);\n\n  return (\n    <div\n      className={[styles.card, type === \"warning\" ? styles.warning : null].join(\n        \" \"\n      )}\n    >\n      <div\n        onClick={() => setExpanded(!expanded)}\n        className={[\n          styles.header,\n          type === \"warning\" ? styles.warning : null,\n          expanded ? styles.expanded : null,\n        ].join(\" \")}\n      >\n        <p>{headerTitle}</p>\n        <label\n          className={styles.header_label}\n          onClick={() => setExpanded(!expanded)}\n        >\n          {expanded ? <BsFillCaretUpFill /> : <BsFillCaretDownFill />}\n        </label>\n      </div>\n      {expanded && <div>{children}</div>}\n    </div>\n  );\n}\n\nexport default CardInfo;\n","// extracted by mini-css-extract-plugin\nexport default {\"small_font\":\"custom-checkbox_small_font__lyEQV\",\"container\":\"custom-checkbox_container__xRmIL\",\"checkmark\":\"custom-checkbox_checkmark__Sr2i9\"};","import React from \"react\";\n\nimport styles from \"./custom-checkbox.module.scss\";\n\nconst CustomCheckbox = ({ label, value, changeHandler }) => {\n  return (\n    <div className={styles.container} onClick={changeHandler}>\n      <input\n        type=\"checkbox\"\n        checked={value}\n        value={value}\n        onChange={() => {\n          changeHandler();\n        }}\n      />\n      <span className={styles.checkmark}></span>\n      <label>{label}</label>\n    </div>\n  );\n};\n\nexport default CustomCheckbox;\n","// extracted by mini-css-extract-plugin\nexport default {\"small_font\":\"partner-row_small_font__PJv1q\",\"container\":\"partner-row_container__IgdQk\",\"full_width_container\":\"partner-row_full_width_container__dgwvB\",\"fast_deliver_div\":\"partner-row_fast_deliver_div__zaZgo\",\"point_sys_label\":\"partner-row_point_sys_label__fpi2Y\",\"without_box_shadow\":\"partner-row_without_box_shadow__EUT2K\",\"name\":\"partner-row_name__7Tav0\",\"content\":\"partner-row_content__LbV16\",\"label_with_input_div\":\"partner-row_label_with_input_div__C0tM3\",\"btn\":\"partner-row_btn__gBUX8\",\"small_label\":\"partner-row_small_label__lxVoI\",\"center_label\":\"partner-row_center_label__sQqTD\",\"bottomBorder\":\"partner-row_bottomBorder__cwQ3x\"};","import React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport FastDeliverLogo from \"../../assets/small_logo.png\";\n\n// react icons\nimport { AiFillStar, AiOutlineStar } from \"react-icons/ai\";\nimport { FaHandshake, FaHandshakeSlash } from \"react-icons/fa\";\n\n// components\nimport ChangeQuantityModal from \"../../modals/change-quantity-modal/change-quantity-modal.component\";\nimport CustomCheckbox from \"../custom-checkbox/custom-checkbox.component\";\nimport Separator from \"../separator/separator.component\";\nimport Icon from \"../icon/icon.component\";\n\n// redux-stuff\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateUser } from \"../../redux/warehouse/warehousesSlice\";\nimport {\n  selectFavoritesPartners,\n  selectFavoritesError,\n} from \"../../redux/favorites/favoritesSlice\";\nimport { selectUserData } from \"../../redux/auth/authSlice\";\nimport { selectSettings } from \"../../redux/settings/settingsSlice\";\n\n// styles\nimport styles from \"./partner-row.module.scss\";\n\n// constants and utils\nimport { Colors, UserTypeConstants } from \"../../utils/constants.js\";\n\nfunction PartnerRow({\n  partner,\n  fullWidth,\n  withoutBoxShadow,\n  withoutDeliverOption,\n  onSelectAction,\n  addPartnerToFavoriteHandler,\n  addCompanyToOurCompaniesHandler,\n  removePartnerFromFavoriteHandler,\n  removeCompanyFromOurCompaniesHandler,\n  partnerRowClickHandler,\n}) {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  // selectors\n  const {\n    settings: { showWarehouseItem },\n  } = useSelector(selectSettings);\n  const favorites = useSelector(selectFavoritesPartners);\n  const favoritesError = useSelector(selectFavoritesError);\n  const { user, token } = useSelector(selectUserData);\n\n  // own state\n  const [showChangeDeliverCostModal, setShowChangeDeliverCostModal] =\n    useState(false);\n  const [\n    showChangeMinimumInvoiceValueModal,\n    setShowChangeMinimumInvoiceValueModal,\n  ] = useState(false);\n  const [showChangePointForAmountModal, setShowChangePointForAmountModal] =\n    useState(false);\n  const [showChangeAmountToGetPointModal, setShowChangeAmountToGetPointModal] =\n    useState(false);\n\n  // determine if the partner can see the medicines in specific warehouse\n  const allowShowingWarehouseMedicines =\n    user.type === UserTypeConstants.ADMIN ||\n    partner.type === UserTypeConstants.COMPANY ||\n    (partner.type === UserTypeConstants.WAREHOUSE &&\n      showWarehouseItem &&\n      partner.allowShowingMedicines);\n\n  const clickHandler = (allow) => {\n    if (allow) {\n      if (onSelectAction) onSelectAction();\n      partnerRowClickHandler(allowShowingWarehouseMedicines);\n    }\n  };\n\n  const changeQuantityHandler = (value) => {\n    if (value < 0 || value > 1) {\n      return;\n    }\n\n    dispatch(\n      updateUser({\n        body: {\n          costOfDeliver: value,\n        },\n        userId: partner._id,\n        token,\n      })\n    );\n\n    setShowChangeDeliverCostModal(false);\n  };\n\n  const changeMinimumInvoiceValueHandler = (value) => {\n    if (value < 0) {\n      return;\n    }\n\n    dispatch(\n      updateUser({\n        body: {\n          invoiceMinTotal: value,\n        },\n        userId: partner._id,\n        token,\n      })\n    );\n\n    setShowChangeMinimumInvoiceValueModal(false);\n  };\n\n  const changeAmountToGetPointValueHandler = (value) => {\n    if (value < 0) {\n      return;\n    }\n\n    dispatch(\n      updateUser({\n        body: {\n          amountToGetPoint: value,\n        },\n        userId: partner._id,\n        token,\n      })\n    );\n\n    setShowChangeAmountToGetPointModal(false);\n  };\n\n  const changePointForAmountValueHandler = (value) => {\n    if (value < 0) {\n      return;\n    }\n\n    dispatch(\n      updateUser({\n        body: {\n          pointForAmount: value,\n        },\n        userId: partner._id,\n        token,\n      })\n    );\n\n    setShowChangePointForAmountModal(false);\n  };\n\n  const changeFastDeliverHanlder = () => {\n    dispatch(\n      updateUser({\n        body: {\n          fastDeliver: !partner.fastDeliver,\n        },\n        userId: partner._id,\n        token,\n      })\n    );\n  };\n\n  const changePayAtDeliverHanlder = () => {\n    dispatch(\n      updateUser({\n        body: {\n          payAtDeliver: !partner.payAtDeliver,\n        },\n        userId: partner._id,\n        token,\n      })\n    );\n  };\n\n  const changeIncludeInPointSystemHanlder = () => {\n    let body = { includeInPointSystem: !partner.includeInPointSystem };\n    if (partner.includeInPointSystem) {\n      body = {\n        ...body,\n        pointForAmount: 0,\n        amountToGetPoint: 0,\n      };\n    }\n\n    dispatch(\n      updateUser({\n        body,\n        userId: partner._id,\n        token,\n      })\n    );\n  };\n\n  return (\n    <>\n      <div\n        className={[\n          fullWidth ? styles.full_width_container : styles.container,\n          withoutBoxShadow ? styles.without_box_shadow : \"\",\n        ].join(\" \")}\n      >\n        <div className={styles.content}>\n          <label className={styles.name} onClick={() => clickHandler(true)}>\n            {partner.name}\n          </label>\n\n          {user.type === UserTypeConstants.ADMIN &&\n            partner.type === UserTypeConstants.WAREHOUSE &&\n            !withoutDeliverOption && (\n              <>\n                <Separator />\n                <div className={styles.label_with_input_div}>\n                  <label className={styles.small_label}>\n                    {t(\"deliver cost\")}\n                  </label>\n                  <button\n                    onClick={() => setShowChangeDeliverCostModal(true)}\n                    className={styles.btn}\n                  >\n                    {partner.costOfDeliver} %\n                  </button>\n                </div>\n\n                <Separator />\n\n                <div className={styles.label_with_input_div}>\n                  <label className={styles.small_label}>\n                    {t(\"minimum invoice cost\")}\n                  </label>\n                  <button\n                    className={styles.btn}\n                    onClick={() => setShowChangeMinimumInvoiceValueModal(true)}\n                  >\n                    {partner.invoiceMinTotal}\n                  </button>\n                </div>\n\n                <Separator />\n\n                <div className={styles.label_with_input_div}>\n                  <CustomCheckbox\n                    label={t(\"this warehouse supports the points system\")}\n                    value={partner.includeInPointSystem}\n                    changeHandler={() => changeIncludeInPointSystemHanlder()}\n                  />\n\n                  {partner.includeInPointSystem && (\n                    <>\n                      <button\n                        className={styles.btn}\n                        style={{ margin: \"0 6px\" }}\n                        onClick={() => setShowChangeAmountToGetPointModal(true)}\n                      >\n                        {t(\"every\")} {partner.amountToGetPoint}\n                      </button>\n                      <label className={styles.center_label}>{t(\"get\")}</label>\n                      <button\n                        className={styles.btn}\n                        onClick={() => setShowChangePointForAmountModal(true)}\n                      >\n                        {partner.pointForAmount} {t(\"point\")}\n                      </button>\n                    </>\n                  )}\n                </div>\n\n                <Separator />\n\n                <CustomCheckbox\n                  label={t(\"fast deliver\")}\n                  value={partner.fastDeliver}\n                  changeHandler={() => changeFastDeliverHanlder()}\n                />\n                <Separator />\n                <CustomCheckbox\n                  label={t(\"show cash on receipt\")}\n                  value={partner.payAtDeliver}\n                  changeHandler={() => changePayAtDeliverHanlder()}\n                />\n              </>\n            )}\n\n          {partner.type === UserTypeConstants.WAREHOUSE &&\n            user.type === UserTypeConstants.PHARMACY &&\n            partner.includeInPointSystem &&\n            partner.pointForAmount &&\n            partner.amountToGetPoint && (\n              <div className={styles.point_sys_label}>\n                <label>\n                  {t(\"number of points that you get when buy from warehouse\")}{\" \"}\n                  {t(\"every\")} {partner.amountToGetPoint} {t(\"get\")}{\" \"}\n                  {partner.pointForAmount} {t(\"point\")}\n                </label>\n              </div>\n            )}\n\n          {partner.type === UserTypeConstants.WAREHOUSE &&\n            user.type === UserTypeConstants.PHARMACY &&\n            partner.fastDeliver && (\n              <div\n                className={styles.fast_deliver_div}\n                style={{ display: \"flex\", alignItems: \"center\" }}\n              >\n                <img\n                  src={FastDeliverLogo}\n                  alt=\"tumb\"\n                  style={{ width: \"32px\", height: \"32px\" }}\n                />\n                <label>{t(\"fast deliver\")}</label>\n              </div>\n            )}\n        </div>\n\n        <div className={styles.actions_div}>\n          {user.type === UserTypeConstants.WAREHOUSE &&\n          partner.type === UserTypeConstants.COMPANY ? (\n            <div>\n              {user.ourCompanies.includes(partner._id) ? (\n                <Icon\n                  icon={() => <FaHandshakeSlash size={24} />}\n                  onclick={removeCompanyFromOurCompaniesHandler}\n                  foreColor={Colors.FAILED_COLOR}\n                  tooltip={t(\"remove company from warehouse\")}\n                />\n              ) : (\n                <Icon\n                  icon={() => <FaHandshake size={24} />}\n                  onclick={addCompanyToOurCompaniesHandler}\n                  foreColor={Colors.SUCCEEDED_COLOR}\n                  tooltip={t(\"add company to warehouse\")}\n                />\n              )}\n            </div>\n          ) : (\n            <></>\n          )}\n\n          <div>\n            {favoritesError === \"\" ? (\n              favorites &&\n              favorites\n                .map((favorite) => favorite._id)\n                .includes(partner._id) ? (\n                <Icon\n                  icon={() => <AiFillStar size={24} />}\n                  onclick={removePartnerFromFavoriteHandler}\n                  foreColor={Colors.YELLOW_COLOR}\n                  tooltip={t(\"remove from favorites\")}\n                />\n              ) : (\n                <Icon\n                  icon={() => <AiOutlineStar size={24} />}\n                  onclick={addPartnerToFavoriteHandler}\n                  foreColor={Colors.YELLOW_COLOR}\n                  tooltip={t(\"add to favorites\")}\n                />\n              )\n            ) : null}\n          </div>\n        </div>\n      </div>\n\n      {showChangeDeliverCostModal && (\n        <ChangeQuantityModal\n          closeModal={() => setShowChangeDeliverCostModal(false)}\n          value={partner.costOfDeliver}\n          min={0.0}\n          max={1.0}\n          step={0.1}\n          okModal={(value) => changeQuantityHandler(value)}\n        />\n      )}\n\n      {showChangeMinimumInvoiceValueModal && (\n        <ChangeQuantityModal\n          closeModal={() => setShowChangeMinimumInvoiceValueModal(false)}\n          value={partner.invoiceMinTotal}\n          min={0}\n          max={1000000}\n          step={1000}\n          okModal={(value) => changeMinimumInvoiceValueHandler(value)}\n        />\n      )}\n\n      {showChangeAmountToGetPointModal && (\n        <ChangeQuantityModal\n          closeModal={() => setShowChangeAmountToGetPointModal(false)}\n          value={partner.amountToGetPoint}\n          min={0}\n          max={1000000}\n          step={1000}\n          okModal={(value) => changeAmountToGetPointValueHandler(value)}\n        />\n      )}\n\n      {showChangePointForAmountModal && (\n        <ChangeQuantityModal\n          closeModal={() => setShowChangePointForAmountModal(false)}\n          value={partner.pointForAmount}\n          min={0}\n          max={1000000}\n          step={1000}\n          okModal={(value) => changePointForAmountValueHandler(value)}\n        />\n      )}\n    </>\n  );\n}\n\nexport default PartnerRow;\n","// extracted by mini-css-extract-plugin\nexport default {\"small_font\":\"change-quantity-modal_small_font__NZ-cZ\",\"input\":\"change-quantity-modal_input__mDnux\",\"error\":\"change-quantity-modal_error__emgp-\"};","import React from \"react\";\nimport { useState, useRef, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { onKeyPressForNumberInput } from \"../../utils/constants\";\nimport Modal from \"../modal/modal.component\";\n\nimport styles from \"./change-quantity-modal.module.scss\";\n\nconst ChangeQuantityModal = ({\n  okModal,\n  value,\n  closeModal,\n  min,\n  max,\n  step,\n}) => {\n  const { t } = useTranslation();\n\n  const [inputValue, setInputValue] = useState(value);\n  const [error, setError] = useState(false);\n  const inputValueRef = useRef();\n\n  const changeValueHandler = (e) => {\n    setInputValue(e.target.value);\n    setError(false);\n  };\n\n  const confirmValueHandler = () => {\n    if (!inputValue) {\n      setError(true);\n      return;\n    }\n    if (inputValue < min || inputValue > max) {\n      setError(true);\n      return;\n    }\n\n    okModal(inputValue);\n  };\n\n  useEffect(() => {\n    inputValueRef.current.focus();\n  }, []);\n\n  return (\n    <Modal\n      header={t(\"enter value\")}\n      closeModal={closeModal}\n      cancelLabel={t(\"cancel\")}\n      okLabel={t(\"ok\")}\n      small={true}\n      okModal={confirmValueHandler}\n    >\n      <input\n        className={[styles.input, error ? styles.error : \"\"].join(\" \")}\n        onKeyPress={onKeyPressForNumberInput}\n        value={inputValue}\n        onChange={(e) => changeValueHandler(e)}\n        type=\"number\"\n        min={min}\n        max={max}\n        step={step}\n        ref={inputValueRef}\n      />\n    </Modal>\n  );\n};\n\nexport default ChangeQuantityModal;\n","// this page display the favorite companies, warehouses, items\n// depends on the favoritesSlice\n\n// favoritesSlice contains\n// 1- favorites\n// 2- favorites_items\n\nimport React, { useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Redirect, useHistory } from \"react-router-dom\";\n\n// redux stuff\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  resetFavorites,\n  getFavorites,\n  selectFavorites,\n} from \"../../redux/favorites/favoritesSlice\";\nimport { selectUserData } from \"../../redux/auth/authSlice\";\nimport { selectOnlineStatus } from \"../../redux/online/onlineSlice\";\n\n// components\nimport MainContentContainer from \"../../components/main-content-container/main-content-container.component\";\nimport ActionLoader from \"../../components/action-loader/action-loader.component\";\nimport MedicineRow from \"../../components/medicine-row/medicine-row.component\";\nimport PartnerRow from \"../../components/partner-row/partner-row.component\";\nimport CardInfo from \"../../components/card-info/card-info.component\";\nimport Header from \"../../components/header/header.component\";\n\n// constants\nimport { UserTypeConstants } from \"../../utils/constants.js\";\n\n// handlers\nimport {\n  addCompanyToOurCompaniesHandler,\n  addPartnerToFavoriteHandler,\n  partnerRowClickHandler,\n  removeCompanyFromOurCompaniesHandler,\n  removePartnerFromFavoriteHandler,\n} from \"../../utils/handlers\";\n\nfunction FavoritesPage({ onSelectedChange }) {\n  const history = useHistory();\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  // selectors\n  // get the logged user\n  const { user, token } = useSelector(selectUserData);\n\n  // get the favorites partners and favorites items from favoritesSlice\n  const {\n    favorites_partners: favoritesPartners,\n    favorites_items: favoritesItems,\n    status,\n  } = useSelector(selectFavorites);\n  const isOnline = useSelector(selectOnlineStatus);\n\n  const refreshFavoritesHandler = () => {\n    dispatch(resetFavorites());\n    dispatch(getFavorites({ token }));\n  };\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    onSelectedChange();\n  }, []);\n\n  return user ? (\n    <>\n      <Header refreshHandler={refreshFavoritesHandler} title=\"favorites\" />\n      <MainContentContainer>\n        <div>\n          <CardInfo headerTitle={t(\"nav items\")}>\n            {favoritesItems &&\n              favoritesItems.map((item, index) => (\n                <MedicineRow\n                  item={item}\n                  index={index}\n                  key={item._id}\n                  showComposition={true}\n                />\n              ))}\n          </CardInfo>\n          {/* favorites items */}\n\n          {/* favorite companies */}\n\n          <CardInfo headerTitle={t(\"companies\")}>\n            {favoritesPartners &&\n              favoritesPartners\n                .filter(\n                  (favorite) => favorite.type === UserTypeConstants.COMPANY\n                )\n                .map((favorite) => (\n                  <PartnerRow\n                    key={favorite._id}\n                    fullWidth={true}\n                    partner={favorite}\n                    withoutBoxShadow={true}\n                    addPartnerToFavoriteHandler={() =>\n                      addPartnerToFavoriteHandler(\n                        favorite,\n                        isOnline,\n                        dispatch,\n                        token,\n                        user\n                      )\n                    }\n                    addCompanyToOurCompaniesHandler={() =>\n                      addCompanyToOurCompaniesHandler(\n                        favorite,\n                        isOnline,\n                        dispatch,\n                        token\n                      )\n                    }\n                    removeCompanyFromOurCompaniesHandler={() => {\n                      removeCompanyFromOurCompaniesHandler(\n                        favorite,\n                        isOnline,\n                        dispatch,\n                        token\n                      );\n                    }}\n                    removePartnerFromFavoriteHandler={() => {\n                      removePartnerFromFavoriteHandler(\n                        favorite,\n                        isOnline,\n                        dispatch,\n                        token\n                      );\n                    }}\n                    partnerRowClickHandler={(allowShowingWarehouseMedicines) =>\n                      partnerRowClickHandler(\n                        favorite,\n                        allowShowingWarehouseMedicines,\n                        user,\n                        dispatch,\n                        token,\n                        history\n                      )\n                    }\n                  />\n                ))}\n          </CardInfo>\n\n          {(user.type === UserTypeConstants.ADMIN ||\n            user.type === UserTypeConstants.PHARMACY ||\n            user.type === UserTypeConstants.COMPANY) && (\n            <CardInfo headerTitle={t(\"warehouses\")}>\n              {favoritesPartners &&\n                favoritesPartners\n                  .filter(\n                    (favorite) => favorite.type === UserTypeConstants.WAREHOUSE\n                  )\n                  .map((favorite) => (\n                    <PartnerRow\n                      key={favorite._id}\n                      partner={favorite}\n                      fullWidth={true}\n                      withoutBoxShadow={true}\n                      withoutDeliverOption={true}\n                      addPartnerToFavoriteHandler={() =>\n                        addPartnerToFavoriteHandler(\n                          favorite,\n                          isOnline,\n                          dispatch,\n                          token,\n                          user\n                        )\n                      }\n                      addCompanyToOurCompaniesHandler={() =>\n                        addCompanyToOurCompaniesHandler(\n                          favorite,\n                          dispatch,\n                          token\n                        )\n                      }\n                      removeCompanyFromOurCompaniesHandler={() => {\n                        removeCompanyFromOurCompaniesHandler(\n                          favorite,\n                          isOnline,\n                          dispatch,\n                          token\n                        );\n                      }}\n                      removePartnerFromFavoriteHandler={() => {\n                        removePartnerFromFavoriteHandler(\n                          favorite,\n                          isOnline,\n                          dispatch,\n                          token\n                        );\n                      }}\n                      partnerRowClickHandler={(\n                        allowShowingWarehouseMedicines\n                      ) =>\n                        partnerRowClickHandler(\n                          favorite,\n                          allowShowingWarehouseMedicines,\n                          user,\n                          dispatch,\n                          token,\n                          history\n                        )\n                      }\n                    />\n                  ))}\n            </CardInfo>\n          )}\n        </div>\n        {/* favorites warehouses */}\n\n        {status === \"loading\" && <ActionLoader allowCancel={false} />}\n      </MainContentContainer>\n    </>\n  ) : (\n    <Redirect to=\"/signin\" />\n  );\n}\n\nexport default FavoritesPage;\n","import { unwrapResult } from \"@reduxjs/toolkit\";\nimport {\n  addCompanyToOurCompanies,\n  removeCompanyFromOurCompanies,\n} from \"../redux/auth/authSlice\";\nimport { addFavorite, removeFavorite } from \"../redux/favorites/favoritesSlice\";\nimport {\n  resetMedicines,\n  setSearchCompanyId,\n  setSearchWarehouseId,\n} from \"../redux/medicines/medicinesSlices\";\nimport { changeOnlineMsg } from \"../redux/online/onlineSlice\";\nimport { addStatistics } from \"../redux/statistics/statisticsSlice\";\n\nimport axios from \"axios\";\n\n// constants\nimport { BASEURL, UserTypeConstants } from \"./constants\";\n\nexport const addPartnerToFavoriteHandler = (\n  partner,\n  isOnline,\n  dispatch,\n  token,\n  user\n) => {\n  // check the internet connection\n  if (!isOnline) {\n    dispatch(changeOnlineMsg());\n    return;\n  }\n\n  dispatch(addFavorite({ obj: { favoriteId: partner._id }, token }))\n    .then(unwrapResult)\n    .then(() => {\n      dispatch(\n        addStatistics({\n          obj: {\n            sourceUser: user._id,\n            targetUser: partner._id,\n            action: \"user-added-to-favorite\",\n          },\n          token,\n        })\n      );\n    })\n    .catch(() => {});\n};\n\nexport const addCompanyToOurCompaniesHandler = (\n  partner,\n  isOnline,\n  dispatch,\n  token\n) => {\n  // check the internet connection\n  if (!isOnline) {\n    dispatch(changeOnlineMsg());\n    return;\n  }\n\n  dispatch(addCompanyToOurCompanies({ companyId: partner._id, token }))\n    .then(unwrapResult)\n    .then(() => {})\n    .catch(() => {});\n};\n\nexport const removeCompanyFromOurCompaniesHandler = (\n  partner,\n  isOnline,\n  dispatch,\n  token\n) => {\n  // check the internet connection\n  if (!isOnline) {\n    dispatch(changeOnlineMsg());\n    return;\n  }\n\n  dispatch(removeCompanyFromOurCompanies({ companyId: partner._id, token }))\n    .then(unwrapResult)\n    .then(() => {})\n    .catch(() => {});\n};\n\nexport const removePartnerFromFavoriteHandler = (\n  partner,\n  isOnline,\n  dispatch,\n  token\n) => {\n  // check the internet connection\n  if (!isOnline) {\n    dispatch(changeOnlineMsg());\n    return;\n  }\n\n  dispatch(removeFavorite({ obj: { favoriteId: partner._id }, token }))\n    .then(unwrapResult)\n    .then(() => {})\n    .catch(() => {});\n};\n\nexport const partnerRowClickHandler = (\n  partner,\n  allowShowingWarehouseMedicines,\n  user,\n  dispatch,\n  token,\n  history\n) => {\n  // if (onSelectAction) {\n  //   onSelectAction();\n  // }\n\n  if (\n    partner.type === UserTypeConstants.WAREHOUSE &&\n    (user.type === UserTypeConstants.WAREHOUSE ||\n      user.type === UserTypeConstants.COMPANY ||\n      user.type === UserTypeConstants.GUEST)\n  ) {\n    return;\n  }\n\n  if (allowShowingWarehouseMedicines) {\n    // if the partner type is pharmacy or normal, change the selectedCount\n    // and selectedDates for this company\n    if (user.type === UserTypeConstants.PHARMACY) {\n      dispatch(\n        addStatistics({\n          obj: {\n            sourceUser: user._id,\n            targetUser: partner._id,\n            action: \"choose-company\",\n          },\n          token,\n        })\n      );\n    }\n    dispatch(resetMedicines());\n\n    if (partner.type === UserTypeConstants.COMPANY) {\n      dispatch(setSearchCompanyId(partner._id));\n    }\n\n    if (partner.type === UserTypeConstants.WAREHOUSE) {\n      dispatch(setSearchWarehouseId(partner._id));\n    }\n\n    history.push({\n      pathname: \"/medicines\",\n      state: { myCompanies: partner.ourCompanies },\n    });\n  }\n};\n\nexport const deleteImage = async (obj, token) => {\n  if (obj) {\n    const response = await axios.post(`${BASEURL}/users/delete-image`, obj, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n  }\n};\n"],"names":["headerTitle","children","type","useState","expanded","setExpanded","className","styles","join","onClick","label","value","changeHandler","checked","onChange","partner","fullWidth","withoutBoxShadow","withoutDeliverOption","onSelectAction","addPartnerToFavoriteHandler","addCompanyToOurCompaniesHandler","removePartnerFromFavoriteHandler","removeCompanyFromOurCompaniesHandler","partnerRowClickHandler","t","useTranslation","dispatch","useDispatch","showWarehouseItem","useSelector","selectSettings","settings","favorites","selectFavoritesPartners","favoritesError","selectFavoritesError","selectUserData","user","token","showChangeDeliverCostModal","setShowChangeDeliverCostModal","showChangeMinimumInvoiceValueModal","setShowChangeMinimumInvoiceValueModal","showChangePointForAmountModal","setShowChangePointForAmountModal","showChangeAmountToGetPointModal","setShowChangeAmountToGetPointModal","allowShowingWarehouseMedicines","UserTypeConstants","allowShowingMedicines","name","costOfDeliver","invoiceMinTotal","includeInPointSystem","body","pointForAmount","amountToGetPoint","updateUser","userId","_id","changeIncludeInPointSystemHanlder","style","margin","fastDeliver","payAtDeliver","display","alignItems","src","FastDeliverLogo","alt","width","height","ourCompanies","includes","icon","size","onclick","foreColor","Colors","tooltip","map","favorite","closeModal","min","max","step","okModal","changeQuantityHandler","changeMinimumInvoiceValueHandler","changeAmountToGetPointValueHandler","changePointForAmountValueHandler","inputValue","setInputValue","error","setError","inputValueRef","useRef","useEffect","current","focus","header","cancelLabel","okLabel","small","onKeyPress","onKeyPressForNumberInput","e","target","changeValueHandler","ref","onSelectedChange","history","useHistory","selectFavorites","favoritesPartners","favorites_partners","favoritesItems","favorites_items","status","isOnline","selectOnlineStatus","window","scrollTo","refreshHandler","resetFavorites","getFavorites","title","item","index","showComposition","filter","allowCancel","to","addFavorite","obj","favoriteId","then","unwrapResult","addStatistics","sourceUser","targetUser","action","catch","changeOnlineMsg","addCompanyToOurCompanies","companyId","removeCompanyFromOurCompanies","removeFavorite","resetMedicines","setSearchCompanyId","setSearchWarehouseId","push","pathname","state","myCompanies","deleteImage","axios","BASEURL","headers","Authorization"],"sourceRoot":""}