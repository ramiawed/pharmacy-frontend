{"version":3,"file":"static/js/528.5211ed8e.chunk.js","mappings":"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","sources":["webpack://pharmacy-frontend/./src/components/notification-row/notification-row.module.scss?0ea7","components/notification-row/notification-row.component.jsx","components/admin-notifications-header/admin-notifications-header.component.jsx","webpack://pharmacy-frontend/./src/components/new-notification/new-notification.module.scss?8be4","components/new-notification/new-notification.component.jsx","pages/admin-notification-page/admin-notification-page.component.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"row_container\":\"notification-row_row_container__H9osv\",\"inner_container\":\"notification-row_inner_container__mY+Cj\",\"img\":\"notification-row_img__3B3IG\",\"image\":\"notification-row_image__ziJsf\",\"actions\":\"notification-row_actions__xTxlf\",\"delete\":\"notification-row_delete__Xs7yf\",\"unread\":\"notification-row_unread__wOU2r\",\"row\":\"notification-row_row__pwMuM\",\"body\":\"notification-row_body__FQWd+\",\"header\":\"notification-row_header__yfsGP\",\"unread_icon\":\"notification-row_unread_icon__-5kw9\"};","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { useTranslation } from \"react-i18next\";\n\n// react-stuff\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { deleteNotification } from \"../../redux/notifications/notificationsSlice\";\nimport { selectUserData } from \"../../redux/auth/authSlice\";\nimport {\n  decreaseUnreadNotificationsCount,\n  setNotificationRead,\n} from \"../../redux/userNotifications/userNotificationsSlice\";\n\n// components\nimport Modal from \"../modal/modal.component\";\n\n// icons\nimport { RiDeleteBin5Fill } from \"react-icons/ri\";\nimport { BiImage } from \"react-icons/bi\";\nimport { FaBookmark } from \"react-icons/fa\";\n\n// styles\nimport styles from \"./notification-row.module.scss\";\n\n// constants\nimport { Colors, SERVER_URL, UserTypeConstants } from \"../../utils/constants\";\n\nfunction NotificationRow({ notification, index, setSuccessDeletingMsg }) {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  // selectors\n  const { token, user } = useSelector(selectUserData);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const showNotificationDetails = () => {\n    if (\n      user.type !== UserTypeConstants.ADMIN &&\n      !notification.users.includes(user._id)\n    ) {\n      dispatch(\n        setNotificationRead({ token, notificationId: notification._id })\n      );\n      dispatch(decreaseUnreadNotificationsCount());\n    }\n\n    history.push(`/notification/${notification._id}`);\n  };\n\n  const deleteNotificationHandler = () => {\n    setShowDeleteModal(false);\n    dispatch(deleteNotification({ id: notification._id, token }))\n      .then(unwrapResult)\n      .then(() => {\n        setSuccessDeletingMsg(\"delete-notification-msg\");\n      });\n  };\n\n  return (\n    <div\n      className={[styles.row_container].join(\" \")}\n      style={{\n        animationDuration: (0.3 * index) / 10 + \"s\",\n      }}\n    >\n      <div className={styles.img}>\n        {notification.logo_url !== \"\" ? (\n          <img\n            className={styles.image}\n            src={`${SERVER_URL}/notifications/${notification.logo_url}`}\n            alt=\"thumb\"\n          />\n        ) : (\n          <>\n            <BiImage size={64} color={Colors.SECONDARY_COLOR} />\n          </>\n        )}\n      </div>\n\n      <div className={styles.inner_container} onClick={showNotificationDetails}>\n        <div className={styles.row}>\n          <label>{t(\"header\")}</label>\n          <p className={styles.header}>{notification.header}</p>\n        </div>\n        <div className={styles.row}>\n          <label>{t(\"body\")}</label>\n          <p className={styles.body}>{notification.body}</p>\n        </div>\n\n        {!notification.users.includes(user._id) &&\n          user.type !== UserTypeConstants.ADMIN && (\n            <div className={styles.unread_icon}>\n              <FaBookmark />\n            </div>\n          )}\n      </div>\n\n      {user.type === UserTypeConstants.ADMIN && (\n        <div\n          className={styles.delete}\n          onClick={() => {\n            setShowDeleteModal(true);\n          }}\n        >\n          <RiDeleteBin5Fill size={24} />\n        </div>\n      )}\n\n      {showDeleteModal && (\n        <Modal\n          header=\"delete-notification\"\n          cancelLabel=\"close-label\"\n          okLabel=\"ok-label\"\n          closeModal={() => {\n            setShowDeleteModal(false);\n          }}\n          small={true}\n          okModal={deleteNotificationHandler}\n          color={Colors.FAILED_COLOR}\n        >\n          <p>{t(\"delete-notification-confirm-msg\")}</p>\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nexport default NotificationRow;\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\n// icons\nimport { MdAddCircle } from \"react-icons/md\";\nimport { RiRefreshLine } from \"react-icons/ri\";\n\n// components\nimport Header from \"../header/header.component\";\nimport Icon from \"../action-icon/action-icon.component\";\n\n// styles\nimport generalStyles from \"../../style.module.scss\";\n\n// constants\nimport { Colors } from \"../../utils/constants\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getAllNotifications,\n  resetNotifications,\n} from \"../../redux/notifications/notificationsSlice\";\nimport { selectToken } from \"../../redux/auth/authSlice\";\n\nfunction AdminNotificationsHeader({ isNew, setIsNew }) {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  const token = useSelector(selectToken);\n\n  const refreshHandler = () => {\n    dispatch(resetNotifications());\n    dispatch(getAllNotifications({ token }));\n  };\n\n  return (\n    <>\n      <Header>\n        <h2>{t(\"nav-notifications\")}</h2>\n      </Header>\n      <div\n        className={[generalStyles.actions, generalStyles.margin_v_4].join(\" \")}\n      >\n        {!isNew && (\n          <>\n            <Icon\n              selected={false}\n              foreColor={Colors.GREY_COLOR}\n              tooltip={t(\"new-advertisement\")}\n              onclick={() => {\n                setIsNew(true);\n              }}\n              icon={() => <MdAddCircle size={20} />}\n              withBackground={true}\n            />\n\n            <Icon\n              selected={false}\n              foreColor={Colors.GREY_COLOR}\n              tooltip={t(\"refresh-tooltip\")}\n              onclick={() => {\n                refreshHandler();\n              }}\n              icon={() => <RiRefreshLine />}\n              withBackground={true}\n            />\n          </>\n        )}\n\n        {/* Refresh */}\n      </div>\n    </>\n  );\n}\n\nexport default AdminNotificationsHeader;\n","// extracted by mini-css-extract-plugin\nexport default {\"new_notification_div\":\"new-notification_new_notification_div__pbfZn\",\"animateOpacity\":\"new-notification_animateOpacity__jesQm\",\"content\":\"new-notification_content__vANav\",\"img\":\"new-notification_img__gqmLm\",\"image\":\"new-notification_image__KtvNL\",\"actions\":\"new-notification_actions__nDdzi\",\"delete\":\"new-notification_delete__ffXAA\",\"row\":\"new-notification_row__504Xm\",\"error\":\"new-notification_error__8dRSJ\"};","import React, { useState, useRef } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\n// redux stuff\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport { selectToken } from \"../../redux/auth/authSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addNotification } from \"../../redux/notifications/notificationsSlice\";\n\n// components\nimport Icon from \"../action-icon/action-icon.component\";\nimport Button from \"../button/button.component\";\n\n// icons\nimport { BiImage } from \"react-icons/bi\";\nimport { MdAddCircle } from \"react-icons/md\";\nimport { RiDeleteBin5Fill } from \"react-icons/ri\";\n\n// styles\nimport styles from \"./new-notification.module.scss\";\n\n// constants\nimport { Colors } from \"../../utils/constants\";\n\nfunction NewNotification({ setIsNew, setSuccessAddingMsg }) {\n  const inputFileRef = useRef(null);\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  // selectors\n  const token = useSelector(selectToken);\n\n  // own states\n  const [header, setHeader] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [headerError, setHeaderError] = useState(\"\");\n  const [bodyError, setBodyError] = useState(\"\");\n\n  const resetState = () => {\n    setHeader(\"\");\n    setBody(\"\");\n\n    setIsNew(false);\n  };\n\n  const handleAddImageClick = () => {\n    inputFileRef.current.click();\n  };\n\n  const fileChangedHandler = (e) => {\n    if (e.target.files && e.target.files.length > 0) {\n      setSelectedImage(e.target.files[0]);\n    }\n  };\n\n  const addHandler = () => {\n    if (header.trim().length === 0 || body.trim().length === 0) {\n      if (header.trim().length === 0) {\n        setHeaderError(\"error\");\n      }\n\n      if (body.trim().length === 0) {\n        setBodyError(\"error\");\n      }\n\n      return;\n    }\n\n    const data = new FormData();\n\n    if (selectedImage !== null) {\n      data.append(\n        \"logo_url\",\n        `${Date.now()}.${selectedImage.name.split(\".\").pop()}`\n      );\n      data.append(\"file\", selectedImage);\n    }\n\n    data.append(\"header\", header);\n    data.append(\"body\", body);\n\n    dispatch(addNotification({ data, token }))\n      .then(unwrapResult)\n      .then(() => {\n        setBody(\"\");\n        setHeader(\"\");\n        setSelectedImage(null);\n        setSuccessAddingMsg(\"add-notification-msg\");\n      });\n  };\n\n  return (\n    <div className={styles.new_notification_div}>\n      <div\n        className={[\n          styles.row,\n          headerError === \"error\" ? styles.error : \"\",\n        ].join(\" \")}\n      >\n        <label>{t(\"header\")}</label>\n        <input\n          type=\"text\"\n          value={header}\n          onChange={(e) => {\n            setHeader(e.target.value);\n            setHeaderError(\"\");\n          }}\n        />\n      </div>\n      <div\n        className={[styles.row, bodyError === \"error\" ? styles.error : \"\"].join(\n          \" \"\n        )}\n      >\n        <label>{t(\"body\")}</label>\n        <textarea\n          value={body}\n          onChange={(e) => {\n            setBody(e.target.value);\n            setBodyError(\"\");\n          }}\n        />\n      </div>\n\n      <div className={styles.row}>\n        <label>{t(\"image-label\")}:</label>\n        {selectedImage === null ? (\n          <>\n            <Icon\n              selected={false}\n              foreColor={Colors.SUCCEEDED_COLOR}\n              onclick={handleAddImageClick}\n              icon={() => <MdAddCircle size={24} />}\n            />\n            <input\n              multiple={false}\n              accept=\"image/*\"\n              ref={inputFileRef}\n              type=\"file\"\n              onChange={fileChangedHandler}\n              hidden\n            />\n          </>\n        ) : (\n          <Icon\n            icon={() => <RiDeleteBin5Fill size={24} />}\n            selected={false}\n            foreColor={Colors.FAILED_COLOR}\n            onclick={() => setSelectedImage(null)}\n          />\n        )}\n        <div className={styles.img}>\n          {selectedImage ? (\n            <img\n              src={URL.createObjectURL(selectedImage)}\n              className={styles.image}\n              alt=\"Thumb\"\n            />\n          ) : (\n            <div>\n              <BiImage\n                size={128}\n                color={Colors.SECONDARY_COLOR}\n                onClick={handleAddImageClick}\n                style={{\n                  cursor: \"pointer\",\n                }}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className={styles.actions}>\n        <Button\n          action={addHandler}\n          text={t(\"add-label\")}\n          bgColor={Colors.SUCCEEDED_COLOR}\n        />\n        <Button\n          action={resetState}\n          text={t(\"cancel-label\")}\n          bgColor={Colors.FAILED_COLOR}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default NewNotification;\n","import React, { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router\";\nimport { useTranslation } from \"react-i18next\";\n\n// 3-party library (loading, paginate)\nimport ReactPaginate from \"react-paginate\";\n\n// redux stuff\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getAllNotifications,\n  resetError,\n  selectNotifications,\n  setPage,\n} from \"../../redux/notifications/notificationsSlice\";\nimport { selectUserData } from \"../../redux/auth/authSlice\";\nimport {\n  changeOnlineMsg,\n  selectOnlineStatus,\n} from \"../../redux/online/onlineSlice\";\n\n// components\nimport AdminNotificationsHeader from \"../../components/admin-notifications-header/admin-notifications-header.component\";\nimport NewNotification from \"../../components/new-notification/new-notification.component\";\nimport Loader from \"../../components/action-loader/action-loader.component\";\nimport NotificationRow from \"../../components/notification-row/notification-row.component\";\nimport NoContent from \"../../components/no-content/no-content.component\";\n\n// styles\nimport paginationStyles from \"../../components/pagination.module.scss\";\nimport generalStyles from \"../../style.module.scss\";\n\n// constants\nimport { Colors, UserTypeConstants } from \"../../utils/constants\";\nimport Toast from \"../../components/toast/toast.component\";\n\nfunction AdminNotificationPage({ onSelectedChange }) {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  // selectors\n  const { token, user } = useSelector(selectUserData);\n  const { status, error, page, count, notifications } =\n    useSelector(selectNotifications);\n  const isOnline = useSelector(selectOnlineStatus);\n\n  // own state\n  const [isNew, setIsNew] = useState(false);\n  const [successAddingNewNotificationMsg, setSuccessAddingNewNotificationMsg] =\n    useState(\"\");\n  const [successDeletingNotificationMsg, setSuccessDeletingNotificationMsg] =\n    useState(\"\");\n\n  const handleSearch = (page) => {\n    dispatch(setPage(page));\n    dispatch(getAllNotifications({ token }));\n  };\n\n  const handlePageClick = (e) => {\n    if (!isOnline) {\n      dispatch(changeOnlineMsg());\n      return;\n    }\n\n    const { selected } = e;\n\n    handleSearch(selected + 1);\n\n    window.scrollTo(0, 0);\n  };\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n\n    onSelectedChange();\n\n    handleSearch(page);\n  }, []);\n\n  return user && user.type === UserTypeConstants.ADMIN ? (\n    <>\n      <AdminNotificationsHeader isNew={isNew} setIsNew={setIsNew} />\n      <div className={generalStyles.container_with_header}>\n        {isNew ? (\n          <NewNotification\n            setIsNew={setIsNew}\n            setSuccessAddingMsg={setSuccessAddingNewNotificationMsg}\n            setSuccessDeletingMsg={setSuccessDeletingNotificationMsg}\n          />\n        ) : (\n          <>\n            {notifications.map((note, index) => (\n              <NotificationRow\n                key={note._id}\n                notification={note}\n                index={index}\n                setSuccessDeletingMsg={setSuccessDeletingNotificationMsg}\n              />\n            ))}\n\n            {count > 0 && isOnline && (\n              <ReactPaginate\n                previousLabel={t(\"previous\")}\n                nextLabel={t(\"next\")}\n                pageCount={Math.ceil(count / 9)}\n                forcePage={page - 1}\n                onPageChange={handlePageClick}\n                containerClassName={paginationStyles.pagination}\n                previousLinkClassName={paginationStyles.pagination_link}\n                nextLinkClassName={paginationStyles.pagination_link}\n                disabledClassName={paginationStyles.pagination_link_disabled}\n                activeClassName={paginationStyles.pagination_link_active}\n              />\n            )}\n\n            {notifications.length === 0 && status !== \"loading\" && (\n              <NoContent msg={t(\"no-notifications\")} />\n            )}\n\n            {error && (\n              <Toast\n                bgColor={Colors.FAILED_COLOR}\n                foreColor=\"#fff\"\n                toastText={t(error)}\n                actionAfterTimeout={() => dispatch(resetError())}\n              />\n            )}\n          </>\n        )}\n\n        {status === \"loading\" && <Loader />}\n\n        {successAddingNewNotificationMsg && (\n          <Toast\n            bgColor={Colors.SUCCEEDED_COLOR}\n            foreColor=\"#fff\"\n            toastText={t(successAddingNewNotificationMsg)}\n            actionAfterTimeout={() => setSuccessAddingNewNotificationMsg(\"\")}\n          />\n        )}\n\n        {successDeletingNotificationMsg && (\n          <Toast\n            bgColor={Colors.SUCCEEDED_COLOR}\n            foreColor=\"#fff\"\n            toastText={t(successDeletingNotificationMsg)}\n            actionAfterTimeout={() => setSuccessDeletingNotificationMsg(\"\")}\n          />\n        )}\n      </div>\n    </>\n  ) : (\n    <Redirect to=\"/\" />\n  );\n}\n\nexport default AdminNotificationPage;\n"],"names":["notification","index","setSuccessDeletingMsg","t","useTranslation","history","useHistory","dispatch","useDispatch","useSelector","selectUserData","token","user","useState","showDeleteModal","setShowDeleteModal","className","styles","join","style","animationDuration","logo_url","src","SERVER_URL","alt","size","color","Colors","onClick","type","UserTypeConstants","users","includes","_id","setNotificationRead","notificationId","decreaseUnreadNotificationsCount","push","header","body","cancelLabel","okLabel","closeModal","small","okModal","deleteNotification","id","then","unwrapResult","isNew","setIsNew","selectToken","generalStyles","selected","foreColor","tooltip","onclick","icon","withBackground","resetNotifications","getAllNotifications","setSuccessAddingMsg","inputFileRef","useRef","setHeader","setBody","selectedImage","setSelectedImage","headerError","setHeaderError","bodyError","setBodyError","handleAddImageClick","current","click","value","onChange","e","target","multiple","accept","ref","files","length","hidden","URL","createObjectURL","cursor","action","trim","data","FormData","append","Date","now","name","split","pop","addNotification","text","bgColor","onSelectedChange","selectNotifications","status","error","page","count","notifications","isOnline","selectOnlineStatus","successAddingNewNotificationMsg","setSuccessAddingNewNotificationMsg","successDeletingNotificationMsg","setSuccessDeletingNotificationMsg","handleSearch","setPage","useEffect","window","scrollTo","map","note","previousLabel","nextLabel","pageCount","Math","ceil","forcePage","onPageChange","changeOnlineMsg","containerClassName","paginationStyles","previousLinkClassName","nextLinkClassName","disabledClassName","activeClassName","msg","toastText","actionAfterTimeout","resetError","to"],"sourceRoot":""}