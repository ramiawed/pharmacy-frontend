{"version":3,"file":"static/js/990.dac6977e.chunk.js","mappings":"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","sources":["webpack://pharmacy-frontend/./src/components/cart-warehouse/cart-warehouse.module.scss?bc3e","components/cart-warehouse/cart-warehouse.component.jsx","pages/cart-page/cart-page.component.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"header\":\"cart-warehouse_header__XorCl\",\"total_price\":\"cart-warehouse_total_price__XfuYf\"};","import React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport axios from \"axios\";\n\n// redux stuff\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { resetCartItems, selectCartItems } from \"../../redux/cart/cartSlice\";\nimport {\n  changeOnlineMsg,\n  selectOnlineStatus,\n} from \"../../redux/online/onlineSlice\";\nimport { selectUserData } from \"../../redux/auth/authSlice\";\nimport { statisticsOrders } from \"../../redux/statistics/statisticsSlice\";\n\n// components\nimport CartRow from \"../cart-row/cart-row.component\";\nimport Button from \"../button/button.component\";\nimport CartWarehouseTableHeader from \"../cart-warehouse-table-header/cart-warehouse-table-header.component\";\nimport Modal from \"../modal/modal.component\";\nimport Loader from \"../action-loader/action-loader.component\";\n\n// styles\nimport styles from \"./cart-warehouse.module.scss\";\n\n// constants\nimport { BASEURL, Colors, OfferTypes } from \"../../utils/constants\";\nimport { selectSettings } from \"../../redux/settings/settingsSlice\";\nimport { saveOrder, setRefresh } from \"../../redux/orders/ordersSlice\";\n\nfunction CartWarehouse({ warehouse }) {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  // selectors\n  const isOnline = useSelector(selectOnlineStatus);\n  const { token, user } = useSelector(selectUserData);\n  const cartItems = useSelector(selectCartItems);\n  const {\n    settings: { saveOrders },\n  } = useSelector(selectSettings);\n\n  // own state\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\n  const [showFailedModal, setShowFailedModal] = useState(false);\n  const [showLoadingModal, setShowLoadingModal] = useState(false);\n  const [showConfirmSaveOrder, setShowConfirmSaveOrder] = useState(false);\n\n  const computeTotalPrice = () => {\n    let total = 0;\n\n    cartItems\n      .filter((item) => item.warehouse.warehouse.name === warehouse)\n      .forEach((item) => {\n        total =\n          total +\n          item.qty * item.item.price -\n          (item.bonus && item.bonusType === OfferTypes.PERCENTAGE\n            ? (item.qty * item.item.price * item.bonus) / 100\n            : 0);\n      });\n\n    return total;\n  };\n\n  const sendOrderHandler = () => {\n    // check internet connection\n    if (!isOnline) {\n      dispatch(changeOnlineMsg());\n      return;\n    }\n\n    setShowLoadingModal(true);\n\n    let cartItemsToSend = cartItems\n      .filter((item) => item.warehouse.warehouse.name === warehouse)\n      .map((e) => {\n        return {\n          itemName: e.item.name,\n          companyName: e.item.company.name,\n          warehouseName: e.warehouse.warehouse.name,\n          formula: e.item.formula,\n          caliber: e.item.caliber,\n          packing: e.item.packing,\n          price: e.item.price,\n          customerPrice: e.item.customer_price,\n          quantity: e.qty,\n          bonus: e.bonusType\n            ? `${e.bonus} ${e.bonusType === \"pieces\" ? \"قطع\" : \"%\"}`\n            : \"\",\n          totalPrice:\n            e.qty * e.item.price -\n            (e.bonus && e.bonusType === \"percentage\"\n              ? (e.qty * e.item.price * e.bonus) / 100\n              : 0),\n        };\n      });\n\n    cartItemsToSend = [\n      ...cartItemsToSend,\n      {\n        itemName: \"\",\n        companyName: \"\",\n        warehouseName: \"\",\n        formula: \"\",\n        caliber: \"\",\n        packing: \"\",\n        price: \"\",\n        customerPrice: \"\",\n        quantity: \"\",\n        bonus: \"\",\n        totalPrice: computeTotalPrice(),\n      },\n    ];\n\n    axios\n      .post(\n        `${BASEURL}/users/sendemail`,\n        { cartItems: cartItemsToSend },\n        {\n          timeout: 25000,\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      )\n      .then(() => {\n        dispatch(statisticsOrders({ token }));\n        setShowLoadingModal(false);\n        setShowSuccessModal(true);\n        if (saveOrders) {\n          let obj = {\n            pharmacy: user._id,\n            warehouse: cartItems.filter(\n              (item) => item.warehouse.warehouse.name === warehouse\n            )[0].warehouse.warehouse._id,\n            items: cartItems\n              .filter((item) => item.warehouse.warehouse.name === warehouse)\n              .map((e) => {\n                return {\n                  item: e.item._id,\n                  qty: e.qty,\n                  bonus: e.bonus,\n                  bonusType: e.bonusType,\n                  price: e.item.price,\n                  customer_price: e.item.customer_price,\n                };\n              }),\n          };\n\n          dispatch(saveOrder({ obj, token }));\n          dispatch(setRefresh(true));\n        }\n      })\n      .catch((err) => {\n        setShowLoadingModal(false);\n        setShowFailedModal(true);\n      });\n  };\n\n  return (\n    <>\n      <h4 className={styles.header}>{warehouse}</h4>\n      <CartWarehouseTableHeader />\n      {cartItems\n        .filter((item) => item.warehouse.warehouse.name === warehouse)\n        .map((item, index) => (\n          <CartRow cartItem={item} key={index} />\n        ))}\n\n      <p className={styles.total_price}>\n        {t(\"total-invoice-price\")} {computeTotalPrice()}\n      </p>\n\n      <Button\n        text={t(\"send-order\")}\n        bgColor={Colors.SUCCEEDED_COLOR}\n        action={() => setShowConfirmSaveOrder(true)}\n      />\n\n      {showLoadingModal && <Loader allowCancel={false} />}\n\n      {showSuccessModal && (\n        <Modal\n          closeModal={() => {\n            setShowSuccessModal(false);\n            dispatch(resetCartItems(warehouse));\n          }}\n          header={t(\"send-order\")}\n          cancelLabel={t(\"cancel-label\")}\n          small={true}\n          green={true}\n        >\n          {t(\"send-order-succeeded\")}\n        </Modal>\n      )}\n\n      {showFailedModal && (\n        <Modal\n          closeModal={() => {\n            setShowFailedModal(false);\n          }}\n          header={t(\"send-order\")}\n          cancelLabel={t(\"cancel-label\")}\n          small={true}\n        >\n          {t(\"send-order-failed\")}\n        </Modal>\n      )}\n\n      {showConfirmSaveOrder && (\n        <Modal\n          closeModal={() => {\n            setShowConfirmSaveOrder(false);\n          }}\n          header={t(\"send-order\")}\n          cancelLabel={t(\"cancel-label\")}\n          okLabel={t(\"send-order\")}\n          okModal={sendOrderHandler}\n          small={true}\n        >\n          {t(\"confirm-save-order\")}\n        </Modal>\n      )}\n    </>\n  );\n}\n\nexport default CartWarehouse;\n","// YOU HAVE TO BE A PHARMACY USER TO SHOW THIS COMPONENT\n\n// this component page display the items you buy divided by warehouse name\n// if the cart is empty display an empty icon\n\n// this component page depends on the cartSlice that contains\n// 1- cartWarehouse: all warehouse that user buy medicine from it\n// 2- cartItems: all the item that user buy it\n\nimport React, { useEffect } from \"react\";\nimport { Redirect } from \"react-router\";\nimport { useTranslation } from \"react-i18next\";\n\n// redux-stuff\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../../redux/auth/authSlice\";\nimport { selectCartWarehouse } from \"../../redux/cart/cartSlice\";\n\n// components\nimport Header from \"../../components/header/header.component\";\nimport CartWarehouse from \"../../components/cart-warehouse/cart-warehouse.component\";\nimport NoContent from \"../../components/no-content/no-content.component\";\n\n// constants and colors\nimport { UserTypeConstants } from \"../../utils/constants\";\n\n// styles\nimport generalStyles from \"../../style.module.scss\";\n\nfunction CartPage({ onSelectedChange }) {\n  const { t } = useTranslation();\n\n  // selectors\n  // get the logged user from redux store\n  const user = useSelector(selectUser);\n  // get the cart warehouses from redux store\n  const cartWarehouse = useSelector(selectCartWarehouse);\n\n  useEffect(() => {\n    onSelectedChange();\n  }, []);\n\n  // if there is no logged user or user type is not pharmacy\n  // redirect to the main page\n  return user && user.type === UserTypeConstants.PHARMACY ? (\n    <div className={generalStyles.container}>\n      <Header>\n        <h2>{t(\"cart\")}</h2>\n      </Header>\n      {/* if cart contains an item or more */}\n      {cartWarehouse.length > 0 && (\n        <>\n          <div>\n            {cartWarehouse.map((w, index) => (\n              <CartWarehouse warehouse={w} key={index} />\n            ))}\n          </div>\n        </>\n      )}\n\n      {/* if the cart is empty */}\n      {cartWarehouse.length === 0 && (\n        <>\n          <NoContent msg={t(\"empty-cart\")} />\n        </>\n      )}\n    </div>\n  ) : (\n    <Redirect to=\"/signin\" />\n  );\n}\n\nexport default CartPage;\n"],"names":["warehouse","t","useTranslation","dispatch","useDispatch","isOnline","useSelector","selectOnlineStatus","selectUserData","token","user","cartItems","selectCartItems","saveOrders","selectSettings","settings","useState","showSuccessModal","setShowSuccessModal","showFailedModal","setShowFailedModal","showLoadingModal","setShowLoadingModal","showConfirmSaveOrder","setShowConfirmSaveOrder","computeTotalPrice","total","filter","item","name","forEach","qty","price","bonus","bonusType","OfferTypes","className","styles","map","index","cartItem","text","bgColor","Colors","action","allowCancel","closeModal","resetCartItems","header","cancelLabel","small","green","okLabel","okModal","cartItemsToSend","e","itemName","companyName","company","warehouseName","formula","caliber","packing","customerPrice","customer_price","quantity","totalPrice","axios","BASEURL","timeout","headers","Authorization","then","statisticsOrders","obj","pharmacy","_id","items","saveOrder","setRefresh","catch","err","changeOnlineMsg","onSelectedChange","selectUser","cartWarehouse","selectCartWarehouse","useEffect","type","UserTypeConstants","generalStyles","length","w","msg","to"],"sourceRoot":""}