{"version":3,"file":"static/js/830.d392d20d.chunk.js","mappings":"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","sources":["webpack://pharmacy-frontend/./src/components/notification-row/notification-row.module.scss?0ea7","components/notification-row/notification-row.component.jsx","pages/user-notification-page/user-notification-page.component.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"row_container\":\"notification-row_row_container__H9osv\",\"animateOpacity\":\"notification-row_animateOpacity__V2P55\",\"row_unread\":\"notification-row_row_unread__fyLJ-\",\"inner_container\":\"notification-row_inner_container__mY+Cj\",\"img\":\"notification-row_img__3B3IG\",\"image\":\"notification-row_image__ziJsf\",\"actions\":\"notification-row_actions__xTxlf\",\"delete\":\"notification-row_delete__Xs7yf\",\"unread\":\"notification-row_unread__wOU2r\",\"row\":\"notification-row_row__pwMuM\",\"body\":\"notification-row_body__FQWd+\",\"header\":\"notification-row_header__yfsGP\"};","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { useTranslation } from \"react-i18next\";\n\n// react-stuff\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { deleteNotification } from \"../../redux/notifications/notificationsSlice\";\nimport { selectUserData } from \"../../redux/auth/authSlice\";\nimport {\n  decreaseUnreadNotificationsCount,\n  setNotificationRead,\n} from \"../../redux/userNotifications/userNotificationsSlice\";\n\n// components\nimport Modal from \"../modal/modal.component\";\n\n// icons\nimport { RiDeleteBin5Fill } from \"react-icons/ri\";\nimport { BiImage } from \"react-icons/bi\";\nimport { BsCheck, BsFillCircleFill } from \"react-icons/bs\";\n\n// styles\nimport styles from \"./notification-row.module.scss\";\n\n// constants\nimport { Colors, SERVER_URL, UserTypeConstants } from \"../../utils/constants\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\n\nfunction NotificationRow({ notification, index, setSuccessDeletingMsg }) {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  // selectors\n  const { token, user } = useSelector(selectUserData);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const showNotificationDetails = () => {\n    if (\n      user.type !== UserTypeConstants.ADMIN &&\n      !notification.users.includes(user._id)\n    ) {\n      dispatch(\n        setNotificationRead({ token, notificationId: notification._id })\n      );\n      dispatch(decreaseUnreadNotificationsCount());\n    }\n\n    history.push(`/notification/${notification._id}`);\n  };\n\n  const deleteNotificationHandler = () => {\n    setShowDeleteModal(false);\n    dispatch(deleteNotification({ id: notification._id, token }))\n      .then(unwrapResult)\n      .then(() => {\n        setSuccessDeletingMsg(\"delete-notification-msg\");\n      });\n  };\n\n  return (\n    <div\n      className={[\n        styles.row_container,\n        !notification.users.includes(user._id) &&\n        user.type !== UserTypeConstants.ADMIN\n          ? styles.row_unread\n          : \"\",\n      ].join(\" \")}\n      style={{\n        animationDuration: (0.3 * index) / 10 + \"s\",\n      }}\n    >\n      <div className={styles.img}>\n        {notification.logo_url !== \"\" ? (\n          <img\n            className={styles.image}\n            src={`${SERVER_URL}/${notification.logo_url}`}\n            alt=\"thumb\"\n          />\n        ) : (\n          <>\n            <BiImage size={64} color={Colors.SECONDARY_COLOR} />\n          </>\n        )}\n      </div>\n\n      <div className={styles.inner_container} onClick={showNotificationDetails}>\n        <div className={styles.row}>\n          <label>{t(\"header\")}</label>\n          <p className={styles.header}>{notification.header}</p>\n        </div>\n        <div className={styles.row}>\n          <label>{t(\"body\")}</label>\n          <p className={styles.body}>{notification.body}</p>\n        </div>\n      </div>\n\n      {user.type === UserTypeConstants.ADMIN && (\n        <div\n          className={styles.delete}\n          onClick={() => {\n            setShowDeleteModal(true);\n          }}\n        >\n          <RiDeleteBin5Fill size={24} />\n        </div>\n      )}\n\n      {showDeleteModal && (\n        <Modal\n          header=\"delete-notification\"\n          cancelLabel=\"close-label\"\n          okLabel=\"ok-label\"\n          closeModal={() => {\n            setShowDeleteModal(false);\n          }}\n          small={true}\n          okModal={deleteNotificationHandler}\n          color={Colors.FAILED_COLOR}\n        >\n          <p>{t(\"delete-notification-confirm-msg\")}</p>\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nexport default NotificationRow;\n\n// {user.type !== UserTypeConstants.ADMIN && (\n//   <div className={styles.unread}>\n//     {notification.users.includes(user._id) ? (\n//       <BsCheck color={Colors.SUCCEEDED_COLOR} size={24} />\n//     ) : (\n//       <BsFillCircleFill color={Colors.SECONDARY_COLOR} size={24} />\n//     )}\n//   </div>\n// )}\n","import React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport ReactLoading from \"react-loading\";\n\n// components\nimport Button from \"../../components/button/button.component\";\nimport NoContent from \"../../components/no-content/no-content.component\";\nimport NotificationRow from \"../../components/notification-row/notification-row.component\";\nimport Icon from \"../../components/action-icon/action-icon.component\";\n\n// redux stuff\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectToken } from \"../../redux/auth/authSlice\";\nimport {\n  changeOnlineMsg,\n  selectOnlineStatus,\n} from \"../../redux/online/onlineSlice\";\nimport { useTranslation } from \"react-i18next\";\nimport Header from \"../../components/header/header.component\";\nimport {\n  getAllNotifications,\n  getUnreadNotification,\n  resetNotifications,\n  resetNotificationsData,\n  selectUserNotifications,\n  setPage,\n  setRefresh,\n} from \"../../redux/userNotifications/userNotificationsSlice\";\n\n// icons\nimport { RiRefreshLine } from \"react-icons/ri\";\n\n// styles\nimport generalStyles from \"../../style.module.scss\";\n\n// constants\nimport { Colors } from \"../../utils/constants\";\n\nfunction UserNotificationPage({ onSelectedChange }) {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const token = useSelector(selectToken);\n  const isOnline = useSelector(selectOnlineStatus);\n  const {\n    status,\n    error,\n    page,\n    count,\n    userNotifications,\n    refresh,\n    forceRefresh,\n  } = useSelector(selectUserNotifications);\n\n  const handleSearch = (page) => {\n    if (!isOnline) {\n      dispatch(changeOnlineMsg());\n      return;\n    }\n\n    if (page === 1) {\n      dispatch(resetNotificationsData());\n    }\n    dispatch(setPage(page));\n    dispatch(getAllNotifications({ token }));\n  };\n\n  const handleMoreResult = () => {\n    if (!isOnline) {\n      dispatch(changeOnlineMsg());\n      return;\n    }\n\n    handleSearch(page + 1);\n  };\n\n  const refreshHandler = () => {\n    dispatch(setRefresh(true));\n    dispatch(getUnreadNotification({ token }));\n  };\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n\n    onSelectedChange();\n\n    if (refresh || forceRefresh) {\n      handleSearch(1);\n    }\n  }, [refresh, forceRefresh]);\n\n  return (\n    <div className={generalStyles.container}>\n      <Header>\n        <h2>{t(\"nav-notifications\")}</h2>\n\n        <div\n          style={{\n            position: \"absolute\",\n            top: \"16px\",\n            left: \"42px\",\n          }}\n        >\n          {/* Refresh */}\n          <Icon\n            selected={false}\n            foreColor={Colors.SECONDARY_COLOR}\n            tooltip={t(\"refresh-tooltip\")}\n            onclick={() => {\n              refreshHandler();\n            }}\n            icon={() => <RiRefreshLine />}\n          />\n        </div>\n      </Header>\n\n      {/* <Notifications /> */}\n\n      <div>\n        {userNotifications.map((note, index) => (\n          <NotificationRow key={note._id} notification={note} index={index} />\n        ))}\n      </div>\n\n      {userNotifications.length === 0 && status !== \"loading\" && (\n        <NoContent msg={t(\"no-notifications\")} />\n      )}\n\n      {status === \"loading\" && (\n        <div className={generalStyles.flex_container}>\n          <ReactLoading color={Colors.SECONDARY_COLOR} type=\"cylon\" />\n        </div>\n      )}\n\n      {userNotifications.length < count && (\n        <Button\n          text={t(\"more\")}\n          action={handleMoreResult}\n          bgColor={Colors.SECONDARY_COLOR}\n        />\n      )}\n\n      {userNotifications.length === count &&\n        status !== \"loading\" &&\n        count !== 0 && (\n          <p\n            className={[generalStyles.center, generalStyles.fc_secondary].join(\n              \" \"\n            )}\n          >\n            {t(\"no-more\")}\n          </p>\n        )}\n    </div>\n  );\n}\n\nexport default UserNotificationPage;\n"],"names":["notification","index","setSuccessDeletingMsg","t","useTranslation","history","useHistory","dispatch","useDispatch","useSelector","selectUserData","token","user","useState","showDeleteModal","setShowDeleteModal","className","styles","users","includes","_id","type","UserTypeConstants","join","style","animationDuration","logo_url","src","SERVER_URL","alt","size","color","Colors","onClick","setNotificationRead","notificationId","decreaseUnreadNotificationsCount","push","header","body","cancelLabel","okLabel","closeModal","small","okModal","deleteNotification","id","then","unwrapResult","onSelectedChange","selectToken","isOnline","selectOnlineStatus","selectUserNotifications","status","page","error","count","userNotifications","refresh","forceRefresh","handleSearch","resetNotificationsData","setPage","getAllNotifications","changeOnlineMsg","useEffect","window","scrollTo","generalStyles","position","top","left","selected","foreColor","tooltip","onclick","setRefresh","getUnreadNotification","icon","map","note","length","msg","text","action","bgColor"],"sourceRoot":""}