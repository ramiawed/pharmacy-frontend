{"version":3,"file":"static/js/1882.a866d4f1.chunk.js","mappings":"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","sources":["webpack://pharmacy-frontend/./src/components/medicine-row/medicine-row.module.scss?6c37","components/medicine-row/medicine-row.component.jsx","pages/saved-items-page/saved-items-page.component.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"small_font\":\"medicine-row_small_font__+8ZUj\",\"item_row\":\"medicine-row_item_row__fiqmL\",\"first_row\":\"medicine-row_first_row__zInzm\",\"nameDiv\":\"medicine-row_nameDiv__yCJbp\",\"nameAr\":\"medicine-row_nameAr__PH3PI\",\"item_name\":\"medicine-row_item_name__TskTd\",\"icon\":\"medicine-row_icon__0jmIa\",\"second_row\":\"medicine-row_second_row__xXAjz\",\"item_company\":\"medicine-row_item_company__fgt3Z\",\"item_price\":\"medicine-row_item_price__3+zHe\",\"item_customer_price\":\"medicine-row_item_customer_price__Ez3J+\",\"separator\":\"medicine-row_separator__7e7N1\",\"details_row\":\"medicine-row_details_row__Xo7IX\",\"label\":\"medicine-row_label__qFkQg\",\"value\":\"medicine-row_value__AY-+G\",\"offer_div\":\"medicine-row_offer_div__xsflQ\",\"loading\":\"medicine-row_loading__y9F-W\",\"loading-move\":\"medicine-row_loading-move__QXYWk\",\"ribbon_2\":\"medicine-row_ribbon_2__Jed9U\"};","import React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\n\n// react-redux stuff\nimport { addStatistics } from \"../../redux/statistics/statisticsSlice\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectUserData } from \"../../redux/auth/authSlice\";\nimport {\n  changeOnlineMsg,\n  selectOnlineStatus,\n} from \"../../redux/online/onlineSlice\";\nimport {\n  addFavoriteItem,\n  removeFavoriteItem,\n  selectFavoritesItems,\n} from \"../../redux/favorites/favoritesSlice\";\nimport {\n  addItemToWarehouse,\n  removeItemFromWarehouse,\n} from \"../../redux/medicines/medicinesSlices\";\n\n// components\nimport AddToCartModal from \"../add-to-cart-modal/add-to-cart-modal.component\";\nimport Icon from \"../action-icon/action-icon.component\";\nimport Toast from \"../toast/toast.component\";\n\n// react icons\nimport { AiFillStar, AiOutlineStar } from \"react-icons/ai\";\nimport { GiShoppingCart } from \"react-icons/gi\";\nimport { RiDeleteBin5Fill } from \"react-icons/ri\";\nimport { MdAddCircle, MdExpandLess, MdExpandMore } from \"react-icons/md\";\nimport { VscLoading } from \"react-icons/vsc\";\nimport { BsFillBookmarkPlusFill, BsFillBookmarkDashFill } from \"react-icons/bs\";\n\n// styles\nimport styles from \"./medicine-row.module.scss\";\n\n// constants and utils\nimport {\n  checkItemExistsInWarehouse,\n  checkOffer,\n  Colors,\n  UserTypeConstants,\n} from \"../../utils/constants\";\nimport {\n  addSavedItem,\n  removeSavedItem,\n  selectSavedItems,\n} from \"../../redux/savedItems/savedItemsSlice\";\n\nfunction MedicineRow({ item }) {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  // selectors\n  const isOnline = useSelector(selectOnlineStatus);\n  const { user, token } = useSelector(selectUserData);\n  const favoritesItems = useSelector(selectFavoritesItems);\n  const { savedItems } = useSelector(selectSavedItems);\n\n  // own state\n  const [showModal, setShowModal] = useState(false);\n  const [changeFavoriteLoading, setChangeFavoriteLoading] = useState(false);\n  const [changeSaveItemLoading, setChangeSaveItemLoading] = useState(false);\n  const [changeAddToWarehouseLoading, setChangeAddToWarehouseLoading] =\n    useState(false);\n  const [addItemToCart, setAddItemToCart] = useState(\"\");\n  const [expanded, setExpanded] = useState(false);\n\n  // method to handle add company to user's favorite\n  const addItemToFavoriteItemsHandler = (e) => {\n    // check the internet connection\n    if (!isOnline) {\n      dispatch(changeOnlineMsg());\n      return;\n    }\n\n    setChangeFavoriteLoading(true);\n\n    dispatch(addFavoriteItem({ obj: { favoriteItemId: item._id }, token }))\n      .then(unwrapResult)\n      .then(() => {\n        dispatch(\n          addStatistics({\n            obj: {\n              sourceUser: user._id,\n              targetItem: item._id,\n              action: \"item-added-to-favorite\",\n            },\n            token,\n          })\n        );\n        setChangeFavoriteLoading(false);\n      })\n      .catch(() => {\n        setChangeFavoriteLoading(false);\n      });\n  };\n\n  // method to handle remove company from user's favorite\n  const removeItemFromFavoritesItemsHandler = (e) => {\n    // check the internet connection\n    if (!isOnline) {\n      dispatch(changeOnlineMsg());\n      return;\n    }\n\n    setChangeFavoriteLoading(true);\n\n    dispatch(removeFavoriteItem({ obj: { favoriteItemId: item._id }, token }))\n      .then(unwrapResult)\n      .then(() => {\n        setChangeFavoriteLoading(false);\n      })\n      .catch(() => {\n        setChangeFavoriteLoading(false);\n      });\n  };\n\n  // method to handle add item to warehouse\n  const addItemToWarehouseHandler = (e) => {\n    // check the internet connection\n    if (!isOnline) {\n      dispatch(changeOnlineMsg());\n      return;\n    }\n\n    setChangeAddToWarehouseLoading(true);\n\n    dispatch(\n      addItemToWarehouse({\n        obj: {\n          itemId: item._id,\n          warehouseId: user._id,\n          city: user.city,\n        },\n        token,\n      })\n    )\n      .then(unwrapResult)\n      .then(() => {\n        setChangeAddToWarehouseLoading(false);\n      })\n      .catch(() => {\n        setChangeAddToWarehouseLoading(false);\n      });\n  };\n\n  // method to handle remove item from warehouse\n  const removeItemFromWarehouseHandler = (e) => {\n    // check the internet connection\n    if (!isOnline) {\n      dispatch(changeOnlineMsg());\n      return;\n    }\n\n    setChangeAddToWarehouseLoading(true);\n\n    dispatch(\n      removeItemFromWarehouse({\n        obj: {\n          itemId: item._id,\n          warehouseId: user._id,\n          city: user.city,\n        },\n        token,\n      })\n    )\n      .then(unwrapResult)\n      .then(() => {\n        setChangeAddToWarehouseLoading(false);\n      })\n      .catch(() => {\n        setChangeAddToWarehouseLoading(false);\n      });\n  };\n\n  // method to handle add item to user's savedItem\n  const addItemToSavedItemsHandler = (e) => {\n    // check the internet connection\n    if (!isOnline) {\n      dispatch(changeOnlineMsg());\n      return;\n    }\n\n    setChangeSaveItemLoading(true);\n\n    dispatch(addSavedItem({ obj: { savedItemId: item._id }, token }))\n      .then(unwrapResult)\n      .then(() => {\n        setChangeSaveItemLoading(false);\n      })\n      .catch(() => {\n        setChangeSaveItemLoading(false);\n      });\n  };\n\n  const removeItemFromSavedItemsHandler = (e) => {\n    // check the internet connection\n    if (!isOnline) {\n      dispatch(changeOnlineMsg());\n      return;\n    }\n\n    setChangeSaveItemLoading(true);\n\n    dispatch(removeSavedItem({ obj: { savedItemId: item._id }, token }))\n      .then(unwrapResult)\n      .then(() => {\n        setChangeSaveItemLoading(false);\n      })\n      .catch(() => {\n        setChangeSaveItemLoading(false);\n      });\n  };\n\n  const rowClickHandler = () => {\n    if (\n      user.type === UserTypeConstants.PHARMACY ||\n      user.type === UserTypeConstants.GUEST\n    ) {\n      dispatch(\n        addStatistics({\n          obj: {\n            sourceUser: user._id,\n            targetItem: item._id,\n            action: \"choose-item\",\n          },\n          token,\n        })\n      );\n    }\n    history.push(\"/item\", {\n      from: user.type,\n      type: \"info\",\n      allowAction: false,\n      itemId: item._id,\n      companyId: item.company._id,\n      warehouseId: user.type === UserTypeConstants.WAREHOUSE ? user._id : null,\n    });\n  };\n\n  // render method\n  return (\n    <>\n      <div className={styles.item_row} onClick={rowClickHandler}>\n        {checkOffer(item, user) && <div className={styles.offer_div}></div>}\n        <div className={styles.first_row}>\n          <label className={[styles.item_name].join(\" \")}>\n            <label\n              className={styles.icon}\n              onClick={(e) => {\n                setExpanded(!expanded);\n                e.stopPropagation();\n              }}\n            >\n              {expanded ? <MdExpandLess /> : <MdExpandMore />}\n            </label>\n            <div className={styles.nameDiv}>\n              <label>{item.name}</label>\n              <label className={styles.nameAr}>{item.nameAr}</label>\n            </div>\n          </label>\n\n          {changeAddToWarehouseLoading ? (\n            <Icon\n              text={t(\"\")}\n              onclick={() => {}}\n              foreColor={Colors.SECONDARY_COLOR}\n              icon={() => <VscLoading className={styles.loading} />}\n            />\n          ) : (\n            user.type === UserTypeConstants.WAREHOUSE &&\n            (item.warehouses.map((w) => w.warehouse._id).includes(user._id) ? (\n              <Icon\n                text={t(\"remove-from-warehouse-tooltip\")}\n                onclick={removeItemFromWarehouseHandler}\n                foreColor={Colors.FAILED_COLOR}\n                icon={() => <RiDeleteBin5Fill size={24} />}\n              />\n            ) : (\n              <Icon\n                text={t(\"add-to-warehouse-tooltip\")}\n                onclick={addItemToWarehouseHandler}\n                foreColor={Colors.SUCCEEDED_COLOR}\n                icon={() => <MdAddCircle size={24} />}\n              />\n            ))\n          )}\n\n          {user.type === UserTypeConstants.PHARMACY ? (\n            checkItemExistsInWarehouse(item, user) ? (\n              <Icon\n                text={t(\"add-to-cart\")}\n                onclick={() => setShowModal(true)}\n                foreColor={Colors.SUCCEEDED_COLOR}\n                icon={() => <GiShoppingCart size={24} />}\n              />\n            ) : changeSaveItemLoading ? (\n              <Icon\n                text={t(\"\")}\n                onclick={() => {}}\n                foreColor={Colors.YELLOW_COLOR}\n                icon={() => <VscLoading className={styles.loading} />}\n              />\n            ) : savedItems.map((si) => si._id).includes(item._id) ? (\n              <Icon\n                tooltip={t(\"remove-item-from-saved-items-tooltip\")}\n                onclick={removeItemFromSavedItemsHandler}\n                foreColor={Colors.FAILED_COLOR}\n                icon={() => <BsFillBookmarkDashFill size={24} />}\n              />\n            ) : (\n              <Icon\n                tooltip={t(\"add-item-to-saved-items-tooltip\")}\n                onclick={addItemToSavedItemsHandler}\n                foreColor={Colors.SUCCEEDED_COLOR}\n                icon={() => <BsFillBookmarkPlusFill size={24} />}\n              />\n            )\n          ) : (\n            <></>\n          )}\n\n          {changeFavoriteLoading ? (\n            <Icon\n              text={t(\"\")}\n              onclick={() => {}}\n              foreColor={Colors.YELLOW_COLOR}\n              icon={() => <VscLoading className={styles.loading} />}\n            />\n          ) : favoritesItems\n              .map((favorite) => favorite._id)\n              .includes(item._id) ? (\n            <Icon\n              text={t(\"remove-from-favorite-tooltip\")}\n              onclick={removeItemFromFavoritesItemsHandler}\n              foreColor={Colors.YELLOW_COLOR}\n              icon={() => <AiFillStar size={24} />}\n            />\n          ) : (\n            <Icon\n              text={t(\"add-to-favorite-tooltip\")}\n              onclick={addItemToFavoriteItemsHandler}\n              foreColor={Colors.YELLOW_COLOR}\n              icon={() => <AiOutlineStar size={24} />}\n            />\n          )}\n        </div>\n\n        <div className={styles.second_row}>\n          <label className={styles.item_company}>{item.company.name}</label>\n          {user.type !== UserTypeConstants.GUEST && (\n            <label className={styles.item_price}>{item.price}</label>\n          )}\n          <label className={styles.item_customer_price}>\n            {item.customer_price}\n          </label>\n        </div>\n\n        {expanded && (\n          <>\n            <div className={styles.separator}></div>\n            <div className={styles.details_row}>\n              <label className={styles.label}>{t(\"item-packing\")}:</label>\n              <label className={styles.value}>{item.packing}</label>\n            </div>\n            <div className={styles.details_row}>\n              <label className={styles.label}>{t(\"item-caliber\")}:</label>\n              <label className={styles.value}>{item.caliber}</label>\n            </div>\n            <div className={styles.details_row}>\n              <label className={styles.label}>{t(\"item-composition\")}:</label>\n              <label className={styles.value}>{item.composition}</label>\n            </div>\n          </>\n        )}\n      </div>\n\n      {showModal && (\n        <AddToCartModal\n          item={item}\n          close={() => setShowModal(false)}\n          setAddItemToCartMsg={setAddItemToCart}\n          fromSavedItems={true}\n        />\n      )}\n\n      {addItemToCart.length > 0 && (\n        <Toast\n          bgColor={Colors.SUCCEEDED_COLOR}\n          foreColor=\"#fff\"\n          toastText={t(addItemToCart)}\n          actionAfterTimeout={() => setAddItemToCart(\"\")}\n        />\n      )}\n    </>\n  );\n}\n\nexport default MedicineRow;\n","import React, { useEffect } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\n\n// components\nimport Header from \"../../components/header/header.component\";\nimport Icon from \"../../components/action-icon/action-icon.component\";\nimport MedicineRow from \"../../components/medicine-row/medicine-row.component\";\nimport NoContent from \"../../components/no-content/no-content.component\";\nimport ActionLoader from \"../../components/action-loader/action-loader.component\";\n\n// redux stuff\nimport { selectUserData } from \"../../redux/auth/authSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getSavedItems,\n  resetSavedItems,\n  selectSavedItems,\n} from \"../../redux/savedItems/savedItemsSlice\";\n\n// icons\nimport { RiRefreshLine } from \"react-icons/ri\";\n\n// styles\nimport generalStyles from \"../../style.module.scss\";\n\n// constants\nimport { Colors, UserTypeConstants } from \"../../utils/constants\";\n\nfunction SavedItemsPage({ onSelectedChange }) {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { user, token } = useSelector(selectUserData);\n  const { savedItems, status } = useSelector(selectSavedItems);\n\n  const refreshHandler = () => {\n    dispatch(resetSavedItems);\n    dispatch(getSavedItems({ token }));\n  };\n\n  useEffect(() => {\n    onSelectedChange();\n  }, []);\n\n  return user && user.type === UserTypeConstants.PHARMACY ? (\n    <>\n      <Header>\n        <h2>{t(\"saved-items\")}</h2>\n        <div className={generalStyles.refresh_icon}>\n          <Icon\n            selected={false}\n            foreColor={Colors.WHITE_COLOR}\n            tooltip={t(\"refresh-tooltip\")}\n            onclick={refreshHandler}\n            icon={() => <RiRefreshLine />}\n          />\n        </div>\n      </Header>\n      <div\n        className={generalStyles.container_with_header}\n        style={{ paddingTop: \"10px\" }}\n      >\n        {savedItems.map((si) => (\n          <MedicineRow key={si._id} item={si} />\n        ))}\n      </div>\n\n      {savedItems.length === 0 && status !== \"loading\" && (\n        <NoContent msg={t(\"no-saved-items\")} />\n      )}\n\n      {status === \"loading\" && <ActionLoader allowCancel={false} />}\n    </>\n  ) : (\n    <Redirect to=\"/signin\" />\n  );\n}\n\nexport default SavedItemsPage;\n"],"names":["item","t","useTranslation","history","useHistory","dispatch","useDispatch","isOnline","useSelector","selectOnlineStatus","selectUserData","user","token","favoritesItems","selectFavoritesItems","savedItems","selectSavedItems","useState","showModal","setShowModal","changeFavoriteLoading","setChangeFavoriteLoading","changeSaveItemLoading","setChangeSaveItemLoading","changeAddToWarehouseLoading","setChangeAddToWarehouseLoading","addItemToCart","setAddItemToCart","expanded","setExpanded","className","styles","onClick","type","UserTypeConstants","addStatistics","obj","sourceUser","_id","targetItem","action","push","from","allowAction","itemId","companyId","company","warehouseId","checkOffer","join","e","stopPropagation","name","nameAr","text","onclick","foreColor","Colors","icon","warehouses","map","w","warehouse","includes","removeItemFromWarehouse","city","then","unwrapResult","catch","changeOnlineMsg","size","addItemToWarehouse","checkItemExistsInWarehouse","si","tooltip","removeSavedItem","savedItemId","addSavedItem","favorite","removeFavoriteItem","favoriteItemId","addFavoriteItem","price","customer_price","packing","caliber","composition","close","setAddItemToCartMsg","fromSavedItems","length","bgColor","toastText","actionAfterTimeout","onSelectedChange","status","useEffect","generalStyles","selected","resetSavedItems","getSavedItems","style","paddingTop","msg","allowCancel","to"],"sourceRoot":""}