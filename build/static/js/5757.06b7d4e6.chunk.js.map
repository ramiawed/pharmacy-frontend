{"version":3,"file":"static/js/5757.06b7d4e6.chunk.js","mappings":"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","sources":["components/warehouses-search-engine/warehouses-search-engine.component.jsx","components/warehouses-actions/warehouses-actions.component.jsx","pages/warehouses-page/warehouses-page.component.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\n// redux stuff\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  changeSearchCity,\n  changeSearchName,\n  selectWarehousesPageState,\n} from \"../../redux/warehouse/warehousesSlice\";\nimport { selectUser } from \"../../redux/auth/authSlice\";\n\n// components\nimport ChooserContainer from \"../chooser-container/chooser-container.component\";\nimport SearchContainer from \"../search-container/search-container.component\";\nimport ChooseValue from \"../choose-value/choose-value.component\";\nimport SearchInput from \"../search-input/search-input.component\";\n\n// constants and utils\nimport { CitiesName, UserTypeConstants } from \"../../utils/constants\";\n\nfunction WarehousesSearchEngine({ onSearch, keyUpHandler }) {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const user = useSelector(selectUser);\n\n  const { searchName, searchCity } = useSelector(selectWarehousesPageState);\n\n  const [showChooseCityModal, setShowChooseCityModal] = useState(false);\n\n  // guest options and its change handler\n  const citiesOptions = [\n    { value: CitiesName.ALL, label: t(\"all cities\") },\n    { value: CitiesName.ALEPPO, label: t(\"aleppo\") },\n    { value: CitiesName.DAMASCUS, label: t(\"damascus\") },\n    { value: CitiesName.DARAA, label: t(\"daraa\") },\n    { value: CitiesName.DEIR_EZ_ZOR, label: t(\"deir_ez_zor\") },\n    { value: CitiesName.HAMA, label: t(\"hama\") },\n    { value: CitiesName.AL_HASAKAH, label: t(\"al_hasakah\") },\n    { value: CitiesName.HOMS, label: t(\"homs\") },\n    { value: CitiesName.IDLIB, label: t(\"idlib\") },\n    { value: CitiesName.LATAKIA, label: t(\"latakia\") },\n    { value: CitiesName.QUNEITRA, label: t(\"quneitra\") },\n    { value: CitiesName.RAQQA, label: t(\"raqqa\") },\n    { value: CitiesName.AL_SUWAYDA, label: t(\"al_suwayda\") },\n    { value: CitiesName.TARTUS, label: t(\"tartus\") },\n    {\n      value: CitiesName.DAMASCUS_COUNTRYSIDE,\n      label: t(\"damascus_countryside\"),\n    },\n  ];\n\n  const isThereSearch =\n    searchName.trim().length > 0 || searchCity !== CitiesName.ALL;\n\n  return (\n    <>\n      <SearchContainer searchEngineAlert={isThereSearch}>\n        <SearchInput\n          label=\"name\"\n          id=\"search-name\"\n          type=\"text\"\n          value={searchName}\n          onchange={(e) => {\n            dispatch(changeSearchName(e.target.value));\n          }}\n          placeholder=\"search by warehouse name\"\n          resetField={() => dispatch(changeSearchName(\"\"))}\n        />\n\n        {user.type === UserTypeConstants.ADMIN && (\n          <ChooserContainer\n            onclick={() => setShowChooseCityModal(true)}\n            selectedValue={searchCity}\n            label=\"city\"\n            styleForSearch={true}\n            withoutBorder={true}\n          />\n        )}\n      </SearchContainer>\n\n      {showChooseCityModal && (\n        <ChooseValue\n          headerTitle=\"city\"\n          close={() => {\n            setShowChooseCityModal(false);\n          }}\n          values={citiesOptions}\n          defaultValue={searchCity}\n          chooseHandler={(value) => {\n            dispatch(changeSearchCity(value));\n            // onSearch();\n          }}\n        />\n      )}\n    </>\n  );\n}\n\nexport default WarehousesSearchEngine;\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\n\n// redux stuff\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  changeDisplayType,\n  changeSearchCity,\n  changeSearchName,\n  selectWarehousesPageState,\n} from \"../../redux/warehouse/warehousesSlice\";\nimport { selectUser } from \"../../redux/auth/authSlice\";\n\n// components\nimport ActionBar from \"../action-bar/action-bar.component\";\nimport Icon from \"../icon/icon.component\";\n\n// react icons\nimport { RiRefreshLine } from \"react-icons/ri\";\nimport { AiFillAppstore } from \"react-icons/ai\";\nimport { FaListUl } from \"react-icons/fa\";\nimport { VscClearAll } from \"react-icons/vsc\";\nimport { IoMdArrowRoundBack } from \"react-icons/io\";\n\n// constants and utils\nimport { CitiesName, Colors, UserTypeConstants } from \"../../utils/constants\";\n\nfunction WarehousesActions({ refreshHandler }) {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const user = useSelector(selectUser);\n\n  const { searchName, searchCity, displayType } = useSelector(\n    selectWarehousesPageState\n  );\n\n  // select card as display type\n  const selectCardDisplayTypeHandler = () => {\n    dispatch(changeDisplayType(\"card\"));\n  };\n\n  // select list as display type\n  const selectListDisplayTypeHandler = () => {\n    dispatch(changeDisplayType(\"list\"));\n  };\n\n  return (\n    <>\n      {/* action's buttons */}\n      <ActionBar>\n        {/* refresh */}\n        <Icon\n          foreColor={Colors.MAIN_COLOR}\n          tooltip={t(\"refresh\")}\n          onclick={refreshHandler}\n          icon={() => <RiRefreshLine />}\n          withBackground={true}\n        />\n\n        {/* clear search filter */}\n        {(searchName.length > 0 ||\n          (user.type === UserTypeConstants.ADMIN &&\n            searchCity !== CitiesName.ALL)) && (\n          <Icon\n            selected={false}\n            foreColor={Colors.MAIN_COLOR}\n            tooltip={t(\"clear filter\")}\n            onclick={() => {\n              dispatch(changeSearchName(\"\"));\n              dispatch(changeSearchCity(CitiesName.ALL));\n            }}\n            icon={() => <VscClearAll />}\n            withBackground={true}\n          />\n        )}\n\n        {/* display card option */}\n        <Icon\n          foreColor={\n            displayType === \"card\" ? Colors.SUCCEEDED_COLOR : Colors.MAIN_COLOR\n          }\n          tooltip={t(\"show as card\")}\n          onclick={selectCardDisplayTypeHandler}\n          icon={() => <AiFillAppstore />}\n          withBackground={true}\n        />\n\n        {/* display list option */}\n        <Icon\n          foreColor={\n            displayType === \"list\" ? Colors.SUCCEEDED_COLOR : Colors.MAIN_COLOR\n          }\n          tooltip={t(\"show as list\")}\n          onclick={selectListDisplayTypeHandler}\n          icon={() => <FaListUl />}\n          withBackground={true}\n        />\n\n        <Icon\n          withBackground={true}\n          tooltip={t(\"back\")}\n          onclick={() => {\n            history.goBack();\n          }}\n          icon={() => <IoMdArrowRoundBack />}\n          foreColor={Colors.MAIN_COLOR}\n        />\n      </ActionBar>\n    </>\n  );\n}\n\nexport default WarehousesActions;\n","import React, { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Redirect } from \"react-router\";\nimport { useHistory } from \"react-router-dom\";\n\n// components\nimport WarehousesSearchEngine from \"../../components/warehouses-search-engine/warehouses-search-engine.component\";\nimport MainContentContainer from \"../../components/main-content-container/main-content-container.component\";\nimport WarehousesActions from \"../../components/warehouses-actions/warehouses-actions.component\";\nimport CenterContainer from \"../../components/center-container/center-container.component\";\nimport ButtonWithIcon from \"../../components/button-with-icon/button-with-icon.component\";\nimport NoMoreResult from \"../../components/no-more-result/no-more-result.component\";\nimport ResultsCount from \"../../components/results-count/results-count.component\";\nimport PartnerCard from \"../../components/partner-card/partner-card.component\";\nimport CylonLoader from \"../../components/cylon-loader/cylon-loader.component\";\nimport PartnerRow from \"../../components/partner-row/partner-row.component\";\nimport NoContent from \"../../components/no-content/no-content.component\";\nimport ActionBar from \"../../components/action-bar/action-bar.component\";\nimport Toast from \"../../components/toast/toast.component\";\n\n// redux stuff\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectUserData } from \"../../redux/auth/authSlice\";\nimport {\n  getWarehouses,\n  resetWarehouse,\n  selectWarehouses,\n  selectWarehousesPageState,\n  changeSearchCity,\n} from \"../../redux/warehouse/warehousesSlice\";\nimport {\n  getFavorites,\n  resetFavorites,\n  selectFavorites,\n} from \"../../redux/favorites/favoritesSlice\";\nimport { selectOnlineStatus } from \"../../redux/online/onlineSlice\";\n\n// constants and utils\nimport {\n  CitiesName,\n  Colors,\n  UserTypeConstants,\n} from \"../../utils/constants.js\";\n\n// icons\nimport { CgMoreVertical } from \"react-icons/cg\";\n\n// handlers\nimport {\n  addPartnerToFavoriteHandler,\n  partnerRowClickHandler,\n  removePartnerFromFavoriteHandler,\n} from \"../../utils/handlers\";\n\nfunction WarehousePage({ onSelectedChange }) {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  // selectors\n  const isOnline = useSelector(selectOnlineStatus);\n  const { token, user } = useSelector(selectUserData);\n  const { warehouses, count, status } = useSelector(selectWarehouses);\n  const { searchName, searchCity, displayType } = useSelector(\n    selectWarehousesPageState\n  );\n\n  let filteredWarehouses = warehouses.filter((warehouse) => {\n    if (searchName.trim().length > 0) {\n      return warehouse.name.includes(searchName.trim());\n    }\n    return true;\n  });\n\n  filteredWarehouses = filteredWarehouses.filter((warehouse) => {\n    if (searchCity !== CitiesName.ALL) {\n      return warehouse.city === searchCity;\n    }\n    return true;\n  });\n\n  // select favorites from favoriteSlice\n  const { error: favoriteError } = useSelector(selectFavorites);\n\n  const [favoritesError, setFavoritesError] = useState(favoriteError);\n\n  // handle search\n  const searchHandler = () => {\n    if (\n      user.type === UserTypeConstants.PHARMACY ||\n      user.type === UserTypeConstants.GUEST ||\n      user.type === UserTypeConstants.WAREHOUSE\n    ) {\n      dispatch(changeSearchCity(user.city));\n    }\n\n    dispatch(\n      getWarehouses({\n        token,\n      })\n    );\n  };\n\n  const refreshHandler = () => {\n    dispatch(resetFavorites());\n    dispatch(getFavorites({ token }));\n    dispatch(resetWarehouse());\n    searchHandler();\n  };\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n\n    onSelectedChange();\n  }, []);\n\n  return user &&\n    (user.type === UserTypeConstants.ADMIN ||\n      user.type === UserTypeConstants.PHARMACY) ? (\n    <>\n      <WarehousesSearchEngine />\n      <MainContentContainer>\n        <WarehousesActions refreshHandler={refreshHandler} />\n\n        {filteredWarehouses.length > 0 && (\n          <ResultsCount\n            count={filteredWarehouses.length}\n            label={t(\"warehouses count\")}\n          />\n        )}\n\n        {/* display as list */}\n        {displayType === \"list\" && (\n          <CenterContainer>\n            {filteredWarehouses.map((warehouse) => (\n              <PartnerRow\n                key={warehouse._id}\n                partner={warehouse}\n                addPartnerToFavoriteHandler={() =>\n                  addPartnerToFavoriteHandler(\n                    warehouse,\n                    isOnline,\n                    dispatch,\n                    token,\n                    user\n                  )\n                }\n                removePartnerFromFavoriteHandler={() => {\n                  removePartnerFromFavoriteHandler(\n                    warehouse,\n                    isOnline,\n                    dispatch,\n                    token\n                  );\n                }}\n                partnerRowClickHandler={(allowShowingWarehouseMedicines) =>\n                  partnerRowClickHandler(\n                    warehouse,\n                    allowShowingWarehouseMedicines,\n                    user,\n                    dispatch,\n                    token,\n                    history\n                  )\n                }\n              />\n            ))}\n          </CenterContainer>\n        )}\n\n        {/* display as card */}\n        {displayType === \"card\" && (\n          <CenterContainer\n            style={{\n              alignItems: \"stretch\",\n            }}\n          >\n            {filteredWarehouses.map((warehouse) => (\n              <PartnerCard\n                key={warehouse._id}\n                partner={warehouse}\n                addPartnerToFavoriteHandler={() =>\n                  addPartnerToFavoriteHandler(\n                    warehouse,\n                    isOnline,\n                    dispatch,\n                    token,\n                    user\n                  )\n                }\n                removePartnerFromFavoriteHandler={() => {\n                  removePartnerFromFavoriteHandler(\n                    warehouse,\n                    isOnline,\n                    dispatch,\n                    token\n                  );\n                }}\n                partnerRowClickHandler={(allowShowingWarehouseMedicines) =>\n                  partnerRowClickHandler(\n                    warehouse,\n                    allowShowingWarehouseMedicines,\n                    user,\n                    dispatch,\n                    token,\n                    history\n                  )\n                }\n              />\n            ))}\n          </CenterContainer>\n        )}\n\n        {count > 0 && status !== \"loading\" && (\n          <ResultsCount count={`${filteredWarehouses.length} / ${count}`} />\n        )}\n\n        {filteredWarehouses.length === 0 &&\n          status !== \"loading\" &&\n          searchName.length === 0 &&\n          searchCity === CitiesName.ALL && (\n            <NoContent msg={t(\"no warehouses\")} />\n          )}\n\n        {filteredWarehouses.length === 0 &&\n          status !== \"loading\" &&\n          (searchName.length !== 0 || searchCity !== CitiesName.ALL) && (\n            <NoContent msg={t(\"no result found\")} />\n          )}\n\n        {status === \"loading\" && <CylonLoader />}\n\n        {filteredWarehouses.length < count && (\n          <ActionBar>\n            <ButtonWithIcon\n              text={t(\"more\")}\n              action={searchHandler}\n              bgColor={Colors.SUCCEEDED_COLOR}\n              icon={() => <CgMoreVertical />}\n            />\n          </ActionBar>\n        )}\n\n        {filteredWarehouses.length === count &&\n          status !== \"loading\" &&\n          count !== 0 && <NoMoreResult msg={t(\"no more\")} />}\n\n        {favoritesError && (\n          <Toast\n            bgColor={Colors.FAILED_COLOR}\n            foreColor=\"#fff\"\n            actionAfterTimeout={() => {\n              setFavoritesError(\"\");\n            }}\n          >\n            {t(favoriteError)}\n          </Toast>\n        )}\n      </MainContentContainer>\n    </>\n  ) : (\n    <Redirect to=\"/\" />\n  );\n}\n\nexport default WarehousePage;\n"],"names":["onSearch","keyUpHandler","t","useTranslation","dispatch","useDispatch","user","useSelector","selectUser","selectWarehousesPageState","searchName","searchCity","useState","showChooseCityModal","setShowChooseCityModal","citiesOptions","value","CitiesName","label","isThereSearch","trim","length","searchEngineAlert","id","type","onchange","e","changeSearchName","target","placeholder","resetField","UserTypeConstants","onclick","selectedValue","styleForSearch","withoutBorder","headerTitle","close","values","defaultValue","chooseHandler","changeSearchCity","refreshHandler","history","useHistory","displayType","foreColor","Colors","tooltip","icon","withBackground","selected","changeDisplayType","goBack","onSelectedChange","isOnline","selectOnlineStatus","selectUserData","token","selectWarehouses","warehouses","count","status","filteredWarehouses","filter","warehouse","name","includes","city","favoriteError","selectFavorites","error","favoritesError","setFavoritesError","searchHandler","getWarehouses","useEffect","window","scrollTo","to","resetFavorites","getFavorites","resetWarehouse","map","partner","addPartnerToFavoriteHandler","removePartnerFromFavoriteHandler","partnerRowClickHandler","allowShowingWarehouseMedicines","_id","style","alignItems","msg","text","action","bgColor","actionAfterTimeout"],"sourceRoot":""}