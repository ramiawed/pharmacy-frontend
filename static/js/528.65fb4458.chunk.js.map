{"version":3,"file":"static/js/528.65fb4458.chunk.js","mappings":"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","sources":["webpack://pharmacy-frontend/./src/components/notification-row/notification-row.module.scss?0ea7","components/notification-row/notification-row.component.jsx","components/admin-notifications-header/admin-notifications-header.component.jsx","webpack://pharmacy-frontend/./src/components/new-notification/new-notification.module.scss?8be4","components/new-notification/new-notification.component.jsx","pages/admin-notification-page/admin-notification-page.component.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"row_container\":\"notification-row_row_container__H9osv\",\"animateOpacity\":\"notification-row_animateOpacity__V2P55\",\"row_unread\":\"notification-row_row_unread__fyLJ-\",\"inner_container\":\"notification-row_inner_container__mY+Cj\",\"img\":\"notification-row_img__3B3IG\",\"image\":\"notification-row_image__ziJsf\",\"actions\":\"notification-row_actions__xTxlf\",\"delete\":\"notification-row_delete__Xs7yf\",\"unread\":\"notification-row_unread__wOU2r\",\"row\":\"notification-row_row__pwMuM\",\"body\":\"notification-row_body__FQWd+\",\"header\":\"notification-row_header__yfsGP\"};","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { useTranslation } from \"react-i18next\";\n\n// react-stuff\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { deleteNotification } from \"../../redux/notifications/notificationsSlice\";\nimport { selectUserData } from \"../../redux/auth/authSlice\";\nimport {\n  decreaseUnreadNotificationsCount,\n  setNotificationRead,\n} from \"../../redux/userNotifications/userNotificationsSlice\";\n\n// components\nimport Modal from \"../modal/modal.component\";\n\n// icons\nimport { RiDeleteBin5Fill } from \"react-icons/ri\";\nimport { BiImage } from \"react-icons/bi\";\nimport { BsCheck, BsFillCircleFill } from \"react-icons/bs\";\n\n// styles\nimport styles from \"./notification-row.module.scss\";\n\n// constants\nimport { Colors, SERVER_URL, UserTypeConstants } from \"../../utils/constants\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\n\nfunction NotificationRow({ notification, index, setSuccessDeletingMsg }) {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  // selectors\n  const { token, user } = useSelector(selectUserData);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const showNotificationDetails = () => {\n    if (\n      user.type !== UserTypeConstants.ADMIN &&\n      !notification.users.includes(user._id)\n    ) {\n      dispatch(\n        setNotificationRead({ token, notificationId: notification._id })\n      );\n      dispatch(decreaseUnreadNotificationsCount());\n    }\n\n    history.push(`/notification/${notification._id}`);\n  };\n\n  const deleteNotificationHandler = () => {\n    setShowDeleteModal(false);\n    dispatch(deleteNotification({ id: notification._id, token }))\n      .then(unwrapResult)\n      .then(() => {\n        setSuccessDeletingMsg(\"delete-notification-msg\");\n      });\n  };\n\n  return (\n    <div\n      className={[\n        styles.row_container,\n        !notification.users.includes(user._id) &&\n        user.type !== UserTypeConstants.ADMIN\n          ? styles.row_unread\n          : \"\",\n      ].join(\" \")}\n      style={{\n        animationDuration: (0.3 * index) / 10 + \"s\",\n      }}\n    >\n      <div className={styles.img}>\n        {notification.logo_url !== \"\" ? (\n          <img\n            className={styles.image}\n            src={`${SERVER_URL}/${notification.logo_url}`}\n            alt=\"thumb\"\n          />\n        ) : (\n          <>\n            <BiImage size={64} color={Colors.SECONDARY_COLOR} />\n          </>\n        )}\n      </div>\n\n      <div className={styles.inner_container} onClick={showNotificationDetails}>\n        <div className={styles.row}>\n          <label>{t(\"header\")}</label>\n          <p className={styles.header}>{notification.header}</p>\n        </div>\n        <div className={styles.row}>\n          <label>{t(\"body\")}</label>\n          <p className={styles.body}>{notification.body}</p>\n        </div>\n      </div>\n\n      {user.type === UserTypeConstants.ADMIN && (\n        <div\n          className={styles.delete}\n          onClick={() => {\n            setShowDeleteModal(true);\n          }}\n        >\n          <RiDeleteBin5Fill size={24} />\n        </div>\n      )}\n\n      {showDeleteModal && (\n        <Modal\n          header=\"delete-notification\"\n          cancelLabel=\"close-label\"\n          okLabel=\"ok-label\"\n          closeModal={() => {\n            setShowDeleteModal(false);\n          }}\n          small={true}\n          okModal={deleteNotificationHandler}\n          color={Colors.FAILED_COLOR}\n        >\n          <p>{t(\"delete-notification-confirm-msg\")}</p>\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nexport default NotificationRow;\n\n// {user.type !== UserTypeConstants.ADMIN && (\n//   <div className={styles.unread}>\n//     {notification.users.includes(user._id) ? (\n//       <BsCheck color={Colors.SUCCEEDED_COLOR} size={24} />\n//     ) : (\n//       <BsFillCircleFill color={Colors.SECONDARY_COLOR} size={24} />\n//     )}\n//   </div>\n// )}\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router\";\n\n// icons\nimport { MdAddCircle } from \"react-icons/md\";\nimport { RiRefreshLine } from \"react-icons/ri\";\n\n// components\nimport Header from \"../header/header.component\";\nimport Icon from \"../action-icon/action-icon.component\";\n\n// styles\nimport generalStyles from \"../../style.module.scss\";\n\n// constants\nimport { Colors } from \"../../utils/constants\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getAllNotifications,\n  resetNotifications,\n} from \"../../redux/notifications/notificationsSlice\";\nimport { selectToken } from \"../../redux/auth/authSlice\";\n\nfunction AdminNotificationsHeader({ isNew, setIsNew }) {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const token = useSelector(selectToken);\n\n  const refreshHandler = () => {\n    dispatch(resetNotifications());\n    dispatch(getAllNotifications({ token }));\n  };\n\n  return (\n    <Header>\n      <h2>{t(\"nav-notifications\")}</h2>\n\n      <div\n        className={[generalStyles.actions, generalStyles.margin_v_4].join(\" \")}\n      >\n        {!isNew && (\n          <Icon\n            selected={false}\n            foreColor={Colors.SECONDARY_COLOR}\n            tooltip={t(\"new-advertisement\")}\n            onclick={() => {\n              setIsNew(true);\n            }}\n            icon={() => <MdAddCircle size={20} />}\n          />\n        )}\n\n        {/* Refresh */}\n        <Icon\n          selected={false}\n          foreColor={Colors.SECONDARY_COLOR}\n          tooltip={t(\"refresh-tooltip\")}\n          onclick={() => {\n            refreshHandler();\n          }}\n          icon={() => <RiRefreshLine />}\n        />\n      </div>\n    </Header>\n  );\n}\n\nexport default AdminNotificationsHeader;\n","// extracted by mini-css-extract-plugin\nexport default {\"new_notification_div\":\"new-notification_new_notification_div__pbfZn\",\"animateOpacity\":\"new-notification_animateOpacity__jesQm\",\"content\":\"new-notification_content__vANav\",\"img\":\"new-notification_img__gqmLm\",\"image\":\"new-notification_image__KtvNL\",\"actions\":\"new-notification_actions__nDdzi\",\"delete\":\"new-notification_delete__ffXAA\",\"row\":\"new-notification_row__504Xm\",\"error\":\"new-notification_error__8dRSJ\"};","import React, { useState, useRef } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\n// redux stuff\nimport { selectToken } from \"../../redux/auth/authSlice\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addNotification } from \"../../redux/notifications/notificationsSlice\";\n\n// components\nimport Icon from \"../action-icon/action-icon.component\";\nimport Button from \"../button/button.component\";\n\n// icons\nimport { BiImage } from \"react-icons/bi\";\nimport { MdAddCircle } from \"react-icons/md\";\nimport { RiDeleteBin5Fill } from \"react-icons/ri\";\n\n// styles\nimport styles from \"./new-notification.module.scss\";\n\n// constants\nimport { Colors } from \"../../utils/constants\";\n\nfunction NewNotification({ setIsNew, setSuccessAddingMsg }) {\n  const inputFileRef = useRef(null);\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  // selectors\n  const token = useSelector(selectToken);\n\n  // own states\n  const [header, setHeader] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [headerError, setHeaderError] = useState(\"\");\n  const [bodyError, setBodyError] = useState(\"\");\n\n  const resetState = () => {\n    setHeader(\"\");\n    setBody(\"\");\n\n    setIsNew(false);\n  };\n\n  const handleAddImageClick = () => {\n    inputFileRef.current.click();\n  };\n\n  const fileChangedHandler = (e) => {\n    if (e.target.files && e.target.files.length > 0) {\n      setSelectedImage(e.target.files[0]);\n    }\n  };\n\n  const addHandler = () => {\n    if (header.trim().length === 0 || body.trim().length === 0) {\n      if (header.trim().length === 0) {\n        setHeaderError(\"error\");\n      }\n\n      if (body.trim().length === 0) {\n        setBodyError(\"error\");\n      }\n\n      return;\n    }\n\n    const data = new FormData();\n\n    if (selectedImage !== null) {\n      data.append(\n        \"logo_url\",\n        `${Date.now()}.${selectedImage.name.split(\".\").pop()}`\n      );\n      data.append(\"file\", selectedImage);\n    }\n\n    data.append(\"header\", header);\n    data.append(\"body\", body);\n\n    dispatch(addNotification({ data, token }))\n      .then(unwrapResult)\n      .then(() => {\n        setBody(\"\");\n        setHeader(\"\");\n        setSelectedImage(null);\n        setSuccessAddingMsg(\"add-notification-msg\");\n      });\n  };\n\n  return (\n    <div className={styles.new_notification_div}>\n      <div\n        className={[\n          styles.row,\n          headerError === \"error\" ? styles.error : \"\",\n        ].join(\" \")}\n      >\n        <label>{t(\"header\")}</label>\n        <input\n          type=\"text\"\n          value={header}\n          onChange={(e) => {\n            setHeader(e.target.value);\n            setHeaderError(\"\");\n          }}\n        />\n      </div>\n      <div\n        className={[styles.row, bodyError === \"error\" ? styles.error : \"\"].join(\n          \" \"\n        )}\n      >\n        <label>{t(\"body\")}</label>\n        <textarea\n          value={body}\n          onChange={(e) => {\n            setBody(e.target.value);\n            setBodyError(\"\");\n          }}\n        />\n      </div>\n\n      <div className={styles.row}>\n        <label>{t(\"image-label\")}:</label>\n        {selectedImage === null ? (\n          <>\n            <Icon\n              selected={false}\n              foreColor={Colors.SUCCEEDED_COLOR}\n              onclick={handleAddImageClick}\n              icon={() => <MdAddCircle size={24} />}\n            />\n            <input\n              multiple={false}\n              accept=\"image/*\"\n              ref={inputFileRef}\n              type=\"file\"\n              onChange={fileChangedHandler}\n              // style={{ display: \"none\" }}\n              hidden\n            />\n          </>\n        ) : (\n          <Icon\n            icon={() => <RiDeleteBin5Fill size={24} />}\n            selected={false}\n            foreColor={Colors.FAILED_COLOR}\n            onclick={() => setSelectedImage(null)}\n          />\n        )}\n        <div className={styles.img}>\n          {selectedImage ? (\n            <img\n              src={URL.createObjectURL(selectedImage)}\n              className={styles.image}\n              alt=\"Thumb\"\n            />\n          ) : (\n            <div>\n              <BiImage\n                size={128}\n                color={Colors.SECONDARY_COLOR}\n                onClick={handleAddImageClick}\n                style={{\n                  cursor: \"pointer\",\n                }}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className={styles.actions}>\n        <Button\n          action={addHandler}\n          text={t(\"add-label\")}\n          bgColor={Colors.SUCCEEDED_COLOR}\n        />\n        <Button\n          action={resetState}\n          text={t(\"cancel-label\")}\n          bgColor={Colors.FAILED_COLOR}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default NewNotification;\n","import React, { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router\";\nimport { useTranslation } from \"react-i18next\";\n\n// 3-party library (loading, paginate)\nimport ReactPaginate from \"react-paginate\";\n\n// redux stuff\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getAllNotifications,\n  resetError,\n  selectNotifications,\n  setPage,\n} from \"../../redux/notifications/notificationsSlice\";\nimport { selectUserData } from \"../../redux/auth/authSlice\";\nimport {\n  changeOnlineMsg,\n  selectOnlineStatus,\n} from \"../../redux/online/onlineSlice\";\n\n// components\nimport AdminNotificationsHeader from \"../../components/admin-notifications-header/admin-notifications-header.component\";\nimport NewNotification from \"../../components/new-notification/new-notification.component\";\nimport Loader from \"../../components/action-loader/action-loader.component\";\nimport NotificationRow from \"../../components/notification-row/notification-row.component\";\nimport NoContent from \"../../components/no-content/no-content.component\";\n\n// styles\nimport paginationStyles from \"../../components/pagination.module.scss\";\nimport generalStyles from \"../../style.module.scss\";\n\n// constants\nimport { Colors, UserTypeConstants } from \"../../utils/constants\";\nimport Toast from \"../../components/toast/toast.component\";\n\nfunction AdminNotificationPage({ onSelectedChange }) {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  // selectors\n  const { token, user } = useSelector(selectUserData);\n  const { status, error, page, count, notifications } =\n    useSelector(selectNotifications);\n  const isOnline = useSelector(selectOnlineStatus);\n\n  // own state\n  const [isNew, setIsNew] = useState(false);\n  const [successAddingNewNotificationMsg, setSuccessAddingNewNotificationMsg] =\n    useState(\"\");\n  const [successDeletingNotificationMsg, setSuccessDeletingNotificationMsg] =\n    useState(\"\");\n\n  const handleSearch = (page) => {\n    if (!isOnline) {\n      dispatch(changeOnlineMsg());\n      return;\n    }\n\n    dispatch(setPage(page));\n    dispatch(getAllNotifications({ token }));\n  };\n\n  const handlePageClick = (e) => {\n    const { selected } = e;\n\n    handleSearch(selected + 1);\n\n    window.scrollTo(0, 0);\n  };\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n\n    onSelectedChange();\n\n    handleSearch(page);\n  }, []);\n\n  return user && user.type === UserTypeConstants.ADMIN ? (\n    <div className={generalStyles.container}>\n      <AdminNotificationsHeader isNew={isNew} setIsNew={setIsNew} />\n\n      {isNew ? (\n        <NewNotification\n          setIsNew={setIsNew}\n          setSuccessAddingMsg={setSuccessAddingNewNotificationMsg}\n          setSuccessDeletingMsg={setSuccessDeletingNotificationMsg}\n        />\n      ) : (\n        <>\n          {notifications.map((note, index) => (\n            <NotificationRow\n              key={note._id}\n              notification={note}\n              index={index}\n              setSuccessDeletingMsg={setSuccessDeletingNotificationMsg}\n            />\n          ))}\n\n          {count > 0 && isOnline && (\n            <ReactPaginate\n              previousLabel={t(\"previous\")}\n              nextLabel={t(\"next\")}\n              pageCount={Math.ceil(count / 9)}\n              forcePage={page - 1}\n              onPageChange={handlePageClick}\n              containerClassName={paginationStyles.pagination}\n              previousLinkClassName={paginationStyles.pagination_link}\n              nextLinkClassName={paginationStyles.pagination_link}\n              disabledClassName={paginationStyles.pagination_link_disabled}\n              activeClassName={paginationStyles.pagination_link_active}\n            />\n          )}\n\n          {notifications.length === 0 && status !== \"loading\" && (\n            <NoContent msg={t(\"no-notifications\")} />\n          )}\n\n          {error && (\n            <Toast\n              bgColor={Colors.FAILED_COLOR}\n              foreColor=\"#fff\"\n              toastText={t(error)}\n              actionAfterTimeout={() => dispatch(resetError())}\n            />\n          )}\n        </>\n      )}\n\n      {status === \"loading\" && <Loader />}\n\n      {successAddingNewNotificationMsg && (\n        <Toast\n          bgColor={Colors.SUCCEEDED_COLOR}\n          foreColor=\"#fff\"\n          toastText={t(successAddingNewNotificationMsg)}\n          actionAfterTimeout={() => setSuccessAddingNewNotificationMsg(\"\")}\n        />\n      )}\n\n      {successDeletingNotificationMsg && (\n        <Toast\n          bgColor={Colors.SUCCEEDED_COLOR}\n          foreColor=\"#fff\"\n          toastText={t(successDeletingNotificationMsg)}\n          actionAfterTimeout={() => setSuccessDeletingNotificationMsg(\"\")}\n        />\n      )}\n    </div>\n  ) : (\n    <Redirect to=\"/\" />\n  );\n}\n\nexport default AdminNotificationPage;\n"],"names":["notification","index","setSuccessDeletingMsg","t","useTranslation","history","useHistory","dispatch","useDispatch","useSelector","selectUserData","token","user","useState","showDeleteModal","setShowDeleteModal","className","styles","users","includes","_id","type","UserTypeConstants","join","style","animationDuration","logo_url","src","SERVER_URL","alt","size","color","Colors","onClick","setNotificationRead","notificationId","decreaseUnreadNotificationsCount","push","header","body","cancelLabel","okLabel","closeModal","small","okModal","deleteNotification","id","then","unwrapResult","isNew","setIsNew","selectToken","generalStyles","selected","foreColor","tooltip","onclick","icon","resetNotifications","getAllNotifications","setSuccessAddingMsg","inputFileRef","useRef","setHeader","setBody","selectedImage","setSelectedImage","headerError","setHeaderError","bodyError","setBodyError","handleAddImageClick","current","click","value","onChange","e","target","multiple","accept","ref","files","length","hidden","URL","createObjectURL","cursor","action","trim","data","FormData","append","Date","now","name","split","pop","addNotification","text","bgColor","onSelectedChange","selectNotifications","status","error","page","count","notifications","isOnline","selectOnlineStatus","successAddingNewNotificationMsg","setSuccessAddingNewNotificationMsg","successDeletingNotificationMsg","setSuccessDeletingNotificationMsg","handleSearch","setPage","changeOnlineMsg","useEffect","window","scrollTo","map","note","previousLabel","nextLabel","pageCount","Math","ceil","forcePage","onPageChange","containerClassName","paginationStyles","previousLinkClassName","nextLinkClassName","disabledClassName","activeClassName","msg","toastText","actionAfterTimeout","resetError","to"],"sourceRoot":""}