{"version":3,"file":"static/js/2078.5d7ce237.chunk.js","mappings":"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","sources":["webpack://pharmacy-frontend/./src/components/main-content-container/main-content-container.module.scss?3a38","components/main-content-container/main-content-container.component.jsx","components/companies-search-engine/companies-search-engine.component.jsx","components/companies-actions/companies-actions.component.jsx","pages/companies-page/companies-page.component.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"main_content_container\":\"main-content-container_main_content_container__Aihvg\"};","import React from \"react\";\n\nimport styles from \"./main-content-container.module.scss\";\n\nconst MainContentContainer = ({ children }) => {\n  return <div className={styles.main_content_container}>{children}</div>;\n};\n\nexport default MainContentContainer;\n","import React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\n// redux stuff\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  changeSearchCity,\n  changeSearchName,\n  selectCompaniesPageState,\n} from \"../../redux/company/companySlice\";\n\n// components\nimport ChooserContainer from \"../chooser-container/chooser-container.component\";\nimport SearchContainer from \"../search-container/search-container.component\";\nimport ChooseValue from \"../choose-value/choose-value.component\";\nimport SearchInput from \"../search-input/search-input.component\";\n\n// constants\nimport { CitiesName } from \"../../utils/constants\";\n\nfunction CompaniesSearchEngine({ search }) {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  const { searchName, searchCity } = useSelector(selectCompaniesPageState);\n\n  const [showChooseCityModal, setShowChooseCityModal] = useState(false);\n\n  // guest options and its change handler\n  const citiesOptions = [\n    { value: CitiesName.ALL, label: t(\"all cities\") },\n    { value: CitiesName.ALEPPO, label: t(\"aleppo\") },\n    { value: CitiesName.DAMASCUS, label: t(\"damascus\") },\n    { value: CitiesName.DARAA, label: t(\"daraa\") },\n    { value: CitiesName.DEIR_EZ_ZOR, label: t(\"deir_ez_zor\") },\n    { value: CitiesName.HAMA, label: t(\"hama\") },\n    { value: CitiesName.AL_HASAKAH, label: t(\"al_hasakah\") },\n    { value: CitiesName.HOMS, label: t(\"homs\") },\n    { value: CitiesName.IDLIB, label: t(\"idlib\") },\n    { value: CitiesName.LATAKIA, label: t(\"latakia\") },\n    { value: CitiesName.QUNEITRA, label: t(\"quneitra\") },\n    { value: CitiesName.RAQQA, label: t(\"raqqa\") },\n    { value: CitiesName.AL_SUWAYDA, label: t(\"al_suwayda\") },\n    { value: CitiesName.TARTUS, label: t(\"tartus\") },\n    {\n      value: CitiesName.DAMASCUS_COUNTRYSIDE,\n      label: t(\"damascus_countryside\"),\n    },\n  ];\n\n  const isThereSearch =\n    searchName.trim().length > 0 || searchCity !== CitiesName.ALL;\n\n  return (\n    <>\n      <SearchContainer searchAction={search} searchEngineAlert={isThereSearch}>\n        <SearchInput\n          label=\"name\"\n          id=\"search-name\"\n          type=\"text\"\n          value={searchName}\n          onchange={(e) => {\n            dispatch(changeSearchName(e.target.value));\n          }}\n          placeholder=\"search by company name\"\n          resetField={() => dispatch(changeSearchName(\"\"))}\n        />\n\n        <ChooserContainer\n          onclick={() => setShowChooseCityModal(true)}\n          selectedValue={searchCity}\n          label=\"city\"\n          styleForSearch={true}\n          withoutBorder={true}\n        />\n      </SearchContainer>\n\n      {showChooseCityModal && (\n        <ChooseValue\n          headerTitle=\"city\"\n          close={() => {\n            setShowChooseCityModal(false);\n          }}\n          values={citiesOptions}\n          defaultValue={searchCity}\n          chooseHandler={(value) => {\n            dispatch(changeSearchCity(value));\n          }}\n        />\n      )}\n    </>\n  );\n}\n\nexport default CompaniesSearchEngine;\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\n\n// redux stuff\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  changeDisplayType,\n  changeSearchCity,\n  changeSearchName,\n  selectCompaniesPageState,\n} from \"../../redux/company/companySlice\";\n\n// components\nimport Icon from \"../icon/icon.component\";\nimport ActionBar from \"../action-bar/action-bar.component\";\n\n// react icons\nimport { RiRefreshLine } from \"react-icons/ri\";\nimport { AiFillAppstore } from \"react-icons/ai\";\nimport { FaListUl } from \"react-icons/fa\";\nimport { VscClearAll } from \"react-icons/vsc\";\nimport { IoMdArrowRoundBack } from \"react-icons/io\";\n\n// constants and utils\nimport { CitiesName, Colors } from \"../../utils/constants\";\n\nfunction CompaniesActions({ refreshHandler }) {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const { searchName, searchCity, displayType } = useSelector(\n    selectCompaniesPageState\n  );\n\n  return (\n    <>\n      <ActionBar>\n        {/* refresh */}\n        <Icon\n          withBackground={true}\n          selected={false}\n          foreColor={Colors.MAIN_COLOR}\n          tooltip={t(\"refresh\")}\n          onclick={() => {\n            refreshHandler();\n          }}\n          icon={() => <RiRefreshLine />}\n        />\n\n        {(searchName.length > 0 || searchCity !== CitiesName.ALL) && (\n          <Icon\n            withBackground={true}\n            selected={false}\n            foreColor={Colors.MAIN_COLOR}\n            tooltip={t(\"clear filter\")}\n            onclick={() => {\n              dispatch(changeSearchName(\"\"));\n              dispatch(changeSearchCity(CitiesName.ALL));\n            }}\n            icon={() => <VscClearAll />}\n          />\n        )}\n\n        {/* display card option */}\n        <Icon\n          withBackground={true}\n          foreColor={\n            displayType === \"card\" ? Colors.SUCCEEDED_COLOR : Colors.MAIN_COLOR\n          }\n          tooltip={t(\"show as card\")}\n          onclick={() => {\n            dispatch(changeDisplayType(\"card\"));\n          }}\n          icon={() => <AiFillAppstore />}\n        />\n\n        {/* display list option */}\n        <Icon\n          withBackground={true}\n          foreColor={\n            displayType === \"list\" ? Colors.SUCCEEDED_COLOR : Colors.MAIN_COLOR\n          }\n          tooltip={t(\"show as list\")}\n          onclick={() => {\n            dispatch(changeDisplayType(\"list\"));\n          }}\n          icon={() => <FaListUl />}\n        />\n\n        <Icon\n          withBackground={true}\n          tooltip={t(\"back\")}\n          onclick={() => {\n            history.goBack();\n          }}\n          icon={() => <IoMdArrowRoundBack />}\n          foreColor={Colors.MAIN_COLOR}\n        />\n      </ActionBar>\n    </>\n  );\n}\n\nexport default CompaniesActions;\n","// THIS COMPONENT PAGE CAN BE DISPLAYED BY ALL THE USERS\n\n// this component display\n// 1- header\n// 2- actions(refresh, favorites companies, list display, card display, search)\n// 3- if the companies is empty or doesn't match the search engines display an empty icon\n// 4- if the companies is not empty display the companies as list or card.\n\n// this component depends on the companySlice\n\nimport React, { useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Redirect } from \"react-router\";\nimport { useHistory } from \"react-router-dom\";\n\n// components\nimport CompaniesSearchEngine from \"../../components/companies-search-engine/companies-search-engine.component\";\nimport MainContentContainer from \"../../components/main-content-container/main-content-container.component\";\nimport CenterContainer from \"../../components/center-container/center-container.component\";\nimport CompaniesActions from \"../../components/companies-actions/companies-actions.component\";\nimport ButtonWithIcon from \"../../components/button-with-icon/button-with-icon.component\";\nimport NoMoreResult from \"../../components/no-more-result/no-more-result.component\";\nimport ResultsCount from \"../../components/results-count/results-count.component\";\nimport CylonLoader from \"../../components/cylon-loader/cylon-loader.component\";\nimport PartnerCard from \"../../components/partner-card/partner-card.component\";\nimport PartnerRow from \"../../components/partner-row/partner-row.component\";\nimport NoContent from \"../../components/no-content/no-content.component\";\nimport ActionBar from \"../../components/action-bar/action-bar.component\";\n\n// redux stuff\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectUserData } from \"../../redux/auth/authSlice\";\nimport {\n  getCompanies,\n  resetCompanies,\n  selectCompanies,\n  selectCompaniesPageState,\n} from \"../../redux/company/companySlice\";\nimport {\n  getFavorites,\n  resetFavorites,\n} from \"../../redux/favorites/favoritesSlice\";\nimport { selectOnlineStatus } from \"../../redux/online/onlineSlice\";\n\n// icons\nimport { CgMoreVertical } from \"react-icons/cg\";\n\n// constants and utils\nimport { CitiesName, Colors } from \"../../utils/constants\";\n\n// handlers\nimport {\n  addCompanyToOurCompaniesHandler,\n  addPartnerToFavoriteHandler,\n  partnerRowClickHandler,\n  removeCompanyFromOurCompaniesHandler,\n  removePartnerFromFavoriteHandler,\n} from \"../../utils/handlers\";\n\nfunction CompaniesPage({ onSelectedChange }) {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  // selectors\n  // select from redux store\n  // select logged user and it's token from authSlice\n  const { token, user } = useSelector(selectUserData);\n  const { companies, count, status } = useSelector(selectCompanies);\n  const { searchName, searchCity, displayType } = useSelector(\n    selectCompaniesPageState\n  );\n  const isOnline = useSelector(selectOnlineStatus);\n\n  let filteredCompanies = companies.filter((company) => {\n    if (searchName.trim().length > 0) {\n      return company.name.includes(searchName.trim());\n    }\n    return true;\n  });\n\n  filteredCompanies = filteredCompanies.filter((company) => {\n    if (searchCity !== CitiesName.ALL) {\n      return company.city === searchCity;\n    }\n    return true;\n  });\n\n  // search handler\n  // /users?type=company&page=page&limit=15\n  // this method take 2 params\n  // 1- page: determine which page you want to get its rows from DB\n  // 2- reset: boolean param, determine if you have to reset the page to 1 or not.\n  //\n  // build the query string that contains the required info like page and limit\n  // if any of the search state (searchName, searchCity) is not empty, add it to query string\n  // get the companies from DB\n  // depends on the reset field, add one to page, or reset to 1\n  const searchHandler = () => {\n    dispatch(getCompanies({ token }));\n  };\n\n  const refreshHandler = () => {\n    dispatch(resetFavorites());\n    dispatch(getFavorites({ token }));\n    dispatch(resetCompanies());\n    searchHandler();\n  };\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n\n    onSelectedChange();\n  }, []);\n\n  return user ? (\n    <>\n      <CompaniesSearchEngine />\n      <MainContentContainer>\n        <CompaniesActions refreshHandler={refreshHandler} />\n        {filteredCompanies.length > 0 && (\n          <ResultsCount\n            label={t(\"companies count\")}\n            count={filteredCompanies.length}\n          />\n        )}\n\n        {/* display partner as list */}\n        {displayType === \"list\" && (\n          <CenterContainer>\n            {filteredCompanies.map((company) => (\n              <PartnerRow\n                key={company._id}\n                partner={company}\n                addPartnerToFavoriteHandler={() =>\n                  addPartnerToFavoriteHandler(\n                    company,\n                    isOnline,\n                    dispatch,\n                    token,\n                    user\n                  )\n                }\n                addCompanyToOurCompaniesHandler={() =>\n                  addCompanyToOurCompaniesHandler(\n                    company,\n                    isOnline,\n                    dispatch,\n                    token\n                  )\n                }\n                removeCompanyFromOurCompaniesHandler={() => {\n                  removeCompanyFromOurCompaniesHandler(\n                    company,\n                    isOnline,\n                    dispatch,\n                    token\n                  );\n                }}\n                removePartnerFromFavoriteHandler={() => {\n                  removePartnerFromFavoriteHandler(\n                    company,\n                    isOnline,\n                    dispatch,\n                    token\n                  );\n                }}\n                partnerRowClickHandler={(allowShowingWarehouseMedicines) =>\n                  partnerRowClickHandler(\n                    company,\n                    allowShowingWarehouseMedicines,\n                    user,\n                    dispatch,\n                    token,\n                    history\n                  )\n                }\n              />\n            ))}\n          </CenterContainer>\n        )}\n\n        {/* display partner as a card */}\n        {displayType === \"card\" && (\n          <CenterContainer\n            style={{\n              alignItems: \"stretch\",\n            }}\n          >\n            {filteredCompanies.map((company) => (\n              <PartnerCard\n                key={company._id}\n                partner={company}\n                addPartnerToFavoriteHandler={() =>\n                  addPartnerToFavoriteHandler(\n                    company,\n                    isOnline,\n                    dispatch,\n                    token,\n                    user\n                  )\n                }\n                addCompanyToOurCompaniesHandler={() =>\n                  addCompanyToOurCompaniesHandler(\n                    company,\n                    isOnline,\n                    dispatch,\n                    token\n                  )\n                }\n                removeCompanyFromOurCompaniesHandler={() => {\n                  removeCompanyFromOurCompaniesHandler(\n                    company,\n                    isOnline,\n                    dispatch,\n                    token\n                  );\n                }}\n                removePartnerFromFavoriteHandler={() => {\n                  removePartnerFromFavoriteHandler(\n                    company,\n                    isOnline,\n                    dispatch,\n                    token\n                  );\n                }}\n                partnerRowClickHandler={(allowShowingWarehouseMedicines) =>\n                  partnerRowClickHandler(\n                    company,\n                    allowShowingWarehouseMedicines,\n                    user,\n                    dispatch,\n                    token,\n                    history\n                  )\n                }\n              />\n            ))}\n          </CenterContainer>\n        )}\n\n        {/* {count > 0 && status !== \"loading\" && (\n          <ResultsCount count={`${companies.length} / ${count}`} />\n        )} */}\n\n        {filteredCompanies.length === 0 &&\n          status !== \"loading\" &&\n          searchName.length === 0 &&\n          searchCity === CitiesName.ALL && (\n            <NoContent msg={t(\"no companies\")} />\n          )}\n\n        {filteredCompanies.length === 0 &&\n          status !== \"loading\" &&\n          (searchName.length !== 0 || searchCity !== CitiesName.ALL) && (\n            <NoContent msg={t(\"no result found\")} />\n          )}\n\n        {status === \"loading\" && <CylonLoader />}\n\n        {filteredCompanies.length < count && (\n          <ActionBar>\n            <ButtonWithIcon\n              text={t(\"more\")}\n              action={searchHandler}\n              bgColor={Colors.SUCCEEDED_COLOR}\n              icon={() => <CgMoreVertical />}\n            />\n          </ActionBar>\n        )}\n\n        {filteredCompanies.length === count &&\n          status !== \"loading\" &&\n          count !== 0 && <NoMoreResult msg={t(\"no more\")} />}\n      </MainContentContainer>\n    </>\n  ) : (\n    <Redirect to=\"/signin\" />\n  );\n}\n\nexport default CompaniesPage;\n"],"names":["children","className","styles","search","t","useTranslation","dispatch","useDispatch","useSelector","selectCompaniesPageState","searchName","searchCity","useState","showChooseCityModal","setShowChooseCityModal","citiesOptions","value","CitiesName","label","isThereSearch","trim","length","searchAction","searchEngineAlert","id","type","onchange","e","changeSearchName","target","placeholder","resetField","onclick","selectedValue","styleForSearch","withoutBorder","headerTitle","close","values","defaultValue","chooseHandler","changeSearchCity","refreshHandler","history","useHistory","displayType","withBackground","selected","foreColor","Colors","tooltip","icon","changeDisplayType","goBack","onSelectedChange","selectUserData","token","user","selectCompanies","companies","count","status","isOnline","selectOnlineStatus","filteredCompanies","filter","company","name","includes","city","searchHandler","getCompanies","useEffect","window","scrollTo","resetFavorites","getFavorites","resetCompanies","map","partner","addPartnerToFavoriteHandler","addCompanyToOurCompaniesHandler","removeCompanyFromOurCompaniesHandler","removePartnerFromFavoriteHandler","partnerRowClickHandler","allowShowingWarehouseMedicines","_id","style","alignItems","msg","text","action","bgColor","to"],"sourceRoot":""}