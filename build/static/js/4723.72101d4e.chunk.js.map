{"version":3,"file":"static/js/4723.72101d4e.chunk.js","mappings":"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","sources":["webpack://pharmacy-frontend/./src/components/partner-card/partner-card.module.scss?dc0e","components/partner-card/partner-card.component.jsx","components/search-container/search-container.component.jsx","webpack://pharmacy-frontend/./src/components/search-input/search-input.module.scss?50a3","components/search-input/search-input.component.jsx","components/companies-header/companies-header.component.jsx","pages/companies-page/companies-page.component.jsx","webpack://pharmacy-frontend/./src/components/search-container/search-container.module.scss?b7db"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"small_font\":\"partner-card_small_font__B6atq\",\"partner_container\":\"partner-card_partner_container__VB59l\",\"full_width\":\"partner-card_full_width__CUiS6\",\"partner_logo\":\"partner-card_partner_logo__zh12g\",\"partner_name\":\"partner-card_partner_name__jXB4j\",\"from_top\":\"partner-card_from_top__OssbS\",\"name\":\"partner-card_name__xgWNa\"};","import React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\nimport Logo from \"../../logo.png\";\n\n// components\nimport Button from \"../button/button.component\";\n\n// react icons\nimport { AiFillStar, AiOutlineStar } from \"react-icons/ai\";\nimport { VscLoading } from \"react-icons/vsc\";\n\n// redux-stuff\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  addFavorite,\n  selectFavoritesPartners,\n  removeFavorite,\n  selectFavoritesError,\n} from \"../../redux/favorites/favoritesSlice\";\nimport { selectUserData } from \"../../redux/auth/authSlice\";\nimport { addStatistics } from \"../../redux/statistics/statisticsSlice\";\nimport {\n  changeOnlineMsg,\n  selectOnlineStatus,\n} from \"../../redux/online/onlineSlice\";\nimport { selectSettings } from \"../../redux/settings/settingsSlice\";\nimport {\n  resetMedicines,\n  setSearchCompanyName,\n  setSearchWarehouseId,\n} from \"../../redux/medicines/medicinesSlices\";\nimport { setSelectedWarehouse } from \"../../redux/warehouse/warehousesSlice\";\n\n// styles\nimport generalStyles from \"../../style.module.scss\";\nimport styles from \"./partner-card.module.scss\";\n\n// constants and utils\nimport {\n  Colors,\n  SERVER_URL,\n  UserTypeConstants,\n} from \"../../utils/constants.js\";\n\nfunction PartnerCard({ partner, fullWidth }) {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  // selectors\n  const {\n    settings: { showWarehouseItem },\n  } = useSelector(selectSettings);\n  const isOnline = useSelector(selectOnlineStatus);\n  const favorites = useSelector(selectFavoritesPartners);\n  const favoritesError = useSelector(selectFavoritesError);\n  const { token, user } = useSelector(selectUserData);\n\n  // own state\n  // state to display a loader icon when partner dispatch addToFavorite or removeFromFavorite\n  const [changeFavoriteLoading, setChangeFavoriteLoading] = useState(false);\n\n  // determine if the partner can see the medicines in specific warehouse\n  const allowShowingWarehouseMedicines =\n    user.type === UserTypeConstants.ADMIN ||\n    partner.type === UserTypeConstants.COMPANY ||\n    (partner.type === UserTypeConstants.WAREHOUSE &&\n      showWarehouseItem &&\n      partner.allowShowingMedicines);\n\n  // method to handle add company to partner's favorite\n  const addPartnerToFavoriteHandler = () => {\n    // check the internet connection\n    if (!isOnline) {\n      dispatch(changeOnlineMsg());\n      return;\n    }\n\n    setChangeFavoriteLoading(true);\n\n    dispatch(addFavorite({ obj: { favoriteId: partner._id }, token }))\n      .then(unwrapResult)\n      .then(() => {\n        setChangeFavoriteLoading(false);\n        dispatch(\n          addStatistics({\n            obj: {\n              sourceUser: user._id,\n              targetUser: partner._id,\n              action: \"user-added-to-favorite\",\n            },\n            token,\n          })\n        );\n      })\n      .catch(() => {\n        setChangeFavoriteLoading(false);\n      });\n  };\n\n  // method to handle remove company from partner's favorite\n  const removePartnerFromFavoriteHandler = () => {\n    // check the internet connection\n    if (!isOnline) {\n      dispatch(changeOnlineMsg());\n      return;\n    }\n\n    setChangeFavoriteLoading(true);\n\n    dispatch(removeFavorite({ obj: { favoriteId: partner._id }, token }))\n      .then(unwrapResult)\n      .then(() => {\n        changeFavoriteLoading(false);\n      })\n      .catch(() => setChangeFavoriteLoading(false));\n  };\n\n  const partnerCardClickHandler = () => {\n    if (\n      partner.type === UserTypeConstants.WAREHOUSE &&\n      (user.type === UserTypeConstants.WAREHOUSE ||\n        user.type === UserTypeConstants.COMPANY ||\n        user.type === UserTypeConstants.GUEST)\n    ) {\n      return;\n    }\n\n    if (allowShowingWarehouseMedicines) {\n      // if the partner type is pharmacy or normal, change the selectedCount\n      // and selectedDates for this company\n      if (user.type === UserTypeConstants.PHARMACY) {\n        dispatch(\n          addStatistics({\n            obj: {\n              sourceUser: user._id,\n              targetUser: partner._id,\n              action: \"choose-company\",\n            },\n            token,\n          })\n        );\n      }\n      dispatch(resetMedicines());\n\n      if (partner.type === UserTypeConstants.COMPANY) {\n        dispatch(setSearchCompanyName(partner.name));\n      }\n\n      if (partner.type === UserTypeConstants.WAREHOUSE) {\n        dispatch(setSearchWarehouseId(partner._id));\n      }\n\n      // if (\n      //   partner.type === UserTypeConstants.WAREHOUSE &&\n      //   user.type === UserTypeConstants.PHARMACY\n      // ) {\n      //   dispatch(setSelectedWarehouse(partner._id));\n      // } else {\n      //   dispatch(setSelectedWarehouse(null));\n      // }\n      history.push(\"/medicines\");\n    }\n  };\n\n  return (\n    <div\n      className={[\n        styles.partner_container,\n        fullWidth ? styles.full_width : \"\",\n      ].join(\" \")}\n    >\n      <p className={styles.partner_name}>{partner.name}</p>\n\n      {partner.logo_url?.length > 0 ? (\n        <img\n          src={`${SERVER_URL}/profiles/${partner.logo_url}`}\n          className={styles.partner_logo}\n          alt=\"thumb\"\n        />\n      ) : (\n        <img src={Logo} className={styles.partner_logo} alt=\"thumb\" />\n      )}\n\n      <div className={styles.from_top}>\n        {favoritesError === \"\" ? (\n          changeFavoriteLoading ? (\n            <div\n              className={[generalStyles.icon, generalStyles.fc_yellow].join(\n                \" \"\n              )}\n            >\n              <VscLoading className={generalStyles.loading} size={20} />\n            </div>\n          ) : (\n            <div\n              className={[generalStyles.icon, generalStyles.fc_yellow].join(\n                \" \"\n              )}\n            >\n              {favorites &&\n              favorites\n                .map((favorite) => favorite._id)\n                .includes(partner._id) ? (\n                <AiFillStar\n                  size={24}\n                  onClick={removePartnerFromFavoriteHandler}\n                />\n              ) : (\n                <AiOutlineStar\n                  size={24}\n                  onClick={addPartnerToFavoriteHandler}\n                />\n              )}\n            </div>\n          )\n        ) : null}\n\n        {(partner.type === UserTypeConstants.COMPANY ||\n          (partner.type === UserTypeConstants.WAREHOUSE &&\n            user.type !== UserTypeConstants.WAREHOUSE)) && (\n          <div>\n            <Button\n              action={partnerCardClickHandler}\n              text={t(\"medicines\")}\n              bgColor={Colors.FAILED_COLOR}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default PartnerCard;\n","import React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\n// react-icons\nimport { VscSettings } from \"react-icons/vsc\";\n\n// styles\nimport styles from \"./search-container.module.scss\";\nimport generalStyles from \"../../style.module.scss\";\nimport Icon from \"../action-icon/action-icon.component\";\n\nfunction SearchContainer({ children, searchAction }) {\n  const { t } = useTranslation();\n\n  let childrenArray = React.Children.toArray(children);\n  const [moreSearchOptions, setMoreSearchOptions] = useState(false);\n\n  return (\n    <div\n      className={[\n        styles.search_container,\n        styles.expanded,\n        moreSearchOptions ? styles.expanded_with_options : \"\",\n      ].join(\" \")}\n    >\n      <div className={styles.expanded_div}>\n        {true && (\n          <>\n            <div style={{ flex: 1 }}>\n              {childrenArray[0]}\n              {moreSearchOptions && childrenArray.length > 1\n                ? childrenArray.map((child, index) => {\n                    if (index > 0) return child;\n                    return null;\n                  })\n                : null}\n\n              {moreSearchOptions && (\n                <button\n                  onClick={() => {\n                    searchAction();\n                    setMoreSearchOptions(false);\n                  }}\n                  style={{\n                    marginBlockStart: \"4px\",\n                    marginInline: \"auto\",\n                    marginLeft: \"auto\",\n                    marginRight: \"auto\",\n                    width: \"50%\",\n                  }}\n                  className={[\n                    generalStyles.button,\n                    generalStyles.bg_main,\n                    generalStyles.fc_white,\n                    generalStyles.block,\n                    generalStyles.padding_v_6,\n                    generalStyles.padding_h_8,\n                  ].join(\" \")}\n                >\n                  {t(\"search\")}\n                </button>\n              )}\n            </div>\n\n            {childrenArray.length > 1 && (\n              <div\n                style={{\n                  marginInline: \"4px\",\n                  marginLeft: \"4px\",\n                  marginRight: \"4px\",\n                }}\n              >\n                <Icon\n                  onclick={() => setMoreSearchOptions(!moreSearchOptions)}\n                  icon={() => <VscSettings />}\n                />\n              </div>\n            )}\n\n            {childrenArray.length === 1 && (\n              <div\n                className={[generalStyles.icon, generalStyles.margin_h_4].join(\n                  \" \"\n                )}\n                onClick={() => {\n                  searchAction();\n                  setMoreSearchOptions(false);\n                }}\n              >\n                <button\n                  className={[\n                    generalStyles.button,\n                    generalStyles.bg_secondary,\n                    generalStyles.fc_white,\n                    generalStyles.block,\n                    generalStyles.padding_v_6,\n                    generalStyles.padding_h_8,\n                  ].join(\" \")}\n                >\n                  {t(\"search\")}\n                </button>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default SearchContainer;\n","// extracted by mini-css-extract-plugin\nexport default {\"small_font\":\"search-input_small_font__t8rxR\",\"input_div\":\"search-input_input_div__4KoDe\",\"icon_close\":\"search-input_icon_close__TC1nF\"};","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { AiFillCloseCircle } from \"react-icons/ai\";\n\nimport styles from \"./search-input.module.scss\";\n\nfunction SearchInput({\n  type,\n  label,\n  id,\n  value,\n  onchange,\n  placeholder,\n  onEnterPress,\n  resetField,\n  onkeyup,\n}) {\n  const { t } = useTranslation();\n\n  const handleKeyPress = (event) => {\n    if (event.key === \"Enter\") {\n      if (onEnterPress) {\n        onEnterPress();\n      }\n    }\n  };\n\n  return (\n    <div className={styles.input_div}>\n      {label && <label htmlFor={id}>{t(label)}</label>}\n\n      <input\n        placeholder={placeholder ? t(`${placeholder}`) : \"\"}\n        id={id}\n        type={type}\n        value={value}\n        onChange={onchange}\n        onKeyPress={handleKeyPress}\n        onKeyUp={onkeyup && onkeyup}\n      />\n      {resetField && value && (\n        <AiFillCloseCircle\n          onClick={() => resetField(id)}\n          className={styles.icon_close}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default SearchInput;\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\n\n// redux stuff\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  cancelOperation,\n  changeDisplayType,\n  changeSearchCity,\n  changeSearchName,\n  changeShowFavorites,\n  resetCompaniesPageState,\n  selectCompaniesPageState,\n} from \"../../redux/company/companySlice\";\nimport { selectFavoritesPartners } from \"../../redux/favorites/favoritesSlice\";\nimport CitiesDropDown from \"../cities-dropdown/cities-dropdown.component\";\n\n// components\nimport SearchContainer from \"../search-container/search-container.component\";\nimport SearchInput from \"../search-input/search-input.component\";\nimport Icon from \"../action-icon/action-icon.component\";\nimport PartnerRow from \"../partner-row/partner-row.component\";\n\n// react icons\nimport { RiRefreshLine } from \"react-icons/ri\";\nimport { AiFillAppstore, AiFillStar } from \"react-icons/ai\";\nimport { FaListUl } from \"react-icons/fa\";\nimport { VscClearAll } from \"react-icons/vsc\";\nimport { IoMdArrowRoundBack } from \"react-icons/io\";\n\n// styles\nimport generalStyles from \"../../style.module.scss\";\n// constants and utils\nimport { CitiesName, Colors, UserTypeConstants } from \"../../utils/constants\";\n\nfunction CompaniesHeader({ search, refreshHandler, count, keyUpHandler }) {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const { searchName, searchCity, displayType, showFavorites } = useSelector(\n    selectCompaniesPageState\n  );\n  const favorites = useSelector(selectFavoritesPartners);\n\n  // Guest types are (Student, Pharmacist, Employee)\n  // uses with the SelectCustom\n  const citiesNameChangeHandler = (val) => {\n    // if the user type is Normal and the job is Student or Pharmacist\n    // so the user doesn't contains info about company name and job title\n    dispatch(changeSearchCity(val));\n  };\n\n  return (\n    <>\n      <SearchContainer searchAction={search}>\n        <SearchInput\n          label=\"user-name\"\n          id=\"search-name\"\n          type=\"text\"\n          value={searchName}\n          onchange={(e) => {\n            dispatch(changeSearchName(e.target.value));\n          }}\n          placeholder=\"search-by-company-name\"\n          onEnterPress={search}\n          resetField={() => dispatch(changeSearchName(\"\"))}\n          onkeyup={keyUpHandler}\n        />\n\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"flex-start\",\n            backgroundColor: Colors.WHITE_COLOR,\n            borderRadius: \"6px\",\n          }}\n        >\n          <CitiesDropDown\n            onSelectionChange={citiesNameChangeHandler}\n            defaultValue={{\n              value: searchCity,\n              label: t(searchCity.toLowerCase()),\n            }}\n            caption=\"user-city\"\n          />\n        </div>\n      </SearchContainer>\n      <div\n        className={[generalStyles.actions, generalStyles.margin_v_4].join(\" \")}\n      >\n        {/* refresh */}\n        <Icon\n          withBackground={true}\n          selected={false}\n          foreColor={Colors.MAIN_COLOR}\n          tooltip={t(\"refresh-tooltip\")}\n          onclick={() => {\n            refreshHandler();\n            dispatch(changeShowFavorites(false));\n          }}\n          icon={() => <RiRefreshLine />}\n        />\n\n        {(searchName.length > 0 || searchCity !== CitiesName.ALL) && (\n          <Icon\n            withBackground={true}\n            selected={false}\n            foreColor={Colors.MAIN_COLOR}\n            tooltip={t(\"clear-filter-tooltip\")}\n            onclick={() => {\n              dispatch(resetCompaniesPageState());\n              refreshHandler();\n              dispatch(changeShowFavorites(false));\n            }}\n            icon={() => <VscClearAll />}\n          />\n        )}\n\n        {/* show favorites */}\n        <div className={generalStyles.relative}>\n          <Icon\n            withBackground={true}\n            foreColor={\n              showFavorites ? Colors.SUCCEEDED_COLOR : Colors.MAIN_COLOR\n            }\n            tooltip={t(\"show-favorite-tooltip\")}\n            onclick={() => dispatch(changeShowFavorites(!showFavorites))}\n            icon={() => <AiFillStar />}\n          />\n\n          {showFavorites && (\n            <div\n              className={[\n                generalStyles.favorites_content,\n                generalStyles.bg_white,\n              ].join(\" \")}\n            >\n              {showFavorites &&\n                favorites &&\n                favorites\n                  .filter(\n                    (favorite) => favorite.type === UserTypeConstants.COMPANY\n                  )\n                  .map((favorite) => (\n                    <PartnerRow\n                      key={favorite._id}\n                      partner={favorite}\n                      withoutBoxShadow={true}\n                    />\n                  ))}\n            </div>\n          )}\n        </div>\n\n        {/* display card option */}\n        <Icon\n          withBackground={true}\n          foreColor={\n            displayType === \"card\" ? Colors.SUCCEEDED_COLOR : Colors.MAIN_COLOR\n          }\n          tooltip={t(\"show-item-as-card-tooltip\")}\n          onclick={() => {\n            dispatch(changeDisplayType(\"card\"));\n            dispatch(changeShowFavorites(false));\n          }}\n          icon={() => <AiFillAppstore />}\n        />\n\n        {/* display list option */}\n        <Icon\n          withBackground={true}\n          foreColor={\n            displayType === \"list\" ? Colors.SUCCEEDED_COLOR : Colors.MAIN_COLOR\n          }\n          tooltip={t(\"show-item-as-row-tooltip\")}\n          onclick={() => {\n            dispatch(changeDisplayType(\"list\"));\n            dispatch(changeShowFavorites(false));\n          }}\n          icon={() => <FaListUl />}\n        />\n\n        <Icon\n          withBackground={true}\n          tooltip={t(\"go-back\")}\n          onclick={() => {\n            history.goBack();\n          }}\n          icon={() => <IoMdArrowRoundBack />}\n          foreColor={Colors.MAIN_COLOR}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default CompaniesHeader;\n","// THIS COMPONENT PAGE CAN BE DISPLAYED BY ALL THE USERS\n\n// this component display\n// 1- header\n// 2- actions(refresh, favorites companies, list display, card display, search)\n// 3- if the companies is empty or doesn't match the search engines display an empty icon\n// 4- if the companies is not empty display the companies as list or card.\n\n// this component depends on the companySlice\n\nimport React, { useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Redirect } from \"react-router\";\nimport ReactLoading from \"react-loading\";\n\nimport { CgMoreVertical } from \"react-icons/cg\";\n\n// components\nimport PartnerRow from \"../../components/partner-row/partner-row.component\";\nimport PartnerCard from \"../../components/partner-card/partner-card.component\";\nimport NoContent from \"../../components/no-content/no-content.component\";\nimport CompaniesHeader from \"../../components/companies-header/companies-header.component\";\nimport ButtonWithIcon from \"../../components/button-with-icon/button-with-icon.component\";\n\n// redux stuff\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectUserData } from \"../../redux/auth/authSlice\";\nimport {\n  cancelOperation,\n  changeShowFavorites,\n  getCompanies,\n  resetCompanies,\n  selectCompanies,\n  selectCompaniesPageState,\n  resetCompaniesArray,\n} from \"../../redux/company/companySlice\";\nimport {\n  getFavorites,\n  resetFavorites,\n} from \"../../redux/favorites/favoritesSlice\";\nimport {\n  changeOnlineMsg,\n  selectOnlineStatus,\n} from \"../../redux/online/onlineSlice\";\n\n// styles\nimport generalStyles from \"../../style.module.scss\";\n\n// constants and utils\nimport { CitiesName, Colors } from \"../../utils/constants\";\n\nlet timer;\n\nfunction CompaniesPage({ onSelectedChange }) {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  // selectors\n  // select from redux store\n  // select logged user and it's token from authSlice\n  const { token, user } = useSelector(selectUserData);\n  // select companies from companySlice\n  const { companies, count, status } = useSelector(selectCompanies);\n  const { searchName, searchCity } = useSelector(selectCompaniesPageState);\n  const { displayType } = useSelector(selectCompaniesPageState);\n  const isOnline = useSelector(selectOnlineStatus);\n\n  // search handler\n  // /users?type=company&page=page&limit=15\n  // this method take 2 params\n  // 1- page: determine which page you want to get its rows from DB\n  // 2- reset: boolean param, determine if you have to reset the page to 1 or not.\n  //\n  // build the query string that contains the required info like page and limit\n  // if any of the search state (searchName, searchCity) is not empty, add it to query string\n  // get the companies from DB\n  // depends on the reset field, add one to page, or reset to 1\n  const handleSearch = () => {\n    dispatch(changeShowFavorites(false));\n    dispatch(getCompanies({ token }));\n  };\n\n  // get the next 15 companies from DB\n  // and add one to page\n  const handleMoreResult = () => {\n    if (!isOnline) {\n      dispatch(changeOnlineMsg());\n      return;\n    }\n\n    handleSearch();\n  };\n\n  // when press enter in search input field\n  // 1- reset the companies in the companySlice redux\n  // 2- search based on the new search engines\n  // 3- reset the page to 1\n  const handleEnterPress = () => {\n    dispatch(resetCompaniesArray());\n    handleSearch();\n  };\n\n  const refreshHandler = () => {\n    dispatch(resetFavorites());\n    dispatch(getFavorites({ token }));\n    dispatch(resetCompanies());\n    handleSearch();\n  };\n\n  const keyUpHandler = (event) => {\n    if (event.keyCode === 13) return;\n    cancelOperation();\n\n    if (timer) {\n      clearTimeout(timer);\n    }\n\n    timer = setTimeout(() => {\n      handleEnterPress();\n    }, 200);\n  };\n\n  useEffect(() => {\n    if (companies.length === 0) handleSearch(1);\n\n    window.scrollTo(0, 0);\n\n    onSelectedChange();\n\n    return () => {\n      cancelOperation();\n    };\n  }, []);\n\n  return user ? (\n    <div className={generalStyles.container}>\n      <CompaniesHeader\n        search={handleEnterPress}\n        refreshHandler={refreshHandler}\n        count={count}\n        keyUpHandler={keyUpHandler}\n      />\n\n      {count > 0 && (\n        <div className={generalStyles.count}>\n          <span className={generalStyles.label}>{t(\"companies-count\")}</span>\n          <span className={generalStyles.count}>{count}</span>\n        </div>\n      )}\n\n      {/* display partner as list */}\n      {displayType === \"list\" &&\n        companies.map((company) => (\n          <PartnerRow key={company._id} partner={company} />\n        ))}\n\n      {/* display partner as a card */}\n      {displayType === \"card\" && (\n        <div\n          className={[\n            generalStyles.flex_container,\n            generalStyles.margin_top_10,\n          ].join(\" \")}\n        >\n          {companies.map((company) => (\n            <PartnerCard key={company._id} partner={company} />\n          ))}\n        </div>\n      )}\n\n      {count > 0 && status !== \"loading\" && (\n        <div className={generalStyles.count}>\n          {companies.length} / {count}\n        </div>\n      )}\n\n      {companies.length === 0 &&\n        status !== \"loading\" &&\n        searchName.length === 0 &&\n        searchCity === CitiesName.ALL && <NoContent msg={t(\"no-companies\")} />}\n\n      {companies.length === 0 &&\n        status !== \"loading\" &&\n        (searchName.length !== 0 || searchCity !== CitiesName.ALL) && (\n          <NoContent msg={t(\"no-result-found\")} />\n        )}\n\n      {status === \"loading\" && (\n        <div className={generalStyles.flex_container}>\n          <ReactLoading color={Colors.SECONDARY_COLOR} type=\"cylon\" />\n        </div>\n      )}\n\n      {companies.length < count && (\n        <div className={generalStyles.flex_container}>\n          <ButtonWithIcon\n            text={t(\"more\")}\n            action={handleMoreResult}\n            bgColor={Colors.SECONDARY_COLOR}\n            icon={() => <CgMoreVertical />}\n          />\n        </div>\n      )}\n\n      {companies.length === count && status !== \"loading\" && count !== 0 && (\n        <p\n          className={[generalStyles.center, generalStyles.fc_secondary].join(\n            \" \"\n          )}\n        >\n          {t(\"no-more\")}\n        </p>\n      )}\n\n      {/* show loading animation when data is loading */}\n      {/* {status === \"loading\" && <Loader allowCancel={false} />} */}\n\n      {/* {error && (\n        <Toast\n          bgColor={Colors.FAILED_COLOR}\n          foreColor=\"#fff\"\n          actionAfterTimeout={() => {\n            dispatch(resetStatus());\n          }}\n        >\n          {t(error)}\n        </Toast>\n      )} */}\n    </div>\n  ) : (\n    <Redirect to=\"/signin\" />\n  );\n}\n\nexport default CompaniesPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"small_font\":\"search-container_small_font__Ha0Xq\",\"search_container\":\"search-container_search_container__6isGM\",\"expanded\":\"search-container_expanded__79n+k\",\"expanded_div\":\"search-container_expanded_div__Hmmm1\",\"checkbox_div\":\"search-container_checkbox_div__RPj5T\"};"],"names":["partner","fullWidth","t","useTranslation","history","useHistory","dispatch","useDispatch","showWarehouseItem","useSelector","selectSettings","settings","isOnline","selectOnlineStatus","favorites","selectFavoritesPartners","favoritesError","selectFavoritesError","selectUserData","token","user","useState","changeFavoriteLoading","setChangeFavoriteLoading","allowShowingWarehouseMedicines","type","UserTypeConstants","allowShowingMedicines","className","styles","join","name","logo_url","length","src","SERVER_URL","alt","Logo","generalStyles","size","map","favorite","_id","includes","onClick","removeFavorite","obj","favoriteId","then","unwrapResult","catch","changeOnlineMsg","addFavorite","addStatistics","sourceUser","targetUser","action","resetMedicines","setSearchCompanyName","setSearchWarehouseId","push","text","bgColor","Colors","children","searchAction","childrenArray","React","moreSearchOptions","setMoreSearchOptions","style","flex","child","index","marginBlockStart","marginInline","marginLeft","marginRight","width","onclick","icon","label","id","value","onchange","placeholder","onEnterPress","resetField","onkeyup","htmlFor","onChange","onKeyPress","event","key","onKeyUp","timer","search","refreshHandler","keyUpHandler","count","selectCompaniesPageState","searchName","searchCity","displayType","showFavorites","e","changeSearchName","target","display","justifyContent","backgroundColor","borderRadius","onSelectionChange","val","changeSearchCity","defaultValue","toLowerCase","caption","withBackground","selected","foreColor","tooltip","changeShowFavorites","CitiesName","resetCompaniesPageState","filter","withoutBoxShadow","changeDisplayType","goBack","onSelectedChange","selectCompanies","companies","status","handleSearch","getCompanies","handleEnterPress","resetCompaniesArray","useEffect","window","scrollTo","cancelOperation","resetFavorites","getFavorites","resetCompanies","keyCode","clearTimeout","setTimeout","company","msg","color","to"],"sourceRoot":""}