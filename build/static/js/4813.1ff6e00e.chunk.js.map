{"version":3,"file":"static/js/4813.1ff6e00e.chunk.js","mappings":"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","sources":["webpack://pharmacy-frontend/./src/components/card-info/card-info.module.scss?a8ee","components/card-info/card-info.component.jsx","webpack://pharmacy-frontend/./src/components/password-row/password-row.module.scss?66e1","components/password-row/password-row.component.jsx","components/user-profile-notifications/user-profile-notifications.component.jsx","components/change-password/change-password.component.jsx","webpack://pharmacy-frontend/./src/components/select/select.module.scss?6723","components/select/select.component.jsx","components/cities-dropdown/cities-dropdown.component.jsx","components/editable-city/editable-city.component.jsx","webpack://pharmacy-frontend/./src/components/editable-city/editable-city.module.scss?1681","components/delete-me/delete-me.component.jsx","components/info-row/info-row.component.jsx","webpack://pharmacy-frontend/./src/components/info-row/info-row.module.scss?2ae8","webpack://pharmacy-frontend/./src/pages/user-profile-page/user-profile-page.module.scss?2390","pages/user-profile-page/user-profile-page.component.jsx","webpack://pharmacy-frontend/./src/components/row.module.scss?2b3c"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"small_font\":\"card-info_small_font__AusTH\",\"card\":\"card-info_card__VcLb9\",\"header\":\"card-info_header__uTcny\",\"expanded\":\"card-info_expanded__IDH-A\",\"warning\":\"card-info_warning__bmiK1\"};","// card component that can collapsed or expanded by pressing on the header\n\n// props\n// headerTitle: text to show in the header section\n// children: array of component to show in the body of the card\n// type: warning or normal to change to background color of the card\n\nimport React, { useState } from \"react\";\n\n// react icon\nimport { BsFillCaretDownFill, BsFillCaretUpFill } from \"react-icons/bs\";\n\n// styles\nimport styles from \"./card-info.module.scss\";\n\nfunction CardInfo({ headerTitle, children, type }) {\n  const [expanded, setExpanded] = useState(true);\n\n  return (\n    <div\n      className={[styles.card, type === \"warning\" ? styles.warning : null].join(\n        \" \"\n      )}\n    >\n      <div\n        onClick={() => setExpanded(!expanded)}\n        className={[\n          styles.header,\n          type === \"warning\" ? styles.warning : null,\n          expanded ? styles.expanded : null,\n        ].join(\" \")}\n      >\n        <p>{headerTitle}</p>\n        <label\n          className={styles.header_label}\n          onClick={() => setExpanded(!expanded)}\n        >\n          {expanded ? <BsFillCaretUpFill /> : <BsFillCaretDownFill />}\n        </label>\n      </div>\n      {expanded && <div>{children}</div>}\n    </div>\n  );\n}\n\nexport default CardInfo;\n","// extracted by mini-css-extract-plugin\nexport default {\"small_font\":\"password-row_small_font__tTPv9\",\"info_row\":\"password-row_info_row__hPPMJ\",\"label\":\"password-row_label__NQCz5\",\"value\":\"password-row_value__15fz6\",\"error\":\"password-row_error__wTMqx\"};","import React from \"react\";\n\n// styles\nimport styles from \"./password-row.module.scss\";\n\nfunction PasswordRow({ labelText, value, onInputChange, field, error }) {\n  return (\n    <>\n      <div className={styles.info_row}>\n        <label className={styles.label}>{labelText}</label>\n        <div className={styles.value}>\n          <input\n            type=\"password\"\n            value={value}\n            onChange={(e) => onInputChange(field, e.target.value)}\n          />\n        </div>\n      </div>\n      {error ? <p className={styles.error}>{error}</p> : null}\n    </>\n  );\n}\n\nexport default PasswordRow;\n","import React from \"react\";\n\n// redux stuff\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  cancelOperation,\n  resetChangeLogoError,\n  resetDeleteError,\n  resetPasswordError,\n  resetPasswordStatus,\n  resetUpdateError,\n  resetUpdateStatus,\n  selectUserData,\n} from \"../../redux/auth/authSlice\";\n\n// component\nimport Toast from \"../toast/toast.component\";\nimport Loader from \"../action-loader/action-loader.component\";\n\n// constants\nimport { Colors } from \"../../utils/constants\";\nimport { useTranslation } from \"react-i18next\";\n\nfunction UserProfileNotifications() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  const {\n    changePasswordStatus,\n    passwordError,\n    changeLogoError,\n    changeLogoStatus,\n    updateStatus,\n    updateError,\n    deleteStatus,\n    deleteError,\n  } = useSelector(selectUserData);\n\n  return (\n    <>\n      {changePasswordStatus === \"loading\" && <Loader allowCancel={false} />}\n\n      {changePasswordStatus === \"succeeded\" && (\n        <Toast\n          bgColor={Colors.SUCCEEDED_COLOR}\n          foreColor=\"#fff\"\n          actionAfterTimeout={() => {\n            dispatch(resetPasswordStatus());\n          }}\n        >\n          <p>{t(\"password change succeeded\")}</p>\n        </Toast>\n      )}\n\n      {passwordError && (\n        <Toast\n          bgColor={Colors.FAILED_COLOR}\n          foreColor=\"#fff\"\n          actionAfterTimeout={() => dispatch(resetPasswordError())}\n        >\n          {passwordError.split(\"_\").map((err, index) => (\n            <p key={index}>{t(err)}</p>\n          ))}\n        </Toast>\n      )}\n\n      {updateStatus === \"succeeded\" && (\n        <Toast\n          bgColor={Colors.SUCCEEDED_COLOR}\n          foreColor=\"#fff\"\n          actionAfterTimeout={() => {\n            dispatch(resetUpdateStatus());\n          }}\n        >\n          <p>{t(\"update succeeded\")}</p>\n        </Toast>\n      )}\n\n      {updateStatus === \"failed\" && (\n        <Toast\n          bgColor={Colors.FAILED_COLOR}\n          foreColor=\"#fff\"\n          actionAfterTimeout={() => {\n            dispatch(resetUpdateError());\n          }}\n        >\n          <p>{t(updateError)}</p>\n        </Toast>\n      )}\n\n      {changeLogoError && (\n        <Toast\n          bgColor={Colors.FAILED_COLOR}\n          foreColor=\"#fff\"\n          actionAfterTimeout={() => dispatch(resetChangeLogoError())}\n        >\n          <p>{t(changeLogoError)}</p>\n        </Toast>\n      )}\n\n      {changeLogoStatus === \"loading\" && (\n        <Loader\n          allowCancel={true}\n          onclick={() => {\n            cancelOperation();\n          }}\n        />\n      )}\n\n      {deleteStatus === \"loading\" && <Loader allowCancel={false} />}\n\n      {deleteError && (\n        <Toast\n          bgColor={Colors.FAILED_COLOR}\n          foreColor=\"#fff\"\n          actionAfterTimeout={() => dispatch(resetDeleteError())}\n        >\n          <p>{t(deleteError)}</p>\n        </Toast>\n      )}\n    </>\n  );\n}\n\nexport default UserProfileNotifications;\n","// component to change the password for logged user\n\nimport React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\n// redux stuff\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport {\n  changeOnlineMsg,\n  selectOnlineStatus,\n} from \"../../redux/online/onlineSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { changeMyPassword, selectUserData } from \"../../redux/auth/authSlice\";\n\n// components\nimport PasswordRow from \"../password-row/password-row.component\";\nimport Button from \"../button/button.component\";\n\nfunction ChangePassword() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  // selectors\n  const { token } = useSelector(selectUserData);\n  const isOnline = useSelector(selectOnlineStatus);\n\n  // own state that holds the oldPassword, newPassword, newPasswordConfirm values\n  const [passwordObj, setPasswordObj] = useState({\n    oldPassword: \"\",\n    newPassword: \"\",\n    newPasswordConfirm: \"\",\n  });\n\n  // own state that holds the error of oldPassword, newPassword, newPasswordConfirm values\n  const [passwordObjError, setPasswordObjError] = useState({\n    oldPassword: \"\",\n    newPassword: \"\",\n    newPasswordConfirm: \"\",\n  });\n\n  // method to handle the change in the input in password and confirm password\n  // for change password\n  const handlePasswordFieldsChange = (field, val) => {\n    setPasswordObj({\n      ...passwordObj,\n      [field]: val,\n    });\n    setPasswordObjError({\n      ...passwordObjError,\n      [field]: \"\",\n    });\n  };\n\n  const changePasswordHandler = () => {\n    let errorObj = {};\n    if (passwordObj.oldPassword.length === 0) {\n      errorObj = {\n        ...errorObj,\n        oldPassword: \"enter old password error\",\n      };\n    }\n\n    if (passwordObj.newPassword.length < 5) {\n      errorObj = {\n        ...errorObj,\n        newPassword: \"password length error\",\n      };\n    }\n\n    if (passwordObj.newPassword.length === 0) {\n      errorObj = {\n        ...errorObj,\n        newPassword: \"enter password error\",\n      };\n    }\n\n    if (passwordObj.newPassword !== passwordObj.newPasswordConfirm) {\n      errorObj = {\n        ...errorObj,\n        newPasswordConfirm: \"unequal passwords error\",\n      };\n    }\n\n    if (passwordObj.newPasswordConfirm.length < 5) {\n      errorObj = {\n        ...errorObj,\n        newPasswordConfirm: \"confirm password length error\",\n      };\n    }\n\n    if (passwordObj.newPasswordConfirm.length === 0) {\n      errorObj = {\n        ...errorObj,\n        newPasswordConfirm: \"enter password confirm error\",\n      };\n    }\n\n    if (Object.entries(errorObj).length !== 0) {\n      setPasswordObjError({\n        ...passwordObjError,\n        ...errorObj,\n      });\n      return;\n    }\n\n    // check the internet connection\n    if (!isOnline) {\n      dispatch(changeOnlineMsg());\n      return;\n    }\n\n    dispatch(changeMyPassword({ obj: passwordObj, token }))\n      .then(unwrapResult)\n      .then(() => {\n        setPasswordObj({\n          oldPassword: \"\",\n          newPassword: \"\",\n          newPasswordConfirm: \"\",\n        });\n      });\n  };\n\n  return (\n    <>\n      <PasswordRow\n        field=\"oldPassword\"\n        labelText={t(\"old password\")}\n        value={passwordObj.oldPassword}\n        onInputChange={handlePasswordFieldsChange}\n        error={t(passwordObjError.oldPassword)}\n      />\n      <PasswordRow\n        field=\"newPassword\"\n        labelText={t(\"new password\")}\n        value={passwordObj.newPassword}\n        onInputChange={handlePasswordFieldsChange}\n        error={t(passwordObjError.newPassword)}\n      />\n      <PasswordRow\n        field=\"newPasswordConfirm\"\n        labelText={t(\"password confirm\")}\n        value={passwordObj.newPasswordConfirm}\n        onInputChange={handlePasswordFieldsChange}\n        error={t(passwordObjError.newPasswordConfirm)}\n      />\n      <div\n        className={[\"flex_center_container\"].join(\" \")}\n        style={{ padding: \"6px 0\" }}\n      >\n        <Button\n          text=\"change password\"\n          action={changePasswordHandler}\n          classStyle=\"bg_green\"\n        />\n      </div>\n    </>\n  );\n}\n\nexport default ChangePassword;\n","// extracted by mini-css-extract-plugin\nexport default {\"small_font\":\"select_small_font__8bcl7\",\"order_container\":\"select_order_container__1drxf\"};","// this component display the order options and search input.\n// Props:\n// -\torderOptions: (Array [{value, label}]): array of the options that should provide to the Select Component.\n// -\tbgColor: (String) the background color.\n// -\tforeColor: (String) the color of the text.\n// -\tsearchPlaceholder: (String) placeholder for search input field.\n// -\tsearchChange: (handler) handle to execute the text in the search input change.\n// -\torderChange: (handler) handler to execute when change the selected option in the Select Component\n\n// 3-party component\nimport React from \"react\";\nimport Select from \"react-select\";\nimport { Colors } from \"../../utils/constants\";\n\n// style\nimport styles from \"./select.module.scss\";\n\nfunction SelectCustom({\n  bgColor,\n  foreColor,\n  options,\n  onchange,\n  defaultOption,\n}) {\n  // custom style for the Select Component.\n  const customStyles = {\n    control: (provided, state) => ({\n      ...provided,\n      background: \"#fff\",\n      borderColor: bgColor,\n      color: bgColor,\n      minHeight: \"35px\",\n      height: \"40px\",\n      maxHeight: \"100px\",\n      boxShadow: state.isFocused ? null : null,\n      borderRadius: \"6px\",\n      flex: 1,\n    }),\n    menu: (provided, state) => ({\n      ...provided,\n      background: bgColor,\n      zIndex: 15,\n      maxHeight: \"20px\",\n    }),\n    option: (provided, state) => ({\n      ...provided,\n      color: state.isSelected ? bgColor : foreColor,\n      background: state.isSelected ? foreColor : bgColor,\n      height: \"36px\",\n      fontSize: \"16px\",\n    }),\n    valueContainer: (provided, state) => ({\n      ...provided,\n      height: \"30px\",\n      padding: \"0 6px\",\n      fontSize: \"16px\",\n      color: Colors.MAIN_COLOR,\n    }),\n\n    input: (provided, state) => ({\n      ...provided,\n      margin: \"0px\",\n    }),\n    indicatorSeparator: (state) => ({\n      display: \"none,\",\n    }),\n    indicatorsContainer: (provided, state) => ({\n      ...provided,\n      height: \"30px\",\n    }),\n  };\n\n  return (\n    <div className={styles.order_container}>\n      <Select\n        styles={customStyles}\n        options={options}\n        defaultValue={defaultOption}\n        onChange={(e) => onchange(e.value)}\n      />\n\n      {/* third-party component react-select */}\n    </div>\n  );\n}\n\nexport default SelectCustom;\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\n// components\nimport SelectCustom from \"../select/select.component\";\n\n// constants\nimport { CitiesName, Colors } from \"../../utils/constants\";\n\nfunction CitiesDropDown({ onSelectionChange, defaultValue, caption }) {\n  const { t } = useTranslation();\n\n  const citiesOptions = [\n    { value: CitiesName.ALL, label: t(\"all-cities\") },\n    { value: CitiesName.ALEPPO, label: t(\"aleppo\") },\n    { value: CitiesName.DAMASCUS, label: t(\"damascus\") },\n    { value: CitiesName.DARAA, label: t(\"daraa\") },\n    { value: CitiesName.DEIR_EZ_ZOR, label: t(\"deir_ez_zor\") },\n    { value: CitiesName.HAMA, label: t(\"hama\") },\n    { value: CitiesName.AL_HASAKAH, label: t(\"al_hasakah\") },\n    { value: CitiesName.HOMS, label: t(\"homs\") },\n    { value: CitiesName.IDLIB, label: t(\"idlib\") },\n    { value: CitiesName.LATAKIA, label: t(\"latakia\") },\n    { value: CitiesName.QUNEITRA, label: t(\"quneitra\") },\n    { value: CitiesName.RAQQA, label: t(\"raqqa\") },\n    { value: CitiesName.AL_SUWAYDA, label: t(\"al_suwayda\") },\n    { value: CitiesName.TARTUS, label: t(\"tartus\") },\n    {\n      value: CitiesName.DAMASCUS_COUNTRYSIDE,\n      label: t(\"damascus_countryside\"),\n    },\n  ];\n\n  return (\n    <>\n      <SelectCustom\n        bgColor={Colors.LIGHT_COLOR}\n        foreColor=\"#fff\"\n        options={citiesOptions}\n        onchange={onSelectionChange}\n        defaultOption={defaultValue}\n      />\n    </>\n  );\n}\n\nexport default CitiesDropDown;\n","import React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\n// redux stuff\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport { cancelOperation } from \"../../redux/auth/authSlice\";\n\n// components\nimport CitiesDropDown from \"../cities-dropdown/cities-dropdown.component\";\nimport Button from \"../button/button.component\";\n\n// styles\nimport styles from \"./editable-city.module.scss\";\n\n// use this promise to abort the operation by click on the cancel button\nlet promise;\n\n// Info Row component\nfunction EditableCity({\n  labelText,\n  value,\n  onInputChange,\n  action,\n  field,\n  editable,\n}) {\n  const { t } = useTranslation();\n\n  // save the previous value for cancel button\n  const [previousValue, setPreviousValue] = useState(value);\n  const [isEditable, setIsEditable] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  // to show loading icon while update the user info in the DB\n  const [loading, setLoading] = useState(false);\n\n  // method to handle click on the ok action\n  const handleOkAction = () => {\n    // dispatch the action\n    // if everything is okay\n    // 1- return the read mode\n    // 2- show a successful toast\n    // if there is an error\n    // 1- stay at the edit mode\n    // 2- show an error message below the input field\n    setLoading(true);\n\n    promise = action();\n\n    // check if the promise is not undefined\n    if (promise) {\n      promise\n        .then(unwrapResult)\n        .then((originalPromiseResult) => {\n          setIsEditable(false);\n          setLoading(false);\n        })\n        .catch((rejectedValueOrSerializedError) => {\n          setError(\n            rejectedValueOrSerializedError.message\n              ? rejectedValueOrSerializedError.message\n              : rejectedValueOrSerializedError\n          );\n          setLoading(false);\n          if (!rejectedValueOrSerializedError.message) {\n            setIsEditable(false);\n            setError(\"\");\n            onInputChange(field, previousValue);\n          }\n        });\n    } else {\n      cancelHandler();\n    }\n  };\n\n  // method to handle the cancel button\n  // return the read mode\n  // set the error to empty\n  // set the value of the input field to the previous value\n  const cancelHandler = () => {\n    setLoading(false);\n    setIsEditable(false);\n    setError(\"\");\n    onInputChange(previousValue.value);\n    cancelOperation();\n  };\n\n  return (\n    <>\n      <div className={styles.info_row}>\n        <label className={styles.label}>{labelText}</label>\n        {isEditable ? (\n          <div className={styles.value}>\n            <CitiesDropDown\n              onSelectionChange={onInputChange}\n              defaultValue={value}\n              caption=\"\"\n            />\n          </div>\n        ) : (\n          <div className={styles.value}>\n            <label>{value.label}</label>\n          </div>\n        )}\n        {editable ? (\n          isEditable ? (\n            <div className={styles.actions}>\n              <Button\n                text=\"ok-label\"\n                action={handleOkAction}\n                classStyle=\"bg_light\"\n                loading={loading}\n              />\n              <div style={{ minWidth: \"10px\" }}></div>\n              <Button\n                text=\"cancel\"\n                action={cancelHandler}\n                classStyle=\"bg_red\"\n              />\n            </div>\n          ) : (\n            <></>\n          )\n        ) : null}\n      </div>\n\n      {/* show error below the input field */}\n      {error && error !== \"cancel\" && error !== \"timeout\" && (\n        <p className={styles.error}>{t(error)}</p>\n      )}\n    </>\n  );\n}\n\nexport default EditableCity;\n","// extracted by mini-css-extract-plugin\nexport default {\"small_font\":\"editable-city_small_font__kV-on\",\"info_row\":\"editable-city_info_row__yY+WJ\",\"label\":\"editable-city_label__thlwD\",\"value\":\"editable-city_value__CbTny\",\"error\":\"editable-city_error__uShGg\",\"actions\":\"editable-city_actions__wrCrj\"};","import React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\n// redux stuff\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport {\n  authSliceSignOut,\n  deleteMe,\n  selectUserData,\n} from \"../../redux/auth/authSlice\";\nimport { usersSliceSignOut } from \"../../redux/users/usersSlice\";\nimport { favoritesSliceSignOut } from \"../../redux/favorites/favoritesSlice\";\nimport { companySliceSignOut } from \"../../redux/company/companySlice\";\nimport { warehouseSliceSignOut } from \"../../redux/warehouse/warehousesSlice\";\nimport { itemsSliceSignOut } from \"../../redux/items/itemsSlices\";\nimport { cartSliceSignOut } from \"../../redux/cart/cartSlice\";\nimport { orderSliceSignOut } from \"../../redux/orders/ordersSlice\";\nimport {\n  changeOnlineMsg,\n  selectOnlineStatus,\n} from \"../../redux/online/onlineSlice\";\nimport {\n  medicinesSliceSignOut,\n  resetMedicines,\n} from \"../../redux/medicines/medicinesSlices\";\nimport { statisticsSliceSignOut } from \"../../redux/statistics/statisticsSlice\";\nimport { advertisementsSignOut } from \"../../redux/advertisements/advertisementsSlice\";\nimport { companiesSectionOneSignOut } from \"../../redux/advertisements/companiesSectionOneSlice\";\nimport { companiesSectionTwoSignOut } from \"../../redux/advertisements/companiesSectionTwoSlice\";\nimport { itemsSectionOneSignOut } from \"../../redux/advertisements/itemsSectionOneSlice\";\nimport { itemsSectionThreeSignOut } from \"../../redux/advertisements/itemsSectionThreeSlice\";\nimport { itemsSectionTwoSignOut } from \"../../redux/advertisements/itemsSectionTwoSlice\";\nimport { warehousesSectionOneSignOut } from \"../../redux/advertisements/warehousesSectionOneSlice\";\nimport { notificationsSignOut } from \"../../redux/notifications/notificationsSlice\";\nimport { settingsSignOut } from \"../../redux/settings/settingsSlice\";\nimport { usersNotificationsSignOut } from \"../../redux/userNotifications/userNotificationsSlice\";\nimport { savedItemsSliceSignOut } from \"../../redux/savedItems/savedItemsSlice\";\nimport { basketsSliceSignOut } from \"../../redux/baskets/basketsSlice\";\nimport { itemsWithPointsSliceSignOut } from \"../../redux/itemsWithPoints/itemsWithPointsSlices\";\n\n// components\nimport CenterContainer from \"../center-container/center-container.component\";\nimport PasswordRow from \"../password-row/password-row.component\";\nimport Button from \"../button/button.component\";\n\nfunction DeleteMe() {\n  const { t } = useTranslation();\n  const isOnline = useSelector(selectOnlineStatus);\n\n  const { token, deleteError } = useSelector(selectUserData);\n  const dispatch = useDispatch();\n\n  const [passwordForDelete, setPasswordForDelete] = useState(\"\");\n  const [passwordForDeleteError, setPasswordForDeleteError] = useState(\"\");\n\n  // method to handle change in password for delete account\n  const handlePasswordForDeleteChange = (field, val) => {\n    setPasswordForDelete(val);\n    setPasswordForDeleteError(\"\");\n  };\n\n  const handleDeleteMe = () => {\n    // the password length must be greater than 0\n    if (passwordForDelete.length === 0) {\n      setPasswordForDeleteError(\"enter password error\");\n      return;\n    }\n\n    // check the internet connection\n    if (!isOnline) {\n      dispatch(changeOnlineMsg());\n      return;\n    }\n\n    // dispatch delete operation\n    dispatch(deleteMe({ obj: { password: passwordForDelete }, token }))\n      .then(unwrapResult)\n      .then(() => {\n        // on succeeded sign out and reset redux's store\n        dispatch(authSliceSignOut());\n        dispatch(cartSliceSignOut());\n        dispatch(companySliceSignOut());\n        dispatch(favoritesSliceSignOut());\n        dispatch(itemsSliceSignOut());\n        dispatch(statisticsSliceSignOut());\n        dispatch(usersSliceSignOut());\n        dispatch(warehouseSliceSignOut());\n        dispatch(orderSliceSignOut());\n        dispatch(resetMedicines());\n        dispatch(advertisementsSignOut());\n        dispatch(companiesSectionOneSignOut());\n        dispatch(companiesSectionTwoSignOut());\n        dispatch(itemsSectionOneSignOut());\n        dispatch(itemsSectionThreeSignOut());\n        dispatch(itemsSectionTwoSignOut());\n        dispatch(warehousesSectionOneSignOut());\n        dispatch(medicinesSliceSignOut());\n        dispatch(notificationsSignOut());\n        dispatch(settingsSignOut());\n        dispatch(usersNotificationsSignOut());\n        dispatch(savedItemsSliceSignOut());\n        dispatch(basketsSliceSignOut());\n        dispatch(itemsWithPointsSliceSignOut());\n        localStorage.removeItem(\"token\");\n      })\n      .catch(() => {\n        // on failed, show message below the password input\n        setPasswordForDeleteError(t(deleteError));\n      });\n  };\n\n  return (\n    <>\n      <PasswordRow\n        labelText={t(\"password\")}\n        field=\"deletePassword\"\n        value={passwordForDelete}\n        onInputChange={handlePasswordForDeleteChange}\n        error={t(passwordForDeleteError)}\n      />\n      <CenterContainer>\n        <Button\n          text=\"delete user\"\n          action={handleDeleteMe}\n          classStyle=\"bg_red\"\n        />\n      </CenterContainer>\n    </>\n  );\n}\n\nexport default DeleteMe;\n","import React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\n// redux stuff\nimport { unwrapResult } from \"@reduxjs/toolkit\";\n\n// components\nimport Button from \"../button/button.component\";\n\n// styles\nimport styles from \"./info-row.module.scss\";\n\n// constants\nimport { cancelOperation } from \"../../redux/auth/authSlice\";\n\n// use this promise to abort the operation by click on the cancel button\nlet promise;\n\n// Info Row component\nfunction InfoRow({ labelText, value, onInputChange, action, field, editable }) {\n  const { t } = useTranslation();\n\n  // save the previous value for cancel button\n  const [previousValue, setPreviousValue] = useState(\"\");\n  const [isEditable, setIsEditable] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  // to show loading icon while update the user info in the DB\n  const [loading, setLoading] = useState(false);\n\n  // method to handle click on the ok action\n  const handleOkAction = () => {\n    // no change in the input\n    // return the the read mode\n    // return\n    if (value === previousValue) {\n      setIsEditable(false);\n      return;\n    }\n\n    // input value empty,\n    // stay in the edit mode and show an error message below input field\n    // return\n    if (\n      (field === \"name\" || field === \"username\" || field === \"mobile\") &&\n      value === \"\"\n    ) {\n      setError(\"enter value\");\n      return;\n    }\n\n    // dispatch the action\n    // if everything is okay\n    // 1- return the read mode\n    // 2- show a successful toast\n    // if there is an error\n    // 1- stay at the edit mode\n    // 2- show an error message below the input field\n    setLoading(true);\n\n    promise = action();\n\n    // check if the promise is not undefined\n    if (promise) {\n      promise\n        .then(unwrapResult)\n        .then((originalPromiseResult) => {\n          setIsEditable(false);\n          setLoading(false);\n        })\n        .catch((rejectedValueOrSerializedError) => {\n          setError(\n            rejectedValueOrSerializedError.message\n              ? rejectedValueOrSerializedError.message\n              : rejectedValueOrSerializedError\n          );\n          setLoading(false);\n          if (!rejectedValueOrSerializedError.message) {\n            setIsEditable(false);\n            setError(\"\");\n            onInputChange(field, previousValue);\n          }\n        });\n    } else {\n      cancelHandler();\n    }\n  };\n\n  // method to handle enter press in the input field\n  const onEnterPressHandler = (e) => {\n    if (e.key === \"Enter\") {\n      handleOkAction();\n    }\n  };\n\n  // method to handle the cancel button\n  // return the read mode\n  // set the error to empty\n  // set the value of the input field to the previous value\n  const cancelHandler = () => {\n    setLoading(false);\n    setIsEditable(false);\n    setError(\"\");\n    onInputChange(field, previousValue);\n    cancelOperation();\n  };\n\n  // method to handle escape press in the input field\n  const escapePressHandler = (e) => {\n    if (e.key === \"Escape\") {\n      cancelHandler();\n    }\n  };\n\n  return (\n    <>\n      <div\n        className={styles.info_row}\n        onDoubleClick={() => {\n          if (editable) {\n            setIsEditable(true);\n            setPreviousValue(value);\n          }\n        }}\n      >\n        <label className={[styles.label, \"fc_light\"].join(\" \")}>\n          {labelText}\n        </label>\n        {isEditable ? (\n          <div className={[styles.value, \"fc_dark\"].join(\" \")}>\n            <input\n              className=\"fc_dark\"\n              value={value}\n              onChange={(e) => {\n                onInputChange(field, e.target.value);\n                setError(\"\");\n              }}\n              onKeyPress={onEnterPressHandler}\n              onKeyDown={escapePressHandler}\n            />\n          </div>\n        ) : (\n          <div className={[styles.value, \"fc_dark\"].join(\" \")}>\n            <label>{value}</label>\n          </div>\n        )}\n        {editable ? (\n          isEditable ? (\n            <div className={styles.actions}>\n              <Button\n                text=\"ok\"\n                action={handleOkAction}\n                classStyle=\"bg_light\"\n                loading={loading}\n              />\n              <Button\n                text=\"cancel\"\n                action={cancelHandler}\n                classStyle=\"bg_red\"\n              />\n            </div>\n          ) : (\n            <div className={\"flex_center_container\"}>\n              <Button\n                text=\"update\"\n                action={() => {\n                  setIsEditable(true);\n                  setPreviousValue(value);\n                }}\n                classStyle=\"bg_green\"\n              />\n            </div>\n          )\n        ) : null}\n      </div>\n\n      {/* show error below the input field */}\n      {error && error !== \"cancel\" && error !== \"timeout\" && (\n        <p className={styles.error}>{t(error)}</p>\n      )}\n    </>\n  );\n}\n\nexport default InfoRow;\n","// extracted by mini-css-extract-plugin\nexport default {\"small_font\":\"info-row_small_font__KBiJc\",\"info_row\":\"info-row_info_row__gsWbt\",\"label\":\"info-row_label__FL2z8\",\"value\":\"info-row_value__YYJJM\",\"error\":\"info-row_error__zMDV7\",\"actions\":\"info-row_actions__SrOEk\"};","// extracted by mini-css-extract-plugin\nexport default {\"small_font\":\"user-profile-page_small_font__cIiH-\",\"content\":\"user-profile-page_content__Z9PNk\",\"image_container\":\"user-profile-page_image_container__8dehf\",\"info\":\"user-profile-page_info__ks7xD\",\"logo\":\"user-profile-page_logo__SGRns\",\"hide\":\"user-profile-page_hide__JdwJR\"};","// libraries\nimport React, { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Redirect } from \"react-router-dom\";\nimport axios from \"axios\";\nimport Logo from \"../../assets/transparent_logo.png\";\n\n// components\nimport UserProfileNotifications from \"../../components/user-profile-notifications/user-profile-notifications.component\";\nimport MainContentContainer from \"../../components/main-content-container/main-content-container.component\";\nimport ButtonWithIcon from \"../../components/button-with-icon/button-with-icon.component\";\nimport ChangePassword from \"../../components/change-password/change-password.component\";\nimport EditableCity from \"../../components/editable-city/editable-city.component\";\nimport Loader from \"../../components/action-loader/action-loader.component\";\nimport CardInfo from \"../../components/card-info/card-info.component\";\nimport DeleteMe from \"../../components/delete-me/delete-me.component\";\nimport InfoRow from \"../../components/info-row/info-row.component\";\nimport Header from \"../../components/header/header.component\";\nimport Button from \"../../components/button/button.component\";\n\n// redux stuff\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  changeLogoURL,\n  selectUserData,\n  updateUserInfo,\n} from \"../../redux/auth/authSlice\";\nimport {\n  changeOnlineMsg,\n  selectOnlineStatus,\n} from \"../../redux/online/onlineSlice\";\n\n// styles\nimport styles from \"./user-profile-page.module.scss\";\nimport rowStyles from \"../../components/row.module.scss\";\n\n// constants, and utile\nimport {\n  UserTypeConstants,\n  Colors,\n  SERVER_URL,\n  BASEURL,\n} from \"../../utils/constants\";\nimport { BsImageAlt } from \"react-icons/bs\";\nimport Toast from \"../../components/toast/toast.component\";\n\nfunction UserProfilePage({ onSelectedChange }) {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const inputFileRef = React.useRef(null);\n\n  // selectors\n  const isOnline = useSelector(selectOnlineStatus);\n  const { token, user } = useSelector(selectUserData);\n\n  // own state\n  const [userObj, setUserObj] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [imageSizeWarningMsg, setImageSizeWarningMsg] = useState(\"\");\n\n  const handleClick = () => {\n    inputFileRef.current.click();\n  };\n\n  const fileSelectedHandler = (event) => {\n    if (event.target.files[0]) {\n      if (parseFloat(event.target.files[0].size / 1024).toFixed(2) < 512) {\n        setLoading(true);\n        // setSelectedFile(event.target.files[0]);\n        let formData = new FormData();\n        formData.append(\"file\", event.target.files[0]);\n\n        const config = {\n          headers: {\n            \"content-type\": \"multipart/form-data\",\n            Authorization: `Bearer ${token}`,\n          },\n        };\n\n        axios.post(`${BASEURL}/users/upload`, formData, config).then((res) => {\n          dispatch(changeLogoURL(res.data.data.name));\n          getMyInfo();\n          setLoading(false);\n        });\n      } else {\n        setImageSizeWarningMsg(\"image-size-must-be-less-than\");\n      }\n    }\n  };\n\n  const handleInputChange = (field, val) => {\n    setUserObj({\n      ...userObj,\n      [field]: val,\n    });\n  };\n\n  const handleCityChange = (val) => {\n    setUserObj({\n      ...userObj,\n      city: val,\n    });\n  };\n\n  const updateFieldHandler = (field) => {\n    // check the internet connection\n    if (!isOnline) {\n      dispatch(changeOnlineMsg());\n      return;\n    }\n\n    // dispatch updateUserInfo\n    return dispatch(\n      updateUserInfo({ obj: { [field]: userObj[field] }, token: token })\n    );\n  };\n\n  const getMyInfo = () => {\n    axios\n      .get(`${BASEURL}/users/me`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then((response) => {\n        setUserObj(response.data.data.user);\n      });\n  };\n\n  useEffect(() => {\n    getMyInfo();\n    window.scrollTo(0, 0);\n    onSelectedChange();\n  }, []);\n\n  return user ? (\n    <>\n      <Header title=\"profile\" />\n\n      <MainContentContainer>\n        <div className={styles.content}>\n          <div className={styles.image_container}>\n            <div className={styles.logo}>\n              <img\n                src={\n                  userObj.logo_url && userObj.logo_url !== \"\"\n                    ? `${SERVER_URL}/profiles/${userObj.logo_url}`\n                    : Logo\n                }\n                alt=\"thumb\"\n              />\n            </div>\n\n            <div className={styles.hide}>\n              <form encType=\"multipart/form-data\">\n                <div>\n                  <input\n                    type=\"file\"\n                    name=\"file\"\n                    onChange={fileSelectedHandler}\n                    ref={inputFileRef}\n                    stye={{ display: \"none\" }}\n                    accept=\"image/png, image/gif, image/jpeg\"\n                  />\n                </div>\n              </form>\n            </div>\n\n            <div>\n              <ButtonWithIcon\n                text={t(\"change logo\")}\n                action={handleClick}\n                bgColor={Colors.MAIN_COLOR}\n                icon={() => <BsImageAlt />}\n              />\n            </div>\n          </div>\n\n          <div className={styles.info}>\n            <CardInfo headerTitle={t(\"personal info\")}>\n              <InfoRow\n                editable={true}\n                field=\"name\"\n                labelText={t(\"name\")}\n                value={userObj.name}\n                onInputChange={handleInputChange}\n                action={() => updateFieldHandler(\"name\")}\n              />\n              <InfoRow\n                editable={true}\n                field=\"username\"\n                labelText={t(\"username\")}\n                value={userObj.username}\n                onInputChange={handleInputChange}\n                action={() => updateFieldHandler(\"username\")}\n              />\n              <InfoRow\n                editable={false}\n                labelText={t(\"user type\")}\n                value={t(userObj.type)}\n                onInputChange={handleInputChange}\n              />\n            </CardInfo>\n\n            <CardInfo headerTitle={t(\"communication info\")}>\n              <InfoRow\n                editable={true}\n                field=\"phone\"\n                labelText={t(\"phone\")}\n                value={userObj.phone}\n                onInputChange={handleInputChange}\n                action={() => updateFieldHandler(\"phone\")}\n              />\n              <InfoRow\n                editable={true}\n                field=\"mobile\"\n                labelText={t(\"mobile\")}\n                value={userObj.mobile}\n                onInputChange={handleInputChange}\n                action={() => updateFieldHandler(\"mobile\")}\n              />\n              <InfoRow\n                editable={true}\n                field=\"email\"\n                labelText={t(\"email\")}\n                value={userObj.email}\n                onInputChange={handleInputChange}\n                action={() => updateFieldHandler(\"email\")}\n              />\n            </CardInfo>\n\n            <CardInfo headerTitle={t(\"address\")}>\n              <EditableCity\n                editable={true}\n                field=\"city\"\n                labelText={t(\"city\")}\n                value={{\n                  value: userObj.city,\n                  label: t(userObj.city),\n                }}\n                onInputChange={handleCityChange}\n                action={() => updateFieldHandler(\"city\")}\n              />\n\n              <InfoRow\n                editable={true}\n                field=\"addressDetails\"\n                labelText={t(\"address\")}\n                value={userObj.addressDetails}\n                onInputChange={handleInputChange}\n                action={() => updateFieldHandler(\"addressDetails\")}\n              />\n            </CardInfo>\n\n            {user.type === UserTypeConstants.PHARMACY ||\n            user.type === UserTypeConstants.WAREHOUSE ? (\n              <CardInfo headerTitle={t(\"additional info\")}>\n                <InfoRow\n                  editable={true}\n                  field=\"employeeName\"\n                  labelText={t(\"employee name\")}\n                  value={userObj.employeeName}\n                  onInputChange={handleInputChange}\n                  action={() => updateFieldHandler(\"employeeName\")}\n                />\n                <InfoRow\n                  editable={true}\n                  field=\"certificateName\"\n                  labelText={t(\"certificate name\")}\n                  value={userObj.certificateName}\n                  onInputChange={handleInputChange}\n                  action={() => updateFieldHandler(\"certificateName\")}\n                />\n              </CardInfo>\n            ) : (\n              <></>\n            )}\n\n            {user.type === UserTypeConstants.GUEST ? (\n              <CardInfo headerTitle={t(\"additional info\")}>\n                <InfoRow\n                  editable={true}\n                  field=\"guestDetails.job\"\n                  labelText={t(\"job\")}\n                  value={t(userObj.guestDetails?.job)}\n                  onInputChange={handleInputChange}\n                  action={() => updateFieldHandler(\"guestDetails.job\")}\n                />\n                <InfoRow\n                  editable={true}\n                  field=\"guestDetails.companyName\"\n                  labelText={t(\"company\")}\n                  value={userObj.guestDetails?.companyName}\n                  onInputChange={handleInputChange}\n                  action={() => updateFieldHandler(\"guestDetails.companyName\")}\n                />\n              </CardInfo>\n            ) : (\n              <></>\n            )}\n\n            <CardInfo headerTitle={t(\"change password\")}>\n              <ChangePassword />\n            </CardInfo>\n\n            {(user.type === UserTypeConstants.COMPANY ||\n              user.type === UserTypeConstants.WAREHOUSE) && (\n              <CardInfo\n                headerTitle={t(\"admin permission\")}\n                bgColor={Colors.FAILED_COLOR}\n              >\n                <div\n                  className={[\n                    rowStyles.container,\n                    rowStyles.without_box_shadow,\n                  ].join(\" \")}\n                  style={{\n                    padding: \"0 12px\",\n                  }}\n                >\n                  <input\n                    type=\"checkbox\"\n                    value={userObj.allowAdmin}\n                    onChange={(e) =>\n                      handleInputChange(\"allowAdmin\", !userObj.allowAdmin)\n                    }\n                    checked={userObj.allowAdmin}\n                  />\n                  <label className=\"right\" style={{ flex: \"1\" }}>\n                    {t(\"admin-permission-label\")}\n                  </label>\n                  <Button\n                    text=\"update\"\n                    action={() => updateFieldHandler(\"allowAdmin\")}\n                    classStyle=\"bg_green\"\n                  />\n                </div>\n              </CardInfo>\n            )}\n\n            <CardInfo\n              headerTitle={t(\"delete user\")}\n              bgColor={Colors.FAILED_COLOR}\n              type=\"warning\"\n            >\n              <DeleteMe />\n            </CardInfo>\n          </div>\n        </div>\n\n        {imageSizeWarningMsg && (\n          <Toast\n            bgColor={Colors.FAILED_COLOR}\n            foreColor=\"#fff\"\n            actionAfterTimeout={() => {\n              setImageSizeWarningMsg(\"\");\n            }}\n          >\n            <p>{t(\"image-size-must-be-less-than\")}</p>\n          </Toast>\n        )}\n\n        <UserProfileNotifications />\n      </MainContentContainer>\n      {loading && <Loader />}\n    </>\n  ) : (\n    <Redirect to=\"/\" />\n  );\n}\n\nexport default UserProfilePage;\n","// extracted by mini-css-extract-plugin\nexport default {\"small_font\":\"row_small_font__QRZyr\",\"container\":\"row_container__Y6btC\",\"search_container\":\"row_search_container__+3nD0\",\"without_box_shadow\":\"row_without_box_shadow__nNFVn\",\"error\":\"row_error__ndRw+\",\"align_start\":\"row_align_start__o1AI5\",\"hover_underline\":\"row_hover_underline__cCk90\",\"padding_start\":\"row_padding_start__qzXL4\",\"padding_end\":\"row_padding_end__w2Kek\",\"padding_all\":\"row_padding_all__qiAwy\",\"full_width\":\"row_full_width__fyOgl\",\"icon\":\"row_icon__nyfpJ\",\"cart_icon\":\"row_cart_icon__evv2R\",\"input\":\"row_input__mnhz8\"};"],"names":["headerTitle","children","type","useState","expanded","setExpanded","className","styles","join","onClick","labelText","value","onInputChange","field","error","onChange","e","target","t","useTranslation","dispatch","useDispatch","useSelector","selectUserData","changePasswordStatus","passwordError","changeLogoError","changeLogoStatus","updateStatus","updateError","deleteStatus","deleteError","allowCancel","bgColor","Colors","foreColor","actionAfterTimeout","resetPasswordStatus","resetPasswordError","split","map","err","index","resetUpdateStatus","resetUpdateError","resetChangeLogoError","onclick","cancelOperation","resetDeleteError","token","isOnline","selectOnlineStatus","oldPassword","newPassword","newPasswordConfirm","passwordObj","setPasswordObj","passwordObjError","setPasswordObjError","handlePasswordFieldsChange","val","style","padding","text","action","errorObj","length","Object","entries","changeMyPassword","obj","then","unwrapResult","changeOnlineMsg","classStyle","options","onchange","defaultOption","customStyles","control","provided","state","background","borderColor","color","minHeight","height","maxHeight","boxShadow","isFocused","borderRadius","flex","menu","zIndex","option","isSelected","fontSize","valueContainer","input","margin","indicatorSeparator","display","indicatorsContainer","defaultValue","promise","onSelectionChange","caption","citiesOptions","CitiesName","label","editable","previousValue","isEditable","setIsEditable","setError","loading","setLoading","cancelHandler","originalPromiseResult","catch","rejectedValueOrSerializedError","message","minWidth","passwordForDelete","setPasswordForDelete","passwordForDeleteError","setPasswordForDeleteError","deleteMe","password","authSliceSignOut","cartSliceSignOut","companySliceSignOut","favoritesSliceSignOut","itemsSliceSignOut","statisticsSliceSignOut","usersSliceSignOut","warehouseSliceSignOut","orderSliceSignOut","resetMedicines","advertisementsSignOut","companiesSectionOneSignOut","companiesSectionTwoSignOut","itemsSectionOneSignOut","itemsSectionThreeSignOut","itemsSectionTwoSignOut","warehousesSectionOneSignOut","medicinesSliceSignOut","notificationsSignOut","settingsSignOut","usersNotificationsSignOut","savedItemsSliceSignOut","basketsSliceSignOut","itemsWithPointsSliceSignOut","localStorage","removeItem","setPreviousValue","handleOkAction","onDoubleClick","onKeyPress","key","onKeyDown","onSelectedChange","inputFileRef","React","user","userObj","setUserObj","imageSizeWarningMsg","setImageSizeWarningMsg","handleInputChange","updateFieldHandler","updateUserInfo","getMyInfo","axios","BASEURL","headers","Authorization","response","data","useEffect","window","scrollTo","title","src","logo_url","SERVER_URL","Logo","alt","encType","name","event","files","parseFloat","size","toFixed","formData","FormData","append","config","res","changeLogoURL","ref","stye","accept","current","click","icon","username","phone","mobile","email","city","addressDetails","UserTypeConstants","employeeName","certificateName","guestDetails","job","companyName","rowStyles","allowAdmin","checked","to"],"sourceRoot":""}